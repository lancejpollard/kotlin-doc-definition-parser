{
  "type": "unknown",
  "name": "IntArray",
  "signature": "class IntArray",
  "items": [
    {
      "text": "<init>(size: Int, init: (Int) -> Int)",
      "desc": "Creates a new array of the specified size, where each element is calculated by calling the specified init function."
    },
    {
      "text": "<init>(size: Int)",
      "desc": "Creates a new array of the specified size, with all elements initialized to zero."
    },
    {
      "text": "val size: Int",
      "desc": "Returns the number of elements in the array."
    },
    {
      "text": "operator fun get(index: Int): Int",
      "desc": "Returns the array element at the given index. This method can be called using the index operator."
    },
    {
      "text": "operator fun iterator(): IntIterator",
      "desc": "Creates an iterator over the elements of the array."
    },
    {
      "text": "operator fun set(index: Int, value: Int)",
      "desc": "Sets the element at the given index to the given value. This method can be called using the index operator."
    },
    {
      "text": "val IntArray.indices: IntRange",
      "desc": "Returns the range of valid indices for the array."
    },
    {
      "text": "val IntArray.lastIndex: Int",
      "desc": "Returns the last valid index for the array."
    },
    {
      "text": "fun IntArray.all(predicate: (Int) -> Boolean): Boolean",
      "desc": "Returns true if all elements match the given predicate."
    },
    {
      "text": "fun IntArray.any(): Boolean",
      "desc": "Returns true if array has at least one element."
    },
    {
      "text": "fun IntArray.any(predicate: (Int) -> Boolean): Boolean",
      "desc": "Returns true if at least one element matches the given predicate."
    },
    {
      "text": "fun IntArray.asIterable(): Iterable<Int>",
      "desc": "Creates an Iterable instance that wraps the original array returning its elements when being iterated."
    },
    {
      "text": "fun IntArray.asSequence(): Sequence<Int>",
      "desc": "Creates a Sequence instance that wraps the original array returning its elements when being iterated."
    },
    {
      "text": "fun <K, V> IntArray.associate( transform: (Int) -> Pair<K, V>): Map<K, V>",
      "desc": "Returns a Map containing key-value pairs provided by transform function applied to elements of the given array."
    },
    {
      "text": "fun <K> IntArray.associateBy( keySelector: (Int) -> K): Map<K, Int>",
      "desc": "Returns a Map containing the elements from the given array indexed by the key returned from keySelector function applied to each element."
    },
    {
      "text": "fun <K, V> IntArray.associateBy( keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V>",
      "desc": "Returns a Map containing the values provided by valueTransform and indexed by keySelector functions applied to elements of the given array."
    },
    {
      "text": "fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo( destination: M, keySelector: (Int) -> K): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs, where key is provided by the keySelector function applied to each element of the given array and value is the element itself."
    },
    {
      "text": "fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo( destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs, where key is provided by the keySelector function and and value is provided by the valueTransform function applied to elements of the given array."
    },
    {
      "text": "fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo( destination: M, transform: (Int) -> Pair<K, V>): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs provided by transform function applied to each element of the given array."
    },
    {
      "text": "fun <V> IntArray.associateWith( valueSelector: (Int) -> V): Map<Int, V>",
      "desc": "Returns a Map where keys are elements from the given array and values are produced by the valueSelector function applied to each element."
    },
    {
      "text": "fun <V, M : MutableMap<in Int, in V>> IntArray.associateWithTo( destination: M, valueSelector: (Int) -> V): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs for each element of the given array, where key is the element itself and value is provided by the valueSelector function applied to that key."
    },
    {
      "text": "fun IntArray.asUIntArray(): UIntArray",
      "desc": "Returns an array of type UIntArray, which is a view of this array where each element is an unsigned reinterpretation of the corresponding element of this array."
    },
    {
      "text": "fun IntArray.average(): Double",
      "desc": "Returns an average value of elements in the array."
    },
    {
      "text": "fun IntArray.binarySearch( element: Int, fromIndex: Int = 0, toIndex: Int = size): Int",
      "desc": "Searches the array or the range of the array for the provided element using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined."
    },
    {
      "text": "operator fun IntArray.component1(): Int",
      "desc": "Returns 1st element from the array."
    },
    {
      "text": "operator fun IntArray.component2(): Int",
      "desc": "Returns 2nd element from the array."
    },
    {
      "text": "operator fun IntArray.component3(): Int",
      "desc": "Returns 3rd element from the array."
    },
    {
      "text": "operator fun IntArray.component4(): Int",
      "desc": "Returns 4th element from the array."
    },
    {
      "text": "operator fun IntArray.component5(): Int",
      "desc": "Returns 5th element from the array."
    },
    {
      "text": "operator fun IntArray.contains(element: Int): Boolean",
      "desc": "Returns true if element is found in the array."
    },
    {
      "text": "fun IntArray.count(): Int",
      "desc": "Returns the number of elements in this array."
    },
    {
      "text": "fun IntArray.count(predicate: (Int) -> Boolean): Int",
      "desc": "Returns the number of elements matching the given predicate."
    },
    {
      "text": "fun IntArray.distinct(): List<Int>",
      "desc": "Returns a list containing only distinct elements from the given array."
    },
    {
      "text": "fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int>",
      "desc": "Returns a list containing only elements from the given array having distinct keys returned by the given selector function."
    },
    {
      "text": "fun IntArray.drop(n: Int): List<Int>",
      "desc": "Returns a list containing all elements except first n elements."
    },
    {
      "text": "fun IntArray.dropLast(n: Int): List<Int>",
      "desc": "Returns a list containing all elements except last n elements."
    },
    {
      "text": "fun IntArray.dropLastWhile( predicate: (Int) -> Boolean): List<Int>",
      "desc": "Returns a list containing all elements except last elements that satisfy the given predicate."
    },
    {
      "text": "fun IntArray.dropWhile( predicate: (Int) -> Boolean): List<Int>",
      "desc": "Returns a list containing all elements except first elements that satisfy the given predicate."
    },
    {
      "text": "fun IntArray.elementAtOrElse( index: Int, defaultValue: (Int) -> Int): Int",
      "desc": "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
    },
    {
      "text": "fun IntArray.elementAtOrNull(index: Int): Int?",
      "desc": "Returns an element at the given index or null if the index is out of bounds of this array."
    },
    {
      "text": "fun IntArray.filter(predicate: (Int) -> Boolean): List<Int>",
      "desc": "Returns a list containing only elements matching the given predicate."
    },
    {
      "text": "fun IntArray.filterIndexed( predicate: (index: Int, Int) -> Boolean): List<Int>",
      "desc": "Returns a list containing only elements matching the given predicate."
    },
    {
      "text": "fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo( destination: C, predicate: (index: Int, Int) -> Boolean): C",
      "desc": "Appends all elements matching the given predicate to the given destination."
    },
    {
      "text": "fun IntArray.filterNot( predicate: (Int) -> Boolean): List<Int>",
      "desc": "Returns a list containing all elements not matching the given predicate."
    },
    {
      "text": "fun <C : MutableCollection<in Int>> IntArray.filterNotTo( destination: C, predicate: (Int) -> Boolean): C",
      "desc": "Appends all elements not matching the given predicate to the given destination."
    },
    {
      "text": "fun <C : MutableCollection<in Int>> IntArray.filterTo( destination: C, predicate: (Int) -> Boolean): C",
      "desc": "Appends all elements matching the given predicate to the given destination."
    },
    {
      "text": "fun IntArray.find(predicate: (Int) -> Boolean): Int?",
      "desc": "Returns the first element matching the given predicate, or null if no such element was found."
    },
    {
      "text": "fun IntArray.findLast(predicate: (Int) -> Boolean): Int?",
      "desc": "Returns the last element matching the given predicate, or null if no such element was found."
    },
    {
      "text": "fun IntArray.first(): Int",
      "desc": "Returns first element."
    },
    {
      "text": "fun IntArray.first(predicate: (Int) -> Boolean): Int",
      "desc": "Returns the first element matching the given predicate."
    },
    {
      "text": "fun IntArray.firstOrNull(): Int?",
      "desc": "Returns the first element, or null if the array is empty."
    },
    {
      "text": "fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int?",
      "desc": "Returns the first element matching the given predicate, or null if element was not found."
    },
    {
      "text": "fun <R> IntArray.flatMap( transform: (Int) -> Iterable<R>): List<R>",
      "desc": "Returns a single list of all elements yielded from results of transform function being invoked on each element of original array."
    },
    {
      "text": "fun <R> IntArray.flatMapIndexed( transform: (index: Int, Int) -> Iterable<R>): List<R>",
      "desc": "Returns a single list of all elements yielded from results of transform function being invoked on each element and its index in the original array."
    },
    {
      "text": "fun <R, C : MutableCollection<in R>> IntArray.flatMapIndexedTo( destination: C, transform: (index: Int, Int) -> Iterable<R>): C",
      "desc": "Appends all elements yielded from results of transform function being invoked on each element and its index in the original array, to the given destination."
    },
    {
      "text": "fun <R, C : MutableCollection<in R>> IntArray.flatMapTo( destination: C, transform: (Int) -> Iterable<R>): C",
      "desc": "Appends all elements yielded from results of transform function being invoked on each element of original array, to the given destination."
    },
    {
      "text": "fun <R> IntArray.fold( initial: R, operation: (acc: R, Int) -> R): R",
      "desc": "Accumulates value starting with initial value and applying operation from left to right to current accumulator value and each element."
    },
    {
      "text": "fun <R> IntArray.foldIndexed( initial: R, operation: (index: Int, acc: R, Int) -> R): R",
      "desc": "Accumulates value starting with initial value and applying operation from left to right to current accumulator value and each element with its index in the original array."
    },
    {
      "text": "fun <R> IntArray.foldRight( initial: R, operation: (Int, acc: R) -> R): R",
      "desc": "Accumulates value starting with initial value and applying operation from right to left to each element and current accumulator value."
    },
    {
      "text": "fun <R> IntArray.foldRightIndexed( initial: R, operation: (index: Int, Int, acc: R) -> R): R",
      "desc": "Accumulates value starting with initial value and applying operation from right to left to each element with its index in the original array and current accumulator value."
    },
    {
      "text": "fun IntArray.forEach(action: (Int) -> Unit)",
      "desc": "Performs the given action on each element."
    },
    {
      "text": "fun IntArray.forEachIndexed( action: (index: Int, Int) -> Unit)",
      "desc": "Performs the given action on each element, providing sequential index with the element."
    },
    {
      "text": "fun IntArray.getOrElse( index: Int, defaultValue: (Int) -> Int): Int",
      "desc": "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
    },
    {
      "text": "fun IntArray.getOrNull(index: Int): Int?",
      "desc": "Returns an element at the given index or null if the index is out of bounds of this array."
    },
    {
      "text": "fun <K> IntArray.groupBy( keySelector: (Int) -> K): Map<K, List<Int>>",
      "desc": "Groups elements of the original array by the key returned by the given keySelector function applied to each element and returns a map where each group key is associated with a list of corresponding elements."
    },
    {
      "text": "fun <K, V> IntArray.groupBy( keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>>",
      "desc": "Groups values returned by the valueTransform function applied to each element of the original array by the key returned by the given keySelector function applied to the element and returns a map where each group key is associated with a list of corresponding values."
    },
    {
      "text": "fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo( destination: M, keySelector: (Int) -> K): M",
      "desc": "Groups elements of the original array by the key returned by the given keySelector function applied to each element and puts to the destination map each group key associated with a list of corresponding elements."
    },
    {
      "text": "fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo( destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M",
      "desc": "Groups values returned by the valueTransform function applied to each element of the original array by the key returned by the given keySelector function applied to the element and puts to the destination map each group key associated with a list of corresponding values."
    },
    {
      "text": "fun IntArray.indexOf(element: Int): Int",
      "desc": "Returns first index of element, or -1 if the array does not contain element."
    },
    {
      "text": "fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int",
      "desc": "Returns index of the first element matching the given predicate, or -1 if the array does not contain such element."
    },
    {
      "text": "fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int",
      "desc": "Returns index of the last element matching the given predicate, or -1 if the array does not contain such element."
    },
    {
      "text": "infix fun IntArray.intersect(other: Iterable<Int>): Set<Int>",
      "desc": "Returns a set containing all elements that are contained by both this array and the specified collection."
    },
    {
      "text": "fun IntArray.isEmpty(): Boolean",
      "desc": "Returns true if the array is empty."
    },
    {
      "text": "fun IntArray.isNotEmpty(): Boolean",
      "desc": "Returns true if the array is not empty."
    },
    {
      "text": "fun <A : Appendable> IntArray.joinTo( buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A",
      "desc": "Appends the string from all the elements separated using separator and using the given prefix and postfix if supplied."
    },
    {
      "text": "fun IntArray.joinToString( separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String",
      "desc": "Creates a string from all the elements separated using separator and using the given prefix and postfix if supplied."
    },
    {
      "text": "fun IntArray.last(): Int",
      "desc": "Returns the last element."
    },
    {
      "text": "fun IntArray.last(predicate: (Int) -> Boolean): Int",
      "desc": "Returns the last element matching the given predicate."
    },
    {
      "text": "fun IntArray.lastIndexOf(element: Int): Int",
      "desc": "Returns last index of element, or -1 if the array does not contain element."
    },
    {
      "text": "fun IntArray.lastOrNull(): Int?",
      "desc": "Returns the last element, or null if the array is empty."
    },
    {
      "text": "fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int?",
      "desc": "Returns the last element matching the given predicate, or null if no such element was found."
    },
    {
      "text": "fun <R> IntArray.map(transform: (Int) -> R): List<R>",
      "desc": "Returns a list containing the results of applying the given transform function to each element in the original array."
    },
    {
      "text": "fun <R> IntArray.mapIndexed( transform: (index: Int, Int) -> R): List<R>",
      "desc": "Returns a list containing the results of applying the given transform function to each element and its index in the original array."
    },
    {
      "text": "fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo( destination: C, transform: (index: Int, Int) -> R): C",
      "desc": "Applies the given transform function to each element and its index in the original array and appends the results to the given destination."
    },
    {
      "text": "fun <R, C : MutableCollection<in R>> IntArray.mapTo( destination: C, transform: (Int) -> R): C",
      "desc": "Applies the given transform function to each element of the original array and appends the results to the given destination."
    },
    {
      "text": "fun IntArray.max(): Int?"
    },
    {
      "text": "fun <R : Comparable<R>> IntArray.maxBy( selector: (Int) -> R): Int?"
    },
    {
      "text": "fun <R : Comparable<R>> IntArray.maxByOrNull( selector: (Int) -> R): Int?",
      "desc": "Returns the first element yielding the largest value of the given function or null if there are no elements."
    },
    {
      "text": "fun <R : Comparable<R>> any_array<R>.maxOf( selector: (Int) -> R): R",
      "desc": "Returns the largest value among all values produced by selector function applied to each element in the array."
    },
    {
      "text": "fun <R : Comparable<R>> any_array<R>.maxOfOrNull( selector: (Int) -> R): R?",
      "desc": "Returns the largest value among all values produced by selector function applied to each element in the array or null if there are no elements."
    },
    {
      "text": "fun <R> IntArray.maxOfWith( comparator: Comparator<in R>, selector: (Int) -> R): R",
      "desc": "Returns the largest value according to the provided comparator among all values produced by selector function applied to each element in the array."
    },
    {
      "text": "fun <R> IntArray.maxOfWithOrNull( comparator: Comparator<in R>, selector: (Int) -> R): R?",
      "desc": "Returns the largest value according to the provided comparator among all values produced by selector function applied to each element in the array or null if there are no elements."
    },
    {
      "text": "fun IntArray.maxOrNull(): Int?",
      "desc": "Returns the largest element or null if there are no elements."
    },
    {
      "text": "fun IntArray.maxWith(comparator: Comparator<in Int>): Int?"
    },
    {
      "text": "fun IntArray.maxWithOrNull( comparator: Comparator<in Int>): Int?",
      "desc": "Returns the first element having the largest value according to the provided comparator or null if there are no elements."
    },
    {
      "text": "fun IntArray.min(): Int?"
    },
    {
      "text": "fun <R : Comparable<R>> IntArray.minBy( selector: (Int) -> R): Int?"
    },
    {
      "text": "fun <R : Comparable<R>> IntArray.minByOrNull( selector: (Int) -> R): Int?",
      "desc": "Returns the first element yielding the smallest value of the given function or null if there are no elements."
    },
    {
      "text": "fun <R : Comparable<R>> any_array<R>.minOf( selector: (Int) -> R): R",
      "desc": "Returns the smallest value among all values produced by selector function applied to each element in the array."
    },
    {
      "text": "fun <R : Comparable<R>> any_array<R>.minOfOrNull( selector: (Int) -> R): R?",
      "desc": "Returns the smallest value among all values produced by selector function applied to each element in the array or null if there are no elements."
    },
    {
      "text": "fun <R> IntArray.minOfWith( comparator: Comparator<in R>, selector: (Int) -> R): R",
      "desc": "Returns the smallest value according to the provided comparator among all values produced by selector function applied to each element in the array."
    },
    {
      "text": "fun <R> IntArray.minOfWithOrNull( comparator: Comparator<in R>, selector: (Int) -> R): R?",
      "desc": "Returns the smallest value according to the provided comparator among all values produced by selector function applied to each element in the array or null if there are no elements."
    },
    {
      "text": "fun IntArray.minOrNull(): Int?",
      "desc": "Returns the smallest element or null if there are no elements."
    },
    {
      "text": "fun IntArray.minWith(comparator: Comparator<in Int>): Int?"
    },
    {
      "text": "fun IntArray.minWithOrNull( comparator: Comparator<in Int>): Int?",
      "desc": "Returns the first element having the smallest value according to the provided comparator or null if there are no elements."
    },
    {
      "text": "fun IntArray.none(): Boolean",
      "desc": "Returns true if the array has no elements."
    },
    {
      "text": "fun IntArray.none(predicate: (Int) -> Boolean): Boolean",
      "desc": "Returns true if no elements match the given predicate."
    },
    {
      "text": "fun IntArray.onEach(action: (Int) -> Unit): IntArray",
      "desc": "Performs the given action on each element and returns the array itself afterwards."
    },
    {
      "text": "fun IntArray.onEachIndexed( action: (index: Int, Int) -> Unit): IntArray",
      "desc": "Performs the given action on each element, providing sequential index with the element, and returns the array itself afterwards."
    },
    {
      "text": "fun IntArray.partition( predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>>",
      "desc": "Splits the original array into pair of lists, where first list contains elements for which predicate yielded true, while second list contains elements for which predicate yielded false."
    },
    {
      "text": "fun IntArray.random(): Int",
      "desc": "Returns a random element from this array."
    },
    {
      "text": "fun IntArray.random(random: Random): Int",
      "desc": "Returns a random element from this array using the specified source of randomness."
    },
    {
      "text": "fun IntArray.randomOrNull(): Int?",
      "desc": "Returns a random element from this array, or null if this array is empty."
    },
    {
      "text": "fun IntArray.randomOrNull(random: Random): Int?",
      "desc": "Returns a random element from this array using the specified source of randomness, or null if this array is empty."
    },
    {
      "text": "fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int",
      "desc": "Accumulates value starting with the first element and applying operation from left to right to current accumulator value and each element."
    },
    {
      "text": "fun IntArray.reduceIndexed( operation: (index: Int, acc: Int, Int) -> Int): Int",
      "desc": "Accumulates value starting with the first element and applying operation from left to right to current accumulator value and each element with its index in the original array."
    },
    {
      "text": "fun IntArray.reduceIndexedOrNull( operation: (index: Int, acc: Int, Int) -> Int): Int?",
      "desc": "Accumulates value starting with the first element and applying operation from left to right to current accumulator value and each element with its index in the original array."
    },
    {
      "text": "fun IntArray.reduceOrNull( operation: (acc: Int, Int) -> Int): Int?",
      "desc": "Accumulates value starting with the first element and applying operation from left to right to current accumulator value and each element."
    },
    {
      "text": "fun IntArray.reduceRight( operation: (Int, acc: Int) -> Int): Int",
      "desc": "Accumulates value starting with the last element and applying operation from right to left to each element and current accumulator value."
    },
    {
      "text": "fun IntArray.reduceRightIndexed( operation: (index: Int, Int, acc: Int) -> Int): Int",
      "desc": "Accumulates value starting with the last element and applying operation from right to left to each element with its index in the original array and current accumulator value."
    },
    {
      "text": "fun IntArray.reduceRightIndexedOrNull( operation: (index: Int, Int, acc: Int) -> Int): Int?",
      "desc": "Accumulates value starting with the last element and applying operation from right to left to each element with its index in the original array and current accumulator value."
    },
    {
      "text": "fun IntArray.reduceRightOrNull( operation: (Int, acc: Int) -> Int): Int?",
      "desc": "Accumulates value starting with the last element and applying operation from right to left to each element and current accumulator value."
    },
    {
      "text": "fun IntArray.refTo(index: Int): CValuesRef<IntVar>"
    },
    {
      "text": "fun IntArray.reverse()",
      "desc": "Reverses elements in the array in-place."
    },
    {
      "text": "fun IntArray.reverse(fromIndex: Int, toIndex: Int)",
      "desc": "Reverses elements of the array in the specified range in-place."
    },
    {
      "text": "fun IntArray.reversed(): List<Int>",
      "desc": "Returns a list with elements in reversed order."
    },
    {
      "text": "fun IntArray.reversedArray(): IntArray",
      "desc": "Returns an array with elements of this array in reversed order."
    },
    {
      "text": "fun <R> IntArray.runningFold( initial: R, operation: (acc: R, Int) -> R): List<R>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element and current accumulator value that starts with initial value."
    },
    {
      "text": "fun <R> IntArray.runningFoldIndexed( initial: R, operation: (index: Int, acc: R, Int) -> R): List<R>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element, its index in the original array and current accumulator value that starts with initial value."
    },
    {
      "text": "fun IntArray.runningReduce( operation: (acc: Int, Int) -> Int): List<Int>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element and current accumulator value that starts with the first element of this array."
    },
    {
      "text": "fun IntArray.runningReduceIndexed( operation: (index: Int, acc: Int, Int) -> Int): List<Int>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element, its index in the original array and current accumulator value that starts with the first element of this array."
    },
    {
      "text": "fun <R> IntArray.scan( initial: R, operation: (acc: R, Int) -> R): List<R>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element and current accumulator value that starts with initial value."
    },
    {
      "text": "fun <R> IntArray.scanIndexed( initial: R, operation: (index: Int, acc: R, Int) -> R): List<R>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element, its index in the original array and current accumulator value that starts with initial value."
    },
    {
      "text": "fun IntArray.shuffle()",
      "desc": "Randomly shuffles elements in this array in-place."
    },
    {
      "text": "fun IntArray.shuffle(random: Random)",
      "desc": "Randomly shuffles elements in this array in-place using the specified random instance as the source of randomness."
    },
    {
      "text": "fun IntArray.single(): Int",
      "desc": "Returns the single element, or throws an exception if the array is empty or has more than one element."
    },
    {
      "text": "fun IntArray.single(predicate: (Int) -> Boolean): Int",
      "desc": "Returns the single element matching the given predicate, or throws exception if there is no or more than one matching element."
    },
    {
      "text": "fun IntArray.singleOrNull(): Int?",
      "desc": "Returns single element, or null if the array is empty or has more than one element."
    },
    {
      "text": "fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int?",
      "desc": "Returns the single element matching the given predicate, or null if element was not found or more than one element was found."
    },
    {
      "text": "fun IntArray.slice(indices: IntRange): List<Int>",
      "desc": "Returns a list containing elements at indices in the specified indices range."
    },
    {
      "text": "fun IntArray.slice(indices: Iterable<Int>): List<Int>",
      "desc": "Returns a list containing elements at specified indices."
    },
    {
      "text": "fun IntArray.sliceArray(indices: Collection<Int>): IntArray",
      "desc": "Returns an array containing elements of this array at specified indices."
    },
    {
      "text": "fun IntArray.sliceArray(indices: IntRange): IntArray",
      "desc": "Returns an array containing elements at indices in the specified indices range."
    },
    {
      "text": "fun IntArray.sort(comparison: (a: Int, b: Int) -> Int)",
      "desc": "Sorts the array in-place according to the order specified by the given comparison function."
    },
    {
      "text": "fun IntArray.sortDescending()",
      "desc": "Sorts elements in the array in-place descending according to their natural sort order."
    },
    {
      "text": "fun IntArray.sortDescending(fromIndex: Int, toIndex: Int)",
      "desc": "Sorts elements of the array in the specified range in-place. The elements are sorted descending according to their natural sort order."
    },
    {
      "text": "fun IntArray.sorted(): List<Int>",
      "desc": "Returns a list of all elements sorted according to their natural sort order."
    },
    {
      "text": "fun IntArray.sortedArray(): IntArray",
      "desc": "Returns an array with all elements of this array sorted according to their natural sort order."
    },
    {
      "text": "fun IntArray.sortedArrayDescending(): IntArray",
      "desc": "Returns an array with all elements of this array sorted descending according to their natural sort order."
    },
    {
      "text": "fun <R : Comparable<R>> IntArray.sortedBy( selector: (Int) -> R?): List<Int>",
      "desc": "Returns a list of all elements sorted according to natural sort order of the value returned by specified selector function."
    },
    {
      "text": "fun <R : Comparable<R>> IntArray.sortedByDescending( selector: (Int) -> R?): List<Int>",
      "desc": "Returns a list of all elements sorted descending according to natural sort order of the value returned by specified selector function."
    },
    {
      "text": "fun IntArray.sortedDescending(): List<Int>",
      "desc": "Returns a list of all elements sorted descending according to their natural sort order."
    },
    {
      "text": "fun IntArray.sortedWith( comparator: Comparator<in Int>): List<Int>",
      "desc": "Returns a list of all elements sorted according to the specified comparator."
    },
    {
      "text": "infix fun IntArray.subtract(other: Iterable<Int>): Set<Int>",
      "desc": "Returns a set containing all elements that are contained by this array and not contained by the specified collection."
    },
    {
      "text": "fun IntArray.sum(): Int",
      "desc": "Returns the sum of all elements in the array."
    },
    {
      "text": "fun IntArray.sumBy(selector: (Int) -> Int): Int",
      "desc": "Returns the sum of all values produced by selector function applied to each element in the array."
    },
    {
      "text": "fun IntArray.sumByDouble(selector: (Int) -> Double): Double",
      "desc": "Returns the sum of all values produced by selector function applied to each element in the array."
    },
    {
      "text": "fun IntArray.sumOf(selector: (Int) -> Double): Double",
      "desc": "Returns the sum of all values produced by selector function applied to each element in the array."
    },
    {
      "text": "fun IntArray.take(n: Int): List<Int>",
      "desc": "Returns a list containing first n elements."
    },
    {
      "text": "fun IntArray.takeLast(n: Int): List<Int>",
      "desc": "Returns a list containing last n elements."
    },
    {
      "text": "fun IntArray.takeLastWhile( predicate: (Int) -> Boolean): List<Int>",
      "desc": "Returns a list containing last elements satisfying the given predicate."
    },
    {
      "text": "fun IntArray.takeWhile( predicate: (Int) -> Boolean): List<Int>",
      "desc": "Returns a list containing first elements satisfying the given predicate."
    },
    {
      "text": "fun <C : MutableCollection<in Int>> IntArray.toCollection( destination: C): C",
      "desc": "Appends all elements to the given destination collection."
    },
    {
      "text": "fun IntArray.toCValues(): CValues<IntVar>"
    },
    {
      "text": "fun IntArray.toHashSet(): HashSet<Int>",
      "desc": "Returns a new HashSet of all elements."
    },
    {
      "text": "fun IntArray.toList(): List<Int>",
      "desc": "Returns a List containing all elements."
    },
    {
      "text": "fun IntArray.toMutableList(): MutableList<Int>",
      "desc": "Returns a new MutableList filled with all elements of this array."
    },
    {
      "text": "fun IntArray.toMutableSet(): MutableSet<Int>",
      "desc": "Returns a new MutableSet containing all distinct elements from the given array."
    },
    {
      "text": "fun IntArray.toSet(): Set<Int>",
      "desc": "Returns a Set of all elements."
    },
    {
      "text": "fun IntArray.toSortedSet(): SortedSet<Int>",
      "desc": "Returns a new SortedSet of all elements."
    },
    {
      "text": "fun IntArray.toUIntArray(): UIntArray",
      "desc": "Returns an array of type UIntArray, which is a copy of this array where each element is an unsigned reinterpretation of the corresponding element of this array."
    },
    {
      "text": "infix fun IntArray.union(other: Iterable<Int>): Set<Int>",
      "desc": "Returns a set containing all distinct elements from both collections."
    },
    {
      "text": "fun IntArray.withIndex(): Iterable<IndexedValue<Int>>",
      "desc": "Returns a lazy Iterable that wraps each element of the original array into an IndexedValue containing the index of that element and the element itself."
    },
    {
      "text": "infix fun <R> any_array<R>.zip( other: Array<out R>): List<Pair<Int, R>>",
      "desc": "Returns a list of pairs built from the elements of this array and the other array with the same index. The returned list has length of the shortest collection."
    },
    {
      "text": "fun <R, V> IntArray.zip( other: Array<out R>, transform: (a: Int, b: R) -> V): List<V>",
      "desc": "Returns a list of values built from the elements of this array and the other array with the same index using the provided transform function applied to each pair of elements. The returned list has length of the shortest collection."
    },
    {
      "text": "infix fun <R> IntArray.zip( other: Iterable<R>): List<Pair<Int, R>>",
      "desc": "Returns a list of pairs built from the elements of this collection and other array with the same index. The returned list has length of the shortest collection."
    },
    {
      "text": "fun <R, V> IntArray.zip( other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V>",
      "desc": "Returns a list of values built from the elements of this array and the other collection with the same index using the provided transform function applied to each pair of elements. The returned list has length of the shortest collection."
    },
    {
      "text": "fun <V> IntArray.zip( other: IntArray, transform: (a: Int, b: Int) -> V): List<V>",
      "desc": "Returns a list of values built from the elements of this array and the other array with the same index using the provided transform function applied to each pair of elements. The returned list has length of the shortest array."
    }
  ]
}