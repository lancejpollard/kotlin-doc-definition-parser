{
  "type": "unknown",
  "name": "KType",
  "signature": "interface KType",
  "items": [
    {
      "text": "abstract val arguments: List<KTypeProjection>",
      "desc": "Type arguments passed for the parameters of the classifier in this type. For example, in the type Array<out Number> the only type argument is out Number."
    },
    {
      "text": "abstract val classifier: KClassifier?",
      "desc": "The declaration of the classifier used in this type. For example, in the type List<String> the classifier would be the KClass instance for List."
    },
    {
      "text": "abstract val isMarkedNullable: Boolean",
      "desc": "true if this type was marked nullable in the source code."
    },
    {
      "text": "abstract val annotations: List<Annotation>",
      "desc": "Annotations which are present on this element."
    },
    {
      "text": "val KType.javaType: Type",
      "desc": "Returns a Java Type instance corresponding to the given Kotlin type. Note that one Kotlin type may correspond to different JVM types depending on where it appears. For example, Unit corresponds to the JVM class Unit when it's the type of a parameter, or to void when it's the return type of a function."
    },
    {
      "text": "val KType.javaType: Type",
      "desc": "Returns a Java Type instance corresponding to the given Kotlin type."
    },
    {
      "text": "val KType.jvmErasure: KClass<*>",
      "desc": "Returns the KClass instance representing the runtime class to which this type is erased to on JVM."
    },
    {
      "text": "fun <T : Annotation> KAnnotatedElement.findAnnotation(): T?",
      "desc": "Returns an annotation of the given type on this element."
    },
    {
      "text": "fun <T : Annotation> KAnnotatedElement.findAnnotations(): List<T>",
      "desc": "Returns all annotations of the given type on this element, including individually applied annotations as well as repeated annotations."
    },
    {
      "text": "fun <T : Annotation> KAnnotatedElement.hasAnnotation(): Boolean",
      "desc": "Returns true if this element is annotated with an annotation of type T."
    },
    {
      "text": "fun KType.isSubtypeOf(other: KType): Boolean",
      "desc": "Returns true if this type is the same or is a subtype of other, false otherwise."
    },
    {
      "text": "fun KType.isSupertypeOf(other: KType): Boolean",
      "desc": "Returns true if this type is the same or is a supertype of other, false otherwise."
    },
    {
      "text": "fun KType.withNullability(nullable: Boolean): KType",
      "desc": "Returns a new type with the same classifier, arguments and annotations as the given type, and with the given nullability."
    }
  ]
}