{
  "type": "unknown",
  "name": "KCallable",
  "signature": "interface KCallable<out R>",
  "items": [
    {
      "text": "abstract val isAbstract: Boolean",
      "desc": "true if this callable is abstract."
    },
    {
      "text": "abstract val isFinal: Boolean",
      "desc": "true if this callable is final."
    },
    {
      "text": "abstract val isOpen: Boolean",
      "desc": "true if this callable is open."
    },
    {
      "text": "abstract val isSuspend: Boolean",
      "desc": "true if this is a suspending function."
    },
    {
      "text": "abstract val name: String",
      "desc": "The name of this callable as it was declared in the source code. If the callable has no name, a special invented name is created. Nameless callables include:"
    },
    {
      "text": "abstract val parameters: List<KParameter>",
      "desc": "Parameters required to make a call to this callable. If this callable requires a this instance or an extension receiver parameter, they come first in the list in that order."
    },
    {
      "text": "abstract val returnType: KType",
      "desc": "The type of values returned by this callable."
    },
    {
      "text": "abstract val typeParameters: List<KTypeParameter>",
      "desc": "The list of type parameters of this callable."
    },
    {
      "text": "abstract val visibility: KVisibility?",
      "desc": "Visibility of this callable, or null if its visibility cannot be represented in Kotlin."
    },
    {
      "text": "abstract val annotations: List<Annotation>",
      "desc": "Annotations which are present on this element."
    },
    {
      "text": "abstract fun call(vararg args: Any?): R",
      "desc": "Calls this callable with the specified list of arguments and returns the result. Throws an exception if the number of specified arguments is not equal to the size of parameters, or if their types do not match the types of the parameters."
    },
    {
      "text": "abstract fun callBy(args: Map<KParameter, Any?>): R",
      "desc": "Calls this callable with the specified mapping of parameters to arguments and returns the result. If a parameter is not found in the mapping and is not optional (as per KParameter.isOptional), or its type does not match the type of the provided value, an exception is thrown."
    },
    {
      "text": "val KCallable<*>.extensionReceiverParameter: KParameter?",
      "desc": "Returns a parameter representing the extension receiver instance needed to call this callable, or null if this callable is not an extension."
    },
    {
      "text": "val KCallable<*>.instanceParameter: KParameter?",
      "desc": "Returns a parameter representing the this instance needed to call this callable, or null if this callable is not a member of a class and thus doesn't take such parameter."
    },
    {
      "text": "var KCallable<*>.isAccessible: Boolean",
      "desc": "Provides a way to suppress JVM access checks for a callable."
    },
    {
      "text": "val KCallable<*>.valueParameters: List<KParameter>",
      "desc": "Returns parameters of this callable, excluding the this instance and the extension receiver parameter."
    },
    {
      "text": "suspend fun <R> KCallable<R>.callSuspend( vararg args: Any?): R",
      "desc": "Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as KCallable.call. Otherwise, calls the suspend function with current continuation."
    },
    {
      "text": "suspend fun <R> KCallable<R>.callSuspendBy( args: Map<KParameter, Any?>): R",
      "desc": "Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as KCallable.callBy. Otherwise, calls the suspend function with current continuation."
    },
    {
      "text": "fun <T : Annotation> KAnnotatedElement.findAnnotation(): T?",
      "desc": "Returns an annotation of the given type on this element."
    },
    {
      "text": "fun <T : Annotation> KAnnotatedElement.findAnnotations(): List<T>",
      "desc": "Returns all annotations of the given type on this element, including individually applied annotations as well as repeated annotations."
    },
    {
      "text": "fun KCallable<*>.findParameterByName( name: String): KParameter?",
      "desc": "Returns the parameter of this callable with the given name, or null if there's no such parameter."
    },
    {
      "text": "fun <T : Annotation> KAnnotatedElement.hasAnnotation(): Boolean",
      "desc": "Returns true if this element is annotated with an annotation of type T."
    },
    {
      "text": "interface KFunction<out R> : KCallable<R>, Function<R>",
      "desc": "Represents a function with introspection capabilities."
    },
    {
      "text": "interface KProperty<out V> : KCallable<V>",
      "desc": "Represents a property, such as a named val or var declaration. Instances of this class are obtainable by the :: operator."
    }
  ]
}