{
  "type": "unknown",
  "name": "Byte",
  "signature": "class Byte : Number, Comparable<Byte>",
  "items": [
    {
      "text": "operator fun compareTo(other: Byte): Int",
      "desc": "Compares this value with the specified value for order. Returns zero if this value is equal to the specified other value, a negative number if it's less than other, or a positive number if it's greater than other."
    },
    {
      "text": "operator fun dec(): Byte",
      "desc": "Returns this value decremented by one."
    },
    {
      "text": "operator fun div(other: Byte): Int",
      "desc": "Divides this value by the other value, truncating the result to an integer that is closer to zero."
    },
    {
      "text": "operator fun div(other: Float): Float",
      "desc": "Divides this value by the other value."
    },
    {
      "text": "fun equals(other: Byte): Boolean"
    },
    {
      "text": "fun equals(other: Any?): Boolean",
      "desc": "Indicates whether some other object is \"equal to\" this one. Implementations must fulfil the following requirements:"
    },
    {
      "text": "fun hashCode(): Int",
      "desc": "Returns a hash code value for the object. The general contract of hashCode is:"
    },
    {
      "text": "operator fun inc(): Byte",
      "desc": "Returns this value incremented by one."
    },
    {
      "text": "operator fun minus(other: Byte): Int",
      "desc": "Subtracts the other value from this value."
    },
    {
      "text": "operator fun plus(other: Byte): Int",
      "desc": "Adds the other value to this value."
    },
    {
      "text": "operator fun rangeTo(other: Byte): IntRange",
      "desc": "Creates a range from this value to the specified other value."
    },
    {
      "text": "operator fun rem(other: Byte): Int",
      "desc": "Calculates the remainder of truncating division of this value by the other value."
    },
    {
      "text": "operator fun times(other: Byte): Int",
      "desc": "Multiplies this value by the other value."
    },
    {
      "text": "fun toByte(): Byte",
      "desc": "Returns this value."
    },
    {
      "text": "fun toChar(): Char",
      "desc": "Converts this Byte value to Char."
    },
    {
      "text": "fun toDouble(): Double",
      "desc": "Converts this Byte value to Double."
    },
    {
      "text": "fun toFloat(): Float",
      "desc": "Converts this Byte value to Float."
    },
    {
      "text": "fun toInt(): Int",
      "desc": "Converts this Byte value to Int."
    },
    {
      "text": "fun toLong(): Long",
      "desc": "Converts this Byte value to Long."
    },
    {
      "text": "fun toShort(): Short",
      "desc": "Converts this Byte value to Short."
    },
    {
      "text": "fun toString(): String",
      "desc": "Returns a string representation of the object."
    },
    {
      "text": "operator fun unaryMinus(): Int",
      "desc": "Returns the negative of this value."
    },
    {
      "text": "operator fun unaryPlus(): Int",
      "desc": "Returns this value."
    },
    {
      "text": "const val MAX_VALUE: Byte",
      "desc": "A constant holding the maximum value an instance of Byte can have."
    },
    {
      "text": "const val MIN_VALUE: Byte",
      "desc": "A constant holding the minimum value an instance of Byte can have."
    },
    {
      "text": "const val SIZE_BITS: Int",
      "desc": "The number of bits used to represent an instance of Byte in a binary form."
    },
    {
      "text": "const val SIZE_BYTES: Int",
      "desc": "The number of bytes used to represent an instance of Byte in a binary form."
    },
    {
      "text": "infix fun Byte.and(other: Byte): Byte",
      "desc": "Performs a bitwise AND operation between the two values."
    },
    {
      "text": "fun Byte.coerceAtLeast(minimumValue: Byte): Byte",
      "desc": "Ensures that this value is not less than the specified minimumValue."
    },
    {
      "text": "fun Byte.coerceAtMost(maximumValue: Byte): Byte",
      "desc": "Ensures that this value is not greater than the specified maximumValue."
    },
    {
      "text": "fun Byte.coerceIn( minimumValue: Byte, maximumValue: Byte): Byte",
      "desc": "Ensures that this value lies in the specified range minimumValue..maximumValue."
    },
    {
      "text": "fun <T : Comparable<T>> T.coerceIn( range: ClosedFloatingPointRange<T>): T",
      "desc": "Ensures that this value lies in the specified range."
    },
    {
      "text": "infix fun <T> Comparable<T>.compareTo(other: T): Int",
      "desc": "Compares this object with the specified object for order. Returns zero if this object is equal to the specified other object, a negative number if it's less than other, or a positive number if it's greater than other."
    },
    {
      "text": "fun <R : Any> Byte.convert(): R"
    },
    {
      "text": "fun Byte.countLeadingZeroBits(): Int",
      "desc": "Counts the number of consecutive most significant bits that are zero in the binary representation of this Byte number."
    },
    {
      "text": "fun Byte.countOneBits(): Int",
      "desc": "Counts the number of set bits in the binary representation of this Byte number."
    },
    {
      "text": "fun Byte.countTrailingZeroBits(): Int",
      "desc": "Counts the number of consecutive least significant bits that are zero in the binary representation of this Byte number."
    },
    {
      "text": "infix fun Byte.downTo(to: Byte): IntProgression",
      "desc": "Returns a progression from this value down to the specified to value with the step -1."
    },
    {
      "text": "fun Byte.floorDiv(other: Byte): Int",
      "desc": "Divides this value by the other value, flooring the result to an integer that is closer to negative infinity."
    },
    {
      "text": "fun Byte.inv(): Byte",
      "desc": "Inverts the bits in this value."
    },
    {
      "text": "fun Byte.mod(other: Byte): Byte",
      "desc": "Calculates the remainder of flooring division of this value by the other value."
    },
    {
      "text": "fun <R : Number> Number.narrow(): R"
    },
    {
      "text": "infix fun Byte.or(other: Byte): Byte",
      "desc": "Performs a bitwise OR operation between the two values."
    },
    {
      "text": "operator fun <T : Comparable<T>> T.rangeTo( that: T): ClosedRange<T>",
      "desc": "Creates a range from this Comparable value to the specified that value."
    },
    {
      "text": "fun Byte.rotateLeft(bitCount: Int): Byte",
      "desc": "Rotates the binary representation of this Byte number left by the specified bitCount number of bits. The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side."
    },
    {
      "text": "fun Byte.rotateRight(bitCount: Int): Byte",
      "desc": "Rotates the binary representation of this Byte number right by the specified bitCount number of bits. The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side."
    },
    {
      "text": "fun <R : Number> Number.signExtend(): R"
    },
    {
      "text": "fun Byte.takeHighestOneBit(): Byte",
      "desc": "Returns a number having a single bit set in the position of the most significant set bit of this Byte number, or zero, if this number is zero."
    },
    {
      "text": "fun Byte.takeLowestOneBit(): Byte",
      "desc": "Returns a number having a single bit set in the position of the least significant set bit of this Byte number, or zero, if this number is zero."
    },
    {
      "text": "fun Byte.toBoolean(): Boolean"
    },
    {
      "text": "fun Byte.toUByte(): UByte",
      "desc": "Converts this Byte value to UByte."
    },
    {
      "text": "fun Byte.toUInt(): UInt",
      "desc": "Converts this Byte value to UInt."
    },
    {
      "text": "fun Byte.toULong(): ULong",
      "desc": "Converts this Byte value to ULong."
    },
    {
      "text": "fun Byte.toUShort(): UShort",
      "desc": "Converts this Byte value to UShort."
    },
    {
      "text": "infix fun Byte.until(to: Byte): IntRange",
      "desc": "Returns a range from this value up to but excluding the specified to value."
    },
    {
      "text": "infix fun Byte.xor(other: Byte): Byte",
      "desc": "Performs a bitwise XOR operation between the two values."
    }
  ]
}