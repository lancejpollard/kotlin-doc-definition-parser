{
  "type": "package",
  "name": "kotlinx.cinterop",
  "items": [
    {
      "text": "class Arena : ArenaBase"
    },
    {
      "text": "open class ArenaBase : AutofreeScope"
    },
    {
      "text": "abstract class AutofreeScope : DeferScope, NativePlacement"
    },
    {
      "text": "typealias BooleanVar = BooleanVarOf<Boolean>"
    },
    {
      "text": "class BooleanVarOf<T : Boolean> : CPrimitiveVar"
    },
    {
      "text": "typealias ByteVar = ByteVarOf<Byte>"
    },
    {
      "text": "class ByteVarOf<T : Byte> : CPrimitiveVar"
    },
    {
      "text": "typealias CArrayPointer<T> = CPointer<T>"
    },
    {
      "text": "typealias CArrayPointerVar<T> = CPointerVar<T>"
    },
    {
      "text": "interface CEnum"
    },
    {
      "text": "abstract class CEnumVar : CPrimitiveVar"
    },
    {
      "text": "class CFunction<T : Function<*>> : CPointed",
      "desc": "The C function."
    },
    {
      "text": "abstract class COpaque : CPointed",
      "desc": "The CPointed without any specified interpretation."
    },
    {
      "text": "typealias COpaquePointer = CPointer<out CPointed>",
      "desc": "The pointer with an opaque type."
    },
    {
      "text": "typealias COpaquePointerVar = CPointerVarOf<COpaquePointer>",
      "desc": "The variable containing a COpaquePointer."
    },
    {
      "text": "interface CPlusPlusClass"
    },
    {
      "text": "abstract class CPointed : NativePointed",
      "desc": "C data or code."
    },
    {
      "text": "class CPointer<T : CPointed> : CValuesRef<T>",
      "desc": "C pointer."
    },
    {
      "text": "typealias CPointerVar<T> = CPointerVarOf<CPointer<T>>",
      "desc": "The C data variable containing the pointer to T."
    },
    {
      "text": "class CPointerVarOf<T : CPointer<*>> : CVariable"
    },
    {
      "text": "sealed class CPrimitiveVar : CVariable",
      "desc": "The C primitive-typed variable located in memory."
    },
    {
      "text": "abstract class CStructVar : CVariable",
      "desc": "The C struct-typed variable located in memory."
    },
    {
      "text": "abstract class CValue<T : CVariable> : CValues<T>",
      "desc": "The single immutable C value. It is self-contained and doesn't depend on native memory."
    },
    {
      "text": "abstract class CValues<T : CVariable> : CValuesRef<T>",
      "desc": "The (possibly empty) sequence of immutable C values. It is self-contained and doesn't depend on native memory."
    },
    {
      "text": "abstract class CValuesRef<T : CPointed>",
      "desc": "Represents a reference to (possibly empty) sequence of C values. It can be either a stable pointer CPointer or a sequence of immutable values CValues."
    },
    {
      "text": "abstract class CVariable : CPointed",
      "desc": "The C data variable located in memory."
    },
    {
      "text": "open class DeferScope"
    },
    {
      "text": "typealias DoubleVar = DoubleVarOf<Double>"
    },
    {
      "text": "class DoubleVarOf<T : Double> : CPrimitiveVar"
    },
    {
      "text": "typealias FloatVar = FloatVarOf<Float>"
    },
    {
      "text": "class FloatVarOf<T : Float> : CPrimitiveVar"
    },
    {
      "text": "class ForeignException : Exception"
    },
    {
      "text": "typealias IntVar = IntVarOf<Int>"
    },
    {
      "text": "class IntVarOf<T : Int> : CPrimitiveVar"
    },
    {
      "text": "typealias LongVar = LongVarOf<Long>"
    },
    {
      "text": "class LongVarOf<T : Long> : CPrimitiveVar"
    },
    {
      "text": "abstract class ManagedType<T : CStructVar>"
    },
    {
      "text": "class MemScope : ArenaBase"
    },
    {
      "text": "interface NativeFreeablePlacement : NativePlacement"
    },
    {
      "text": "object nativeHeap : NativeFreeablePlacement"
    },
    {
      "text": "interface NativePlacement"
    },
    {
      "text": "open class NativePointed",
      "desc": "The entity which has an associated native pointer. Subtypes are supposed to represent interpretations of the pointed data or code."
    },
    {
      "text": "typealias NativePtr = NativePtr"
    },
    {
      "text": "typealias ObjCBlockVar<T> = ObjCNotImplementedVar<T>"
    },
    {
      "text": "interface ObjCClass : ObjCObject"
    },
    {
      "text": "interface ObjCClassOf<T : ObjCObject> : ObjCClass"
    },
    {
      "text": "class ObjCNotImplementedVar<T> : CVariable"
    },
    {
      "text": "interface ObjCObject"
    },
    {
      "text": "abstract class ObjCObjectBase : ObjCObject"
    },
    {
      "text": "abstract class ObjCObjectBaseMeta : ObjCObjectBase, ObjCObjectMeta"
    },
    {
      "text": "typealias ObjCObjectMeta = ObjCClass"
    },
    {
      "text": "class ObjCObjectVar<T> : CVariable"
    },
    {
      "text": "interface ObjCProtocol : ObjCObject"
    },
    {
      "text": "typealias ObjCStringVarOf<T> = ObjCNotImplementedVar<T>"
    },
    {
      "text": "data class Pinned<out T : Any>"
    },
    {
      "text": "typealias ShortVar = ShortVarOf<Short>"
    },
    {
      "text": "class ShortVarOf<T : Short> : CPrimitiveVar"
    },
    {
      "text": "interface SkiaRefCnt"
    },
    {
      "text": "typealias StableObjPtr = StableRef<*>"
    },
    {
      "text": "class StableRef<out T : Any>"
    },
    {
      "text": "typealias UByteVar = UByteVarOf<UByte>"
    },
    {
      "text": "class UByteVarOf<T : UByte> : CPrimitiveVar"
    },
    {
      "text": "typealias UIntVar = UIntVarOf<UInt>"
    },
    {
      "text": "class UIntVarOf<T : UInt> : CPrimitiveVar"
    },
    {
      "text": "typealias ULongVar = ULongVarOf<ULong>"
    },
    {
      "text": "class ULongVarOf<T : ULong> : CPrimitiveVar"
    },
    {
      "text": "typealias UShortVar = UShortVarOf<UShort>"
    },
    {
      "text": "class UShortVarOf<T : UShort> : CPrimitiveVar"
    },
    {
      "text": "typealias Vector128Var = Vector128VarOf<Vector128>"
    },
    {
      "text": "class Vector128VarOf<T : Vector128> : CVariable"
    },
    {
      "text": "annotation class ExportObjCClass",
      "desc": "Makes Kotlin subclass of Objective-C class visible for runtime lookup after Kotlin main function gets invoked."
    },
    {
      "text": "annotation class ExternalObjCClass"
    },
    {
      "text": "annotation class InteropStubs"
    },
    {
      "text": "annotation class ObjCAction",
      "desc": "Makes Kotlin method in Objective-C class accessible through Objective-C dispatch to be used as action sent by control in UIKit or AppKit."
    },
    {
      "text": "annotation class ObjCConstructor"
    },
    {
      "text": "annotation class ObjCFactory"
    },
    {
      "text": "annotation class ObjCMethod"
    },
    {
      "text": "annotation class ObjCOutlet",
      "desc": "Makes Kotlin property in Objective-C class settable through Objective-C dispatch to be used as IB outlet."
    },
    {
      "text": "annotation class UnsafeNumber",
      "desc": "Marker for typealias that will represent numbers of different bit width on at least two platforms."
    },
    {
      "text": "val String.cstr: CValues<ByteVar>"
    },
    {
      "text": "val nativeNullPtr: NativePtr"
    },
    {
      "text": "val <T : CPointed> CPointer<T>.pointed: T",
      "desc": "Returns the corresponding CPointed."
    },
    {
      "text": "var <T : CPointed, P : CPointer<T>> CPointerVarOf<P>.pointed: T?",
      "desc": "The code or data pointed by the value of this variable."
    },
    {
      "text": "val <T : CPointed> T.ptr: CPointer<T>",
      "desc": "Returns the pointer to this data or code."
    },
    {
      "text": "val <T : CStructVar> ManagedType<T>.ptr: CPointer<T>"
    },
    {
      "text": "val NativePointed?.rawPtr: NativePtr"
    },
    {
      "text": "val CPointer<*>?.rawValue: NativePtr"
    },
    {
      "text": "val String.utf16: CValues<UShortVar>"
    },
    {
      "text": "val String.utf32: CValues<IntVar>"
    },
    {
      "text": "val String.utf8: CValues<ByteVar>"
    },
    {
      "text": "var <T : Boolean> BooleanVarOf<T>.value: T"
    },
    {
      "text": "var <P : CPointer<*>> CPointerVarOf<P>.value: P?",
      "desc": "The value of this variable."
    },
    {
      "text": "val String.wcstr: CValues<UShortVar>"
    },
    {
      "text": "fun Pinned<ByteArray>.addressOf( index: Int): CPointer<ByteVar>"
    },
    {
      "text": "fun <T : CVariable> alignOf(): Int"
    },
    {
      "text": "fun <T : CVariable> NativePlacement.alloc(): T",
      "desc": "Allocates variable of given type."
    },
    {
      "text": "fun <T : CVariable> NativePlacement.alloc( initialize: T.() -> Unit): T",
      "desc": "Allocates variable of given type and initializes it applying given block."
    },
    {
      "text": "fun <T : CVariable> NativePlacement.allocArray( length: Long): CArrayPointer<T>",
      "desc": "Allocates C array of given elements type and length."
    },
    {
      "text": "fun <T : CVariable> NativePlacement.allocArray( length: Long, initializer: T.(index: Long) -> Unit): CArrayPointer<T>",
      "desc": "Allocates C array of given elements type and length, and initializes its elements applying given block."
    },
    {
      "text": "fun <T : CPointer<*>> NativePlacement.allocArrayOf( vararg elements: T?): CArrayPointer<CPointerVarOf<T>>",
      "desc": "Allocates C array of given values."
    },
    {
      "text": "fun NativePlacement.allocArrayOf( elements: ByteArray): CArrayPointer<ByteVar>"
    },
    {
      "text": "fun <T : CPointed> NativePlacement.allocArrayOfPointersTo( elements: List<T?>): CArrayPointer<CPointerVar<T>>",
      "desc": "Allocates C array of pointers to given elements."
    },
    {
      "text": "fun <T : CPointed> NativePlacement.allocPointerTo(): CPointerVar<T>"
    },
    {
      "text": "fun <T : CVariable> CStructVar.arrayMemberAt( offset: Long): CArrayPointer<T>"
    },
    {
      "text": "fun <T : Any> CPointer<*>.asStableRef(): StableRef<T>",
      "desc": "Converts to StableRef this opaque pointer produced by StableRef.asCPointer."
    },
    {
      "text": "fun <R> autoreleasepool(block: () -> R): R"
    },
    {
      "text": "fun bitsToDouble(bits: Long): Double"
    },
    {
      "text": "fun bitsToFloat(bits: Int): Float"
    },
    {
      "text": "fun <R : Any> Byte.convert(): R"
    },
    {
      "text": "fun <T : CStructVar> CValue<T>.copy( modify: T.() -> Unit): CValue<T>"
    },
    {
      "text": "fun createKotlinObjectHolder(any: Any?): NativePtr"
    },
    {
      "text": "fun CreateKStringFromNSString(ptr: NativePtr): String?"
    },
    {
      "text": "fun CreateNSStringFromKString(str: String?): NativePtr"
    },
    {
      "text": "fun <T : CVariable> createValues( count: Int, initializer: T.(index: Int) -> Unit): CValues<T>"
    },
    {
      "text": "fun <T : CVariable> cValue(): CValue<T>"
    },
    {
      "text": "fun cValuesOf(vararg elements: Byte): CValues<ByteVar>",
      "desc": "Returns sequence of immutable values CValues to pass them to C code."
    },
    {
      "text": "fun cValuesOf(vararg elements: Short): CValues<ShortVar>"
    },
    {
      "text": "fun NativeFreeablePlacement.free(pointer: CPointer<*>)"
    },
    {
      "text": "operator fun <T : Byte> CPointer<ByteVarOf<T>>.get( index: Int): T"
    },
    {
      "text": "fun <T : CVariable> CValues<T>.getBytes(): ByteArray"
    },
    {
      "text": "fun getOriginalKotlinClass(objCClass: ObjCClass): KClass<*>?",
      "desc": "If objCClass is a class generated to Objective-C header for Kotlin class, returns KClass for that original Kotlin class."
    },
    {
      "text": "fun getOriginalKotlinClass( objCProtocol: ObjCProtocol): KClass<*>?",
      "desc": "If objCProtocol is a protocol generated to Objective-C header for Kotlin class, returns KClass for that original Kotlin class."
    },
    {
      "text": "fun NativePointed.getRawPointer(): NativePtr"
    },
    {
      "text": "fun CPointer<*>.getRawValue(): NativePtr"
    },
    {
      "text": "fun <T : ObjCObjectBase> T.initBy(constructorCall: T): T"
    },
    {
      "text": "fun <T : CPointed> interpretCPointer( rawValue: NativePtr): CPointer<T>?",
      "desc": "Performs type cast of the CPointer from the given raw pointer."
    },
    {
      "text": "fun interpretNullableOpaquePointed( ptr: NativePtr): NativePointed?"
    },
    {
      "text": "fun <T : NativePointed> interpretNullablePointed( ptr: NativePtr): T?",
      "desc": "Performs type cast of the native pointer to given interop type, including null values."
    },
    {
      "text": "fun <T : Any> interpretObjCPointer(objcPtr: NativePtr): T"
    },
    {
      "text": "fun <T> interpretObjCPointerOrNull(objcPtr: NativePtr): T?"
    },
    {
      "text": "fun interpretOpaquePointed(ptr: NativePtr): NativePointed"
    },
    {
      "text": "fun <T : NativePointed> interpretPointed(ptr: NativePtr): T",
      "desc": "Returns interpretation of entity with given pointer."
    },
    {
      "text": "operator fun <R> CPointer<CFunction<() -> R>>.invoke(): R"
    },
    {
      "text": "fun <T : CPointed> CStructVar.memberAt(offset: Long): T",
      "desc": "Returns the member of this CStructVar which is located by given offset in bytes."
    },
    {
      "text": "fun <R> memScoped(block: MemScope.() -> R): R",
      "desc": "Runs given block providing allocation of memory which will be automatically disposed at the end of this scope."
    },
    {
      "text": "fun <R : Number> Number.narrow(): R"
    },
    {
      "text": "fun objc_autoreleasePoolPop(ptr: NativePtr)"
    },
    {
      "text": "fun objc_autoreleasePoolPush(): NativePtr"
    },
    {
      "text": "fun objc_lookUpClass(name: NativePtr): NativePtr"
    },
    {
      "text": "fun objc_release(ptr: NativePtr)"
    },
    {
      "text": "fun objc_retain(ptr: NativePtr): NativePtr"
    },
    {
      "text": "fun objc_retainAutoreleaseReturnValue( ptr: NativePtr): NativePtr"
    },
    {
      "text": "fun Any?.objcPtr(): NativePtr"
    },
    {
      "text": "fun optional(): Nothing"
    },
    {
      "text": "fun <T : Any> T.pin(): Pinned<T>"
    },
    {
      "text": "fun <T : CVariable> CValues<T>.placeTo( scope: AutofreeScope): CPointer<T>"
    },
    {
      "text": "operator fun <T : ByteVarOf<*>> CPointer<T>?.plus( index: Long): CPointer<T>?"
    },
    {
      "text": "fun readBits( ptr: NativePtr, offset: Long, size: Int, signed: Boolean): Long"
    },
    {
      "text": "fun COpaquePointer.readBytes(count: Int): ByteArray"
    },
    {
      "text": "fun <T : CVariable> CPointed.readValue( size: Long, align: Int): CValue<T>"
    },
    {
      "text": "fun <T : CVariable> CPointed.readValues( size: Int, align: Int): CValues<T>"
    },
    {
      "text": "fun ByteArray.refTo(index: Int): CValuesRef<ByteVar>"
    },
    {
      "text": "fun <T : NativePointed> NativePointed.reinterpret(): T",
      "desc": "Changes the interpretation of the pointed data or code."
    },
    {
      "text": "fun <T : CPointed> CPointer<*>.reinterpret(): CPointer<T>"
    },
    {
      "text": "operator fun <T : Byte> CPointer<ByteVarOf<T>>.set( index: Int, value: T)"
    },
    {
      "text": "fun <R : Number> Number.signExtend(): R"
    },
    {
      "text": "fun <T : CVariable> sizeOf(): Long"
    },
    {
      "text": "fun <R> staticCFunction( function: () -> R): CPointer<CFunction<() -> R>>",
      "desc": "Returns a pointer to C function which calls given Kotlin static function."
    },
    {
      "text": "fun <P1, R> staticCFunction( function: (P1) -> R): CPointer<CFunction<(P1) -> R>>"
    },
    {
      "text": "fun Byte.toBoolean(): Boolean"
    },
    {
      "text": "fun Boolean.toByte(): Byte"
    },
    {
      "text": "fun <T : CPointed> Long.toCPointer(): CPointer<T>?"
    },
    {
      "text": "fun List<String>.toCStringArray( autofreeScope: AutofreeScope): CPointer<CPointerVar<ByteVar>>",
      "desc": "Convert this list of Kotlin strings to C array of C strings, allocating memory for the array and C strings with given AutofreeScope."
    },
    {
      "text": "fun Array<String>.toCStringArray( autofreeScope: AutofreeScope): CPointer<CPointerVar<ByteVar>>",
      "desc": "Convert this array of Kotlin strings to C array of C strings, allocating memory for the array and C strings with given AutofreeScope."
    },
    {
      "text": "fun ByteArray.toCValues(): CValues<ByteVar>"
    },
    {
      "text": "fun CPointer<ByteVar>.toKString(): String"
    },
    {
      "text": "fun ByteArray.toKString(): String",
      "desc": "Decodes a string from the bytes in UTF-8 encoding in this array. Bytes following the first occurrence of 0 byte, if it occurs, are not decoded."
    },
    {
      "text": "fun ByteArray.toKString( startIndex: Int = 0, endIndex: Int = this.size, throwOnInvalidSequence: Boolean = false): String",
      "desc": "Decodes a string from the bytes in UTF-8 encoding in this array or its subrange. Bytes following the first occurrence of 0 byte, if it occurs, are not decoded."
    },
    {
      "text": "fun CPointer<ShortVar>.toKStringFromUtf16(): String"
    },
    {
      "text": "fun CPointer<IntVar>.toKStringFromUtf32(): String"
    },
    {
      "text": "fun CPointer<ByteVar>.toKStringFromUtf8(): String"
    },
    {
      "text": "fun <T : CPointed> CPointer<T>?.toLong(): Long"
    },
    {
      "text": "fun <T : CVariable> typeOf(): Type"
    },
    {
      "text": "fun <T : Any> unwrapKotlinObjectHolder(holder: Any?): T"
    },
    {
      "text": "fun <T : CStructVar, R> CValue<T>.useContents( block: T.() -> R): R",
      "desc": "Calls the block with temporary copy of this value as receiver."
    },
    {
      "text": "fun <T : Any, R> T.usePinned(block: (Pinned<T>) -> R): R"
    },
    {
      "text": "fun <T : CVariable> CValue<T>.write(location: NativePtr)"
    },
    {
      "text": "fun writeBits( ptr: NativePtr, offset: Long, size: Int, value: Long)"
    },
    {
      "text": "fun <T : CVariable> zeroValue( size: Int, align: Int): CValue<T>"
    }
  ]
}