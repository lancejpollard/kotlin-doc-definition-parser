{
  "type": "package",
  "name": "kotlin.comparisons",
  "items": [
    {
      "text": "fun <T> compareBy( vararg selectors: (T) -> Comparable<*>?): Comparator<T>",
      "desc": "Creates a comparator using the sequence of functions to calculate a result of comparison. The functions are called sequentially, receive the given values a and b and return Comparable objects. As soon as the Comparable instances returned by a function for a and b values do not compare as equal, the result of that comparison is returned from the Comparator."
    },
    {
      "text": "fun <T> compareBy( selector: (T) -> Comparable<*>?): Comparator<T>",
      "desc": "Creates a comparator using the function to transform value to a Comparable instance for comparison."
    },
    {
      "text": "fun <T, K> compareBy( comparator: Comparator<in K>, selector: (T) -> K): Comparator<T>",
      "desc": "Creates a comparator using the selector function to transform values being compared and then applying the specified comparator to compare transformed values."
    },
    {
      "text": "fun <T> compareByDescending( selector: (T) -> Comparable<*>?): Comparator<T>",
      "desc": "Creates a descending comparator using the function to transform value to a Comparable instance for comparison."
    },
    {
      "text": "fun <T, K> compareByDescending( comparator: Comparator<in K>, selector: (T) -> K): Comparator<T>",
      "desc": "Creates a descending comparator using the selector function to transform values being compared and then applying the specified comparator to compare transformed values."
    },
    {
      "text": "fun <T : Comparable<*>> compareValues(a: T?, b: T?): Int",
      "desc": "Compares two nullable Comparable values. Null is considered less than any value."
    },
    {
      "text": "fun <T> compareValuesBy( a: T, b: T, vararg selectors: (T) -> Comparable<*>?): Int",
      "desc": "Compares two values using the specified functions selectors to calculate the result of the comparison. The functions are called sequentially, receive the given values a and b and return Comparable objects. As soon as the Comparable instances returned by a function for a and b values do not compare as equal, the result of that comparison is returned."
    },
    {
      "text": "fun <T> compareValuesBy( a: T, b: T, selector: (T) -> Comparable<*>?): Int",
      "desc": "Compares two values using the specified selector function to calculate the result of the comparison. The function is applied to the given values a and b and return Comparable objects. The result of comparison of these Comparable instances is returned."
    },
    {
      "text": "fun <T, K> compareValuesBy( a: T, b: T, comparator: Comparator<in K>, selector: (T) -> K): Int",
      "desc": "Compares two values using the specified selector function to calculate the result of the comparison. The function is applied to the given values a and b and return objects of type K which are then being compared with the given comparator."
    },
    {
      "text": "fun <T> maxOf( a: T, b: T, c: T, comparator: Comparator<in T>): T",
      "desc": "Returns the greater of three values according to the order specified by the given comparator."
    },
    {
      "text": "fun <T> maxOf(a: T, b: T, comparator: Comparator<in T>): T",
      "desc": "Returns the greater of two values according to the order specified by the given comparator."
    },
    {
      "text": "fun <T> maxOf( a: T, vararg other: T, comparator: Comparator<in T>): T",
      "desc": "Returns the greater of the given values according to the order specified by the given comparator."
    },
    {
      "text": "fun maxOf(a: UInt, b: UInt): UInt",
      "desc": "Returns the greater of two values."
    },
    {
      "text": "fun maxOf(a: UInt, b: UInt, c: UInt): UInt",
      "desc": "Returns the greater of three values."
    },
    {
      "text": "fun maxOf(a: UInt, vararg other: UInt): UInt",
      "desc": "Returns the greater of the given values."
    },
    {
      "text": "fun <T> minOf( a: T, b: T, c: T, comparator: Comparator<in T>): T",
      "desc": "Returns the smaller of three values according to the order specified by the given comparator."
    },
    {
      "text": "fun <T> minOf(a: T, b: T, comparator: Comparator<in T>): T",
      "desc": "Returns the smaller of two values according to the order specified by the given comparator."
    },
    {
      "text": "fun <T> minOf( a: T, vararg other: T, comparator: Comparator<in T>): T",
      "desc": "Returns the smaller of the given values according to the order specified by the given comparator."
    },
    {
      "text": "fun minOf(a: UInt, b: UInt): UInt",
      "desc": "Returns the smaller of two values."
    },
    {
      "text": "fun minOf(a: UInt, b: UInt, c: UInt): UInt",
      "desc": "Returns the smaller of three values."
    },
    {
      "text": "fun minOf(a: UInt, vararg other: UInt): UInt",
      "desc": "Returns the smaller of the given values."
    },
    {
      "text": "fun <T : Comparable<T>> naturalOrder(): Comparator<T>",
      "desc": "Returns a comparator that compares Comparable objects in natural order."
    },
    {
      "text": "fun <T : Any> nullsFirst( comparator: Comparator<in T>): Comparator<T?>",
      "desc": "Extends the given comparator of non-nullable values to a comparator of nullable values considering null value less than any other value."
    },
    {
      "text": "fun <T : Comparable<T>> nullsFirst(): Comparator<T?>",
      "desc": "Provides a comparator of nullable Comparable values considering null value less than any other value."
    },
    {
      "text": "fun <T : Any> nullsLast( comparator: Comparator<in T>): Comparator<T?>",
      "desc": "Extends the given comparator of non-nullable values to a comparator of nullable values considering null value greater than any other value."
    },
    {
      "text": "fun <T : Comparable<T>> nullsLast(): Comparator<T?>",
      "desc": "Provides a comparator of nullable Comparable values considering null value greater than any other value."
    },
    {
      "text": "fun <T> Comparator<T>.reversed(): Comparator<T>",
      "desc": "Returns a comparator that imposes the reverse ordering of this comparator."
    },
    {
      "text": "fun <T : Comparable<T>> reverseOrder(): Comparator<T>",
      "desc": "Returns a comparator that compares Comparable objects in reversed natural order."
    },
    {
      "text": "infix fun <T> Comparator<T>.then( comparator: Comparator<in T>): Comparator<T>",
      "desc": "Combines this comparator and the given comparator such that the latter is applied only when the former considered values equal."
    },
    {
      "text": "fun <T> Comparator<T>.thenBy( selector: (T) -> Comparable<*>?): Comparator<T>",
      "desc": "Creates a comparator comparing values after the primary comparator defined them equal. It uses the function to transform value to a Comparable instance for comparison."
    },
    {
      "text": "fun <T, K> Comparator<T>.thenBy( comparator: Comparator<in K>, selector: (T) -> K): Comparator<T>",
      "desc": "Creates a comparator comparing values after the primary comparator defined them equal. It uses the selector function to transform values and then compares them with the given comparator."
    },
    {
      "text": "fun <T> Comparator<T>.thenByDescending( selector: (T) -> Comparable<*>?): Comparator<T>",
      "desc": "Creates a descending comparator using the primary comparator and the function to transform value to a Comparable instance for comparison."
    },
    {
      "text": "fun <T, K> Comparator<T>.thenByDescending( comparator: Comparator<in K>, selector: (T) -> K): Comparator<T>",
      "desc": "Creates a descending comparator comparing values after the primary comparator defined them equal. It uses the selector function to transform values and then compares them with the given comparator."
    },
    {
      "text": "fun <T> Comparator<T>.thenComparator( comparison: (a: T, b: T) -> Int): Comparator<T>",
      "desc": "Creates a comparator using the primary comparator and function to calculate a result of comparison."
    },
    {
      "text": "infix fun <T> Comparator<T>.thenDescending( comparator: Comparator<in T>): Comparator<T>",
      "desc": "Combines this comparator and the given comparator such that the latter is applied only when the former considered values equal."
    }
  ]
}