{
  "type": "unknown",
  "name": "KotlinVersion",
  "signature": "class KotlinVersion : Comparable<KotlinVersion>",
  "items": [
    {
      "text": "KotlinVersion(major: Int, minor: Int)",
      "desc": "Creates a version from major and minor components, leaving patch component zero."
    },
    {
      "text": "KotlinVersion(major: Int, minor: Int, patch: Int)",
      "desc": "Creates a version from all three components."
    },
    {
      "text": "val major: Int"
    },
    {
      "text": "val minor: Int"
    },
    {
      "text": "val patch: Int"
    },
    {
      "text": "fun compareTo(other: KotlinVersion): Int"
    },
    {
      "text": "fun equals(other: Any?): Boolean",
      "desc": "Indicates whether some other object is \"equal to\" this one. Implementations must fulfil the following requirements:"
    },
    {
      "text": "fun hashCode(): Int",
      "desc": "Returns a hash code value for the object. The general contract of hashCode is:"
    },
    {
      "text": "fun isAtLeast(major: Int, minor: Int): Boolean",
      "desc": "Returns true if this version is not less than the version specified with the provided major and minor components."
    },
    {
      "text": "fun isAtLeast(major: Int, minor: Int, patch: Int): Boolean",
      "desc": "Returns true if this version is not less than the version specified with the provided major, minor and patch components."
    },
    {
      "text": "fun toString(): String",
      "desc": "Returns the string representation of this version"
    },
    {
      "text": "val CURRENT: KotlinVersion",
      "desc": "Returns the current version of the Kotlin standard library."
    },
    {
      "text": "const val MAX_COMPONENT_VALUE: Int",
      "desc": "Maximum value a version component can have, a constant value 255."
    },
    {
      "text": "fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T",
      "desc": "Ensures that this value is not less than the specified minimumValue."
    },
    {
      "text": "fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T",
      "desc": "Ensures that this value is not greater than the specified maximumValue."
    },
    {
      "text": "fun <T : Comparable<T>> T.coerceIn( minimumValue: T?, maximumValue: T?): T",
      "desc": "Ensures that this value lies in the specified range minimumValue..maximumValue."
    },
    {
      "text": "fun <T : Comparable<T>> T.coerceIn( range: ClosedFloatingPointRange<T>): T",
      "desc": "Ensures that this value lies in the specified range."
    },
    {
      "text": "infix fun <T> Comparable<T>.compareTo(other: T): Int",
      "desc": "Compares this object with the specified object for order. Returns zero if this object is equal to the specified other object, a negative number if it's less than other, or a positive number if it's greater than other."
    },
    {
      "text": "operator fun <T : Comparable<T>> T.rangeTo( that: T): ClosedRange<T>",
      "desc": "Creates a range from this Comparable value to the specified that value."
    }
  ]
}