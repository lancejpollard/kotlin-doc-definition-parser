{
  "type": "unknown",
  "name": "LongRange",
  "signature": "class LongRange : LongProgression, ClosedRange<Long>",
  "items": [
    {
      "text": "<init>(start: Long, endInclusive: Long)",
      "desc": "A range of values of type Long."
    },
    {
      "text": "val endInclusive: Long",
      "desc": "The maximum value in the range (inclusive)."
    },
    {
      "text": "val start: Long",
      "desc": "The minimum value in the range."
    },
    {
      "text": "fun contains(value: Long): Boolean",
      "desc": "Checks whether the specified value belongs to the range."
    },
    {
      "text": "fun equals(other: Any?): Boolean",
      "desc": "Indicates whether some other object is \"equal to\" this one. Implementations must fulfil the following requirements:"
    },
    {
      "text": "fun hashCode(): Int",
      "desc": "Returns a hash code value for the object. The general contract of hashCode is:"
    },
    {
      "text": "fun isEmpty(): Boolean",
      "desc": "Checks whether the range is empty."
    },
    {
      "text": "fun toString(): String",
      "desc": "Returns a string representation of the object."
    },
    {
      "text": "val EMPTY: LongRange",
      "desc": "An empty range of values of type Long."
    },
    {
      "text": "fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean",
      "desc": "Returns true if all elements match the given predicate."
    },
    {
      "text": "fun <T> Iterable<T>.any(): Boolean",
      "desc": "Returns true if collection has at least one element."
    },
    {
      "text": "fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean",
      "desc": "Returns true if at least one element matches the given predicate."
    },
    {
      "text": "fun <T> Iterable<T>.asIterable(): Iterable<T>",
      "desc": "Returns this collection as an Iterable."
    },
    {
      "text": "fun <T> Iterable<T>.asSequence(): Sequence<T>",
      "desc": "Creates a Sequence instance that wraps the original collection returning its elements when being iterated."
    },
    {
      "text": "fun <T, K, V> Iterable<T>.associate( transform: (T) -> Pair<K, V>): Map<K, V>",
      "desc": "Returns a Map containing key-value pairs provided by transform function applied to elements of the given collection."
    },
    {
      "text": "fun <T, K> Iterable<T>.associateBy( keySelector: (T) -> K): Map<K, T>",
      "desc": "Returns a Map containing the elements from the given collection indexed by the key returned from keySelector function applied to each element."
    },
    {
      "text": "fun <T, K, V> Iterable<T>.associateBy( keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V>",
      "desc": "Returns a Map containing the values provided by valueTransform and indexed by keySelector functions applied to elements of the given collection."
    },
    {
      "text": "fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo( destination: M, keySelector: (T) -> K): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs, where key is provided by the keySelector function applied to each element of the given collection and value is the element itself."
    },
    {
      "text": "fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo( destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs, where key is provided by the keySelector function and and value is provided by the valueTransform function applied to elements of the given collection."
    },
    {
      "text": "fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo( destination: M, transform: (T) -> Pair<K, V>): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs provided by transform function applied to each element of the given collection."
    },
    {
      "text": "fun <K, V> Iterable<K>.associateWith( valueSelector: (K) -> V): Map<K, V>",
      "desc": "Returns a Map where keys are elements from the given collection and values are produced by the valueSelector function applied to each element."
    },
    {
      "text": "fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo( destination: M, valueSelector: (K) -> V): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs for each element of the given collection, where key is the element itself and value is provided by the valueSelector function applied to that key."
    },
    {
      "text": "fun Iterable<Long>.average(): Double",
      "desc": "Returns an average value of elements in the collection."
    },
    {
      "text": "fun <T> Iterable<T>.chunked(size: Int): List<List<T>>",
      "desc": "Splits this collection into a list of lists each not exceeding the given size."
    },
    {
      "text": "fun <T, R> Iterable<T>.chunked( size: Int, transform: (List<T>) -> R): List<R>",
      "desc": "Splits this collection into several lists each not exceeding the given size and applies the given transform function to an each."
    },
    {
      "text": "operator fun LongRange.contains(element: Long?): Boolean",
      "desc": "Returns true if this range contains the specified element."
    },
    {
      "text": "operator fun ClosedRange<Long>.contains(value: Byte): Boolean",
      "desc": "Checks if the specified value belongs to this range."
    },
    {
      "text": "operator fun <T> Iterable<T>.contains(element: T): Boolean",
      "desc": "Returns true if element is found in the collection."
    },
    {
      "text": "fun <T> Iterable<T>.count(): Int",
      "desc": "Returns the number of elements in this collection."
    },
    {
      "text": "fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int",
      "desc": "Returns the number of elements matching the given predicate."
    },
    {
      "text": "fun <T> Iterable<T>.distinct(): List<T>",
      "desc": "Returns a list containing only distinct elements from the given collection."
    },
    {
      "text": "fun <T, K> Iterable<T>.distinctBy( selector: (T) -> K): List<T>",
      "desc": "Returns a list containing only elements from the given collection having distinct keys returned by the given selector function."
    },
    {
      "text": "fun <T> Iterable<T>.drop(n: Int): List<T>",
      "desc": "Returns a list containing all elements except first n elements."
    },
    {
      "text": "fun <T> Iterable<T>.dropWhile( predicate: (T) -> Boolean): List<T>",
      "desc": "Returns a list containing all elements except first elements that satisfy the given predicate."
    },
    {
      "text": "fun <T> Iterable<T>.elementAt(index: Int): T",
      "desc": "Returns an element at the given index or throws an IndexOutOfBoundsException if the index is out of bounds of this collection."
    },
    {
      "text": "fun <T> Iterable<T>.elementAtOrElse( index: Int, defaultValue: (Int) -> T): T",
      "desc": "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this collection."
    },
    {
      "text": "fun <T> Iterable<T>.elementAtOrNull(index: Int): T?",
      "desc": "Returns an element at the given index or null if the index is out of bounds of this collection."
    },
    {
      "text": "fun <T> Iterable<T>.filter( predicate: (T) -> Boolean): List<T>",
      "desc": "Returns a list containing only elements matching the given predicate."
    },
    {
      "text": "fun <T> Iterable<T>.filterIndexed( predicate: (index: Int, T) -> Boolean): List<T>",
      "desc": "Returns a list containing only elements matching the given predicate."
    },
    {
      "text": "fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo( destination: C, predicate: (index: Int, T) -> Boolean): C",
      "desc": "Appends all elements matching the given predicate to the given destination."
    },
    {
      "text": "fun <R> Iterable<*>.filterIsInstance(): List<R>",
      "desc": "Returns a list containing all elements that are instances of specified type parameter R."
    },
    {
      "text": "fun <R> Iterable<*>.filterIsInstance( klass: Class<R>): List<R>",
      "desc": "Returns a list containing all elements that are instances of specified class."
    },
    {
      "text": "fun <R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo( destination: C): C",
      "desc": "Appends all elements that are instances of specified type parameter R to the given destination."
    },
    {
      "text": "fun <C : MutableCollection<in R>, R> Iterable<*>.filterIsInstanceTo( destination: C, klass: Class<R>): C",
      "desc": "Appends all elements that are instances of specified class to the given destination."
    },
    {
      "text": "fun <T> Iterable<T>.filterNot( predicate: (T) -> Boolean): List<T>",
      "desc": "Returns a list containing all elements not matching the given predicate."
    },
    {
      "text": "fun <T : Any> Iterable<T?>.filterNotNull(): List<T>",
      "desc": "Returns a list containing all elements that are not null."
    },
    {
      "text": "fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo( destination: C): C",
      "desc": "Appends all elements that are not null to the given destination."
    },
    {
      "text": "fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo( destination: C, predicate: (T) -> Boolean): C",
      "desc": "Appends all elements not matching the given predicate to the given destination."
    },
    {
      "text": "fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo( destination: C, predicate: (T) -> Boolean): C",
      "desc": "Appends all elements matching the given predicate to the given destination."
    },
    {
      "text": "fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T?",
      "desc": "Returns the first element matching the given predicate, or null if no such element was found."
    },
    {
      "text": "fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T?",
      "desc": "Returns the last element matching the given predicate, or null if no such element was found."
    },
    {
      "text": "fun <T> Iterable<T>.first(): T",
      "desc": "Returns first element."
    },
    {
      "text": "fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T",
      "desc": "Returns the first element matching the given predicate."
    },
    {
      "text": "fun <T, R : Any> Iterable<T>.firstNotNullOf( transform: (T) -> R?): R",
      "desc": "Returns the first non-null value produced by transform function being applied to elements of this collection in iteration order, or throws NoSuchElementException if no non-null value was produced."
    },
    {
      "text": "fun <T, R : Any> Iterable<T>.firstNotNullOfOrNull( transform: (T) -> R?): R?",
      "desc": "Returns the first non-null value produced by transform function being applied to elements of this collection in iteration order, or null if no non-null value was produced."
    },
    {
      "text": "fun <T> Iterable<T>.firstOrNull(): T?",
      "desc": "Returns the first element, or null if the collection is empty."
    },
    {
      "text": "fun <T> Iterable<T>.firstOrNull( predicate: (T) -> Boolean): T?",
      "desc": "Returns the first element matching the given predicate, or null if element was not found."
    },
    {
      "text": "fun <T, R> Iterable<T>.flatMap( transform: (T) -> Iterable<R>): List<R>",
      "desc": "Returns a single list of all elements yielded from results of transform function being invoked on each element of original collection."
    },
    {
      "text": "fun <T, R> Iterable<T>.flatMapIndexed( transform: (index: Int, T) -> Iterable<R>): List<R>",
      "desc": "Returns a single list of all elements yielded from results of transform function being invoked on each element and its index in the original collection."
    },
    {
      "text": "fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo( destination: C, transform: (index: Int, T) -> Iterable<R>): C",
      "desc": "Appends all elements yielded from results of transform function being invoked on each element and its index in the original collection, to the given destination."
    },
    {
      "text": "fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo( destination: C, transform: (T) -> Iterable<R>): C",
      "desc": "Appends all elements yielded from results of transform function being invoked on each element of original collection, to the given destination."
    },
    {
      "text": "fun <T, R> Iterable<T>.fold( initial: R, operation: (acc: R, T) -> R): R",
      "desc": "Accumulates value starting with initial value and applying operation from left to right to current accumulator value and each element."
    },
    {
      "text": "fun <T, R> Iterable<T>.foldIndexed( initial: R, operation: (index: Int, acc: R, T) -> R): R",
      "desc": "Accumulates value starting with initial value and applying operation from left to right to current accumulator value and each element with its index in the original collection."
    },
    {
      "text": "fun <T> Iterable<T>.forEach(action: (T) -> Unit)",
      "desc": "Performs the given action on each element."
    },
    {
      "text": "fun <T> Iterable<T>.forEachIndexed( action: (index: Int, T) -> Unit)",
      "desc": "Performs the given action on each element, providing sequential index with the element."
    },
    {
      "text": "fun <T, K> Iterable<T>.groupBy( keySelector: (T) -> K): Map<K, List<T>>",
      "desc": "Groups elements of the original collection by the key returned by the given keySelector function applied to each element and returns a map where each group key is associated with a list of corresponding elements."
    },
    {
      "text": "fun <T, K, V> Iterable<T>.groupBy( keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>>",
      "desc": "Groups values returned by the valueTransform function applied to each element of the original collection by the key returned by the given keySelector function applied to the element and returns a map where each group key is associated with a list of corresponding values."
    },
    {
      "text": "fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo( destination: M, keySelector: (T) -> K): M",
      "desc": "Groups elements of the original collection by the key returned by the given keySelector function applied to each element and puts to the destination map each group key associated with a list of corresponding elements."
    },
    {
      "text": "fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo( destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M",
      "desc": "Groups values returned by the valueTransform function applied to each element of the original collection by the key returned by the given keySelector function applied to the element and puts to the destination map each group key associated with a list of corresponding values."
    },
    {
      "text": "fun <T, K> Iterable<T>.groupingBy( keySelector: (T) -> K): Grouping<T, K>",
      "desc": "Creates a Grouping source from a collection to be used later with one of group-and-fold operations using the specified keySelector function to extract a key from each element."
    },
    {
      "text": "fun <T> Iterable<T>.indexOf(element: T): Int",
      "desc": "Returns first index of element, or -1 if the collection does not contain element."
    },
    {
      "text": "fun <T> Iterable<T>.indexOfFirst( predicate: (T) -> Boolean): Int",
      "desc": "Returns index of the first element matching the given predicate, or -1 if the collection does not contain such element."
    },
    {
      "text": "fun <T> Iterable<T>.indexOfLast( predicate: (T) -> Boolean): Int",
      "desc": "Returns index of the last element matching the given predicate, or -1 if the collection does not contain such element."
    },
    {
      "text": "infix fun <T> Iterable<T>.intersect( other: Iterable<T>): Set<T>",
      "desc": "Returns a set containing all elements that are contained by both this collection and the specified collection."
    },
    {
      "text": "fun <T, A : Appendable> Iterable<T>.joinTo( buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A",
      "desc": "Appends the string from all the elements separated using separator and using the given prefix and postfix if supplied."
    },
    {
      "text": "fun <T> Iterable<T>.joinToString( separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String",
      "desc": "Creates a string from all the elements separated using separator and using the given prefix and postfix if supplied."
    },
    {
      "text": "fun <T> Iterable<T>.last(): T",
      "desc": "Returns the last element."
    },
    {
      "text": "fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T",
      "desc": "Returns the last element matching the given predicate."
    },
    {
      "text": "fun <T> Iterable<T>.lastIndexOf(element: T): Int",
      "desc": "Returns last index of element, or -1 if the collection does not contain element."
    },
    {
      "text": "fun <T> Iterable<T>.lastOrNull(): T?",
      "desc": "Returns the last element, or null if the collection is empty."
    },
    {
      "text": "fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T?",
      "desc": "Returns the last element matching the given predicate, or null if no such element was found."
    },
    {
      "text": "fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R>",
      "desc": "Returns a list containing the results of applying the given transform function to each element in the original collection."
    },
    {
      "text": "fun <T, R> Iterable<T>.mapIndexed( transform: (index: Int, T) -> R): List<R>",
      "desc": "Returns a list containing the results of applying the given transform function to each element and its index in the original collection."
    },
    {
      "text": "fun <T, R : Any> Iterable<T>.mapIndexedNotNull( transform: (index: Int, T) -> R?): List<R>",
      "desc": "Returns a list containing only the non-null results of applying the given transform function to each element and its index in the original collection."
    },
    {
      "text": "fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo( destination: C, transform: (index: Int, T) -> R?): C",
      "desc": "Applies the given transform function to each element and its index in the original collection and appends only the non-null results to the given destination."
    },
    {
      "text": "fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo( destination: C, transform: (index: Int, T) -> R): C",
      "desc": "Applies the given transform function to each element and its index in the original collection and appends the results to the given destination."
    },
    {
      "text": "fun <T, R : Any> Iterable<T>.mapNotNull( transform: (T) -> R?): List<R>",
      "desc": "Returns a list containing only the non-null results of applying the given transform function to each element in the original collection."
    },
    {
      "text": "fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo( destination: C, transform: (T) -> R?): C",
      "desc": "Applies the given transform function to each element in the original collection and appends only the non-null results to the given destination."
    },
    {
      "text": "fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo( destination: C, transform: (T) -> R): C",
      "desc": "Applies the given transform function to each element of the original collection and appends the results to the given destination."
    },
    {
      "text": "fun <T : Comparable<T>> Iterable<T>.max(): T?"
    },
    {
      "text": "fun <T, R : Comparable<R>> Iterable<T>.maxBy( selector: (T) -> R): T?"
    },
    {
      "text": "fun <T, R : Comparable<R>> Iterable<T>.maxByOrNull( selector: (T) -> R): T?",
      "desc": "Returns the first element yielding the largest value of the given function or null if there are no elements."
    },
    {
      "text": "fun <T> Iterable<T>.maxOf(selector: (T) -> Double): Double",
      "desc": "Returns the largest value among all values produced by selector function applied to each element in the collection."
    },
    {
      "text": "fun <T> Iterable<T>.maxOfOrNull( selector: (T) -> Double): Double?",
      "desc": "Returns the largest value among all values produced by selector function applied to each element in the collection or null if there are no elements."
    },
    {
      "text": "fun <T, R> Iterable<T>.maxOfWith( comparator: Comparator<in R>, selector: (T) -> R): R",
      "desc": "Returns the largest value according to the provided comparator among all values produced by selector function applied to each element in the collection."
    },
    {
      "text": "fun <T, R> Iterable<T>.maxOfWithOrNull( comparator: Comparator<in R>, selector: (T) -> R): R?",
      "desc": "Returns the largest value according to the provided comparator among all values produced by selector function applied to each element in the collection or null if there are no elements."
    },
    {
      "text": "fun <T : Comparable<T>> Iterable<T>.maxOrNull(): T?",
      "desc": "Returns the largest element or null if there are no elements."
    },
    {
      "text": "fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T?"
    },
    {
      "text": "fun <T> Iterable<T>.maxWithOrNull( comparator: Comparator<in T>): T?",
      "desc": "Returns the first element having the largest value according to the provided comparator or null if there are no elements."
    },
    {
      "text": "fun <T : Comparable<T>> Iterable<T>.min(): T?"
    },
    {
      "text": "fun <T, R : Comparable<R>> Iterable<T>.minBy( selector: (T) -> R): T?"
    },
    {
      "text": "fun <T, R : Comparable<R>> Iterable<T>.minByOrNull( selector: (T) -> R): T?",
      "desc": "Returns the first element yielding the smallest value of the given function or null if there are no elements."
    },
    {
      "text": "fun <T> Iterable<T>.minOf(selector: (T) -> Double): Double",
      "desc": "Returns the smallest value among all values produced by selector function applied to each element in the collection."
    },
    {
      "text": "fun <T> Iterable<T>.minOfOrNull( selector: (T) -> Double): Double?",
      "desc": "Returns the smallest value among all values produced by selector function applied to each element in the collection or null if there are no elements."
    },
    {
      "text": "fun <T, R> Iterable<T>.minOfWith( comparator: Comparator<in R>, selector: (T) -> R): R",
      "desc": "Returns the smallest value according to the provided comparator among all values produced by selector function applied to each element in the collection."
    },
    {
      "text": "fun <T, R> Iterable<T>.minOfWithOrNull( comparator: Comparator<in R>, selector: (T) -> R): R?",
      "desc": "Returns the smallest value according to the provided comparator among all values produced by selector function applied to each element in the collection or null if there are no elements."
    },
    {
      "text": "fun <T : Comparable<T>> Iterable<T>.minOrNull(): T?",
      "desc": "Returns the smallest element or null if there are no elements."
    },
    {
      "text": "operator fun <T> Iterable<T>.minus(element: T): List<T>",
      "desc": "Returns a list containing all elements of the original collection without the first occurrence of the given element."
    },
    {
      "text": "operator fun <T> Iterable<T>.minus( elements: Array<out T>): List<T>",
      "desc": "Returns a list containing all elements of the original collection except the elements contained in the given elements array."
    },
    {
      "text": "operator fun <T> Iterable<T>.minus( elements: Iterable<T>): List<T>",
      "desc": "Returns a list containing all elements of the original collection except the elements contained in the given elements collection."
    },
    {
      "text": "operator fun <T> Iterable<T>.minus( elements: Sequence<T>): List<T>",
      "desc": "Returns a list containing all elements of the original collection except the elements contained in the given elements sequence."
    },
    {
      "text": "fun <T> Iterable<T>.minusElement(element: T): List<T>",
      "desc": "Returns a list containing all elements of the original collection without the first occurrence of the given element."
    },
    {
      "text": "fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T?"
    },
    {
      "text": "fun <T> Iterable<T>.minWithOrNull( comparator: Comparator<in T>): T?",
      "desc": "Returns the first element having the smallest value according to the provided comparator or null if there are no elements."
    },
    {
      "text": "fun <T> Iterable<T>.none(): Boolean",
      "desc": "Returns true if the collection has no elements."
    },
    {
      "text": "fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean",
      "desc": "Returns true if no elements match the given predicate."
    },
    {
      "text": "fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C",
      "desc": "Performs the given action on each element and returns the collection itself afterwards."
    },
    {
      "text": "fun <T, C : Iterable<T>> C.onEachIndexed( action: (index: Int, T) -> Unit): C",
      "desc": "Performs the given action on each element, providing sequential index with the element, and returns the collection itself afterwards."
    },
    {
      "text": "fun <T> Iterable<T>.partition( predicate: (T) -> Boolean): Pair<List<T>, List<T>>",
      "desc": "Splits the original collection into pair of lists, where first list contains elements for which predicate yielded true, while second list contains elements for which predicate yielded false."
    },
    {
      "text": "operator fun <T> Iterable<T>.plus(element: T): List<T>",
      "desc": "Returns a list containing all elements of the original collection and then the given element."
    },
    {
      "text": "operator fun <T> Iterable<T>.plus( elements: Array<out T>): List<T>",
      "desc": "Returns a list containing all elements of the original collection and then all elements of the given elements array."
    },
    {
      "text": "operator fun <T> Iterable<T>.plus( elements: Iterable<T>): List<T>",
      "desc": "Returns a list containing all elements of the original collection and then all elements of the given elements collection."
    },
    {
      "text": "operator fun <T> Iterable<T>.plus( elements: Sequence<T>): List<T>",
      "desc": "Returns a list containing all elements of the original collection and then all elements of the given elements sequence."
    },
    {
      "text": "fun <T> Iterable<T>.plusElement(element: T): List<T>",
      "desc": "Returns a list containing all elements of the original collection and then the given element."
    },
    {
      "text": "fun LongRange.random(): Long",
      "desc": "Returns a random element from this range."
    },
    {
      "text": "fun LongRange.random(random: Random): Long",
      "desc": "Returns a random element from this range using the specified source of randomness."
    },
    {
      "text": "fun LongRange.randomOrNull(): Long?",
      "desc": "Returns a random element from this range, or null if this range is empty."
    },
    {
      "text": "fun LongRange.randomOrNull(random: Random): Long?",
      "desc": "Returns a random element from this range using the specified source of randomness, or null if this range is empty."
    },
    {
      "text": "fun <S, T : S> Iterable<T>.reduce( operation: (acc: S, T) -> S): S",
      "desc": "Accumulates value starting with the first element and applying operation from left to right to current accumulator value and each element."
    },
    {
      "text": "fun <S, T : S> Iterable<T>.reduceIndexed( operation: (index: Int, acc: S, T) -> S): S",
      "desc": "Accumulates value starting with the first element and applying operation from left to right to current accumulator value and each element with its index in the original collection."
    },
    {
      "text": "fun <S, T : S> Iterable<T>.reduceIndexedOrNull( operation: (index: Int, acc: S, T) -> S): S?",
      "desc": "Accumulates value starting with the first element and applying operation from left to right to current accumulator value and each element with its index in the original collection."
    },
    {
      "text": "fun <S, T : S> Iterable<T>.reduceOrNull( operation: (acc: S, T) -> S): S?",
      "desc": "Accumulates value starting with the first element and applying operation from left to right to current accumulator value and each element."
    },
    {
      "text": "fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T>",
      "desc": "Returns an original collection containing all the non-null elements, throwing an IllegalArgumentException if there are any null elements."
    },
    {
      "text": "fun <T, R> Iterable<T>.runningFold( initial: R, operation: (acc: R, T) -> R): List<R>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element and current accumulator value that starts with initial value."
    },
    {
      "text": "fun <T, R> Iterable<T>.runningFoldIndexed( initial: R, operation: (index: Int, acc: R, T) -> R): List<R>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element, its index in the original collection and current accumulator value that starts with initial value."
    },
    {
      "text": "fun <S, T : S> Iterable<T>.runningReduce( operation: (acc: S, T) -> S): List<S>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element and current accumulator value that starts with the first element of this collection."
    },
    {
      "text": "fun <S, T : S> Iterable<T>.runningReduceIndexed( operation: (index: Int, acc: S, T) -> S): List<S>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element, its index in the original collection and current accumulator value that starts with the first element of this collection."
    },
    {
      "text": "fun <T, R> Iterable<T>.scan( initial: R, operation: (acc: R, T) -> R): List<R>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element and current accumulator value that starts with initial value."
    },
    {
      "text": "fun <T, R> Iterable<T>.scanIndexed( initial: R, operation: (index: Int, acc: R, T) -> R): List<R>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element, its index in the original collection and current accumulator value that starts with initial value."
    },
    {
      "text": "fun <T> Iterable<T>.shuffled(random: Random): List<T>",
      "desc": "Returns a new list with the elements of this list randomly shuffled using the specified random instance as the source of randomness."
    },
    {
      "text": "fun <T> Iterable<T>.single(): T",
      "desc": "Returns the single element, or throws an exception if the collection is empty or has more than one element."
    },
    {
      "text": "fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T",
      "desc": "Returns the single element matching the given predicate, or throws exception if there is no or more than one matching element."
    },
    {
      "text": "fun <T> Iterable<T>.singleOrNull(): T?",
      "desc": "Returns single element, or null if the collection is empty or has more than one element."
    },
    {
      "text": "fun <T> Iterable<T>.singleOrNull( predicate: (T) -> Boolean): T?",
      "desc": "Returns the single element matching the given predicate, or null if element was not found or more than one element was found."
    },
    {
      "text": "fun <T : Comparable<T>> Iterable<T>.sorted(): List<T>",
      "desc": "Returns a list of all elements sorted according to their natural sort order."
    },
    {
      "text": "fun <T, R : Comparable<R>> Iterable<T>.sortedBy( selector: (T) -> R?): List<T>",
      "desc": "Returns a list of all elements sorted according to natural sort order of the value returned by specified selector function."
    },
    {
      "text": "fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending( selector: (T) -> R?): List<T>",
      "desc": "Returns a list of all elements sorted descending according to natural sort order of the value returned by specified selector function."
    },
    {
      "text": "fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T>",
      "desc": "Returns a list of all elements sorted descending according to their natural sort order."
    },
    {
      "text": "fun <T> Iterable<T>.sortedWith( comparator: Comparator<in T>): List<T>",
      "desc": "Returns a list of all elements sorted according to the specified comparator."
    },
    {
      "text": "infix fun LongProgression.step(step: Long): LongProgression",
      "desc": "Returns a progression that goes over the same range with the given step."
    },
    {
      "text": "infix fun <T> Iterable<T>.subtract( other: Iterable<T>): Set<T>",
      "desc": "Returns a set containing all elements that are contained by this collection and not contained by the specified collection."
    },
    {
      "text": "fun Iterable<Long>.sum(): Long",
      "desc": "Returns the sum of all elements in the collection."
    },
    {
      "text": "fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int",
      "desc": "Returns the sum of all values produced by selector function applied to each element in the collection."
    },
    {
      "text": "fun <T> Iterable<T>.sumByDouble( selector: (T) -> Double): Double",
      "desc": "Returns the sum of all values produced by selector function applied to each element in the collection."
    },
    {
      "text": "fun <T> Iterable<T>.sumOf(selector: (T) -> Double): Double",
      "desc": "Returns the sum of all values produced by selector function applied to each element in the collection."
    },
    {
      "text": "fun <T> Iterable<T>.take(n: Int): List<T>",
      "desc": "Returns a list containing first n elements."
    },
    {
      "text": "fun <T> Iterable<T>.takeWhile( predicate: (T) -> Boolean): List<T>",
      "desc": "Returns a list containing first elements satisfying the given predicate."
    },
    {
      "text": "fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection( destination: C): C",
      "desc": "Appends all elements to the given destination collection."
    },
    {
      "text": "fun <T> Iterable<T>.toHashSet(): HashSet<T>",
      "desc": "Returns a new HashSet of all elements."
    },
    {
      "text": "fun <T> Iterable<T>.toList(): List<T>",
      "desc": "Returns a List containing all elements."
    },
    {
      "text": "fun <T> Iterable<T>.toMutableList(): MutableList<T>",
      "desc": "Returns a new MutableList filled with all elements of this collection."
    },
    {
      "text": "fun <T> Iterable<T>.toMutableSet(): MutableSet<T>",
      "desc": "Returns a new MutableSet containing all distinct elements from the given collection."
    },
    {
      "text": "fun <T> Iterable<T>.toSet(): Set<T>",
      "desc": "Returns a Set of all elements."
    },
    {
      "text": "fun <T : Comparable<T>> Iterable<T>.toSortedSet(): SortedSet<T>",
      "desc": "Returns a new SortedSet of all elements."
    },
    {
      "text": "infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T>",
      "desc": "Returns a set containing all distinct elements from both collections."
    },
    {
      "text": "fun <T> Iterable<T>.windowed( size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>>",
      "desc": "Returns a list of snapshots of the window of the given size sliding along this collection with the given step, where each snapshot is a list."
    },
    {
      "text": "fun <T, R> Iterable<T>.windowed( size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R>",
      "desc": "Returns a list of results of applying the given transform function to an each list representing a view over the window of the given size sliding along this collection with the given step."
    },
    {
      "text": "fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>>",
      "desc": "Returns a lazy Iterable that wraps each element of the original collection into an IndexedValue containing the index of that element and the element itself."
    },
    {
      "text": "infix fun <T, R> Iterable<T>.zip( other: Array<out R>): List<Pair<T, R>>",
      "desc": "Returns a list of pairs built from the elements of this collection and the other array with the same index. The returned list has length of the shortest collection."
    },
    {
      "text": "fun <T, R, V> Iterable<T>.zip( other: Array<out R>, transform: (a: T, b: R) -> V): List<V>",
      "desc": "Returns a list of values built from the elements of this collection and the other array with the same index using the provided transform function applied to each pair of elements. The returned list has length of the shortest collection."
    },
    {
      "text": "infix fun <T, R> Iterable<T>.zip( other: Iterable<R>): List<Pair<T, R>>",
      "desc": "Returns a list of pairs built from the elements of this collection and other collection with the same index. The returned list has length of the shortest collection."
    },
    {
      "text": "fun <T, R, V> Iterable<T>.zip( other: Iterable<R>, transform: (a: T, b: R) -> V): List<V>",
      "desc": "Returns a list of values built from the elements of this collection and the other collection with the same index using the provided transform function applied to each pair of elements. The returned list has length of the shortest collection."
    },
    {
      "text": "fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>>",
      "desc": "Returns a list of pairs of each two adjacent elements in this collection."
    },
    {
      "text": "fun <T, R> Iterable<T>.zipWithNext( transform: (a: T, b: T) -> R): List<R>",
      "desc": "Returns a list containing the results of applying the given transform function to an each pair of two adjacent elements in this collection."
    }
  ]
}