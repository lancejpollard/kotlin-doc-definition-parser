{
  "type": "unknown",
  "name": "UShort",
  "signature": "inline class UShort : Comparable<UShort>",
  "items": [
    {
      "text": "infix fun and(other: UShort): UShort",
      "desc": "Performs a bitwise AND operation between the two values."
    },
    {
      "text": "operator fun compareTo(other: UByte): Int",
      "desc": "Compares this value with the specified value for order. Returns zero if this value is equal to the specified other value, a negative number if it's less than other, or a positive number if it's greater than other."
    },
    {
      "text": "operator fun dec(): UShort",
      "desc": "Returns this value decremented by one."
    },
    {
      "text": "operator fun div(other: UByte): UInt",
      "desc": "Divides this value by the other value, truncating the result to an integer that is closer to zero."
    },
    {
      "text": "fun floorDiv(other: UByte): UInt",
      "desc": "Divides this value by the other value, flooring the result to an integer that is closer to negative infinity."
    },
    {
      "text": "operator fun inc(): UShort",
      "desc": "Returns this value incremented by one."
    },
    {
      "text": "fun inv(): UShort",
      "desc": "Inverts the bits in this value."
    },
    {
      "text": "operator fun minus(other: UByte): UInt",
      "desc": "Subtracts the other value from this value."
    },
    {
      "text": "fun mod(other: UByte): UByte",
      "desc": "Calculates the remainder of flooring division of this value by the other value."
    },
    {
      "text": "infix fun or(other: UShort): UShort",
      "desc": "Performs a bitwise OR operation between the two values."
    },
    {
      "text": "operator fun plus(other: UByte): UInt",
      "desc": "Adds the other value to this value."
    },
    {
      "text": "operator fun rangeTo(other: UShort): UIntRange",
      "desc": "Creates a range from this value to the specified other value."
    },
    {
      "text": "operator fun rem(other: UByte): UInt",
      "desc": "Calculates the remainder of truncating division of this value by the other value."
    },
    {
      "text": "operator fun times(other: UByte): UInt",
      "desc": "Multiplies this value by the other value."
    },
    {
      "text": "fun toByte(): Byte",
      "desc": "Converts this UShort value to Byte."
    },
    {
      "text": "fun toDouble(): Double",
      "desc": "Converts this UShort value to Double."
    },
    {
      "text": "fun toFloat(): Float",
      "desc": "Converts this UShort value to Float."
    },
    {
      "text": "fun toInt(): Int",
      "desc": "Converts this UShort value to Int."
    },
    {
      "text": "fun toLong(): Long",
      "desc": "Converts this UShort value to Long."
    },
    {
      "text": "fun toShort(): Short",
      "desc": "Converts this UShort value to Short."
    },
    {
      "text": "fun toString(): String",
      "desc": "Returns a string representation of the object."
    },
    {
      "text": "fun toUByte(): UByte",
      "desc": "Converts this UShort value to UByte."
    },
    {
      "text": "fun toUInt(): UInt",
      "desc": "Converts this UShort value to UInt."
    },
    {
      "text": "fun toULong(): ULong",
      "desc": "Converts this UShort value to ULong."
    },
    {
      "text": "fun toUShort(): UShort",
      "desc": "Returns this value."
    },
    {
      "text": "infix fun xor(other: UShort): UShort",
      "desc": "Performs a bitwise XOR operation between the two values."
    },
    {
      "text": "const val MAX_VALUE: UShort",
      "desc": "A constant holding the maximum value an instance of UShort can have."
    },
    {
      "text": "const val MIN_VALUE: UShort",
      "desc": "A constant holding the minimum value an instance of UShort can have."
    },
    {
      "text": "const val SIZE_BITS: Int",
      "desc": "The number of bits used to represent an instance of UShort in a binary form."
    },
    {
      "text": "const val SIZE_BYTES: Int",
      "desc": "The number of bytes used to represent an instance of UShort in a binary form."
    },
    {
      "text": "fun UShort.coerceAtLeast(minimumValue: UShort): UShort",
      "desc": "Ensures that this value is not less than the specified minimumValue."
    },
    {
      "text": "fun UShort.coerceAtMost(maximumValue: UShort): UShort",
      "desc": "Ensures that this value is not greater than the specified maximumValue."
    },
    {
      "text": "fun UShort.coerceIn( minimumValue: UShort, maximumValue: UShort): UShort",
      "desc": "Ensures that this value lies in the specified range minimumValue..maximumValue."
    },
    {
      "text": "fun <T : Comparable<T>> T.coerceIn( range: ClosedFloatingPointRange<T>): T",
      "desc": "Ensures that this value lies in the specified range."
    },
    {
      "text": "infix fun <T> Comparable<T>.compareTo(other: T): Int",
      "desc": "Compares this object with the specified object for order. Returns zero if this object is equal to the specified other object, a negative number if it's less than other, or a positive number if it's greater than other."
    },
    {
      "text": "fun <R : Any> UShort.convert(): R"
    },
    {
      "text": "fun UShort.countLeadingZeroBits(): Int",
      "desc": "Counts the number of consecutive most significant bits that are zero in the binary representation of this UShort number."
    },
    {
      "text": "fun UShort.countOneBits(): Int",
      "desc": "Counts the number of set bits in the binary representation of this UShort number."
    },
    {
      "text": "fun UShort.countTrailingZeroBits(): Int",
      "desc": "Counts the number of consecutive least significant bits that are zero in the binary representation of this UShort number."
    },
    {
      "text": "infix fun UShort.downTo(to: UShort): UIntProgression",
      "desc": "Returns a progression from this value down to the specified to value with the step -1."
    },
    {
      "text": "operator fun <T : Comparable<T>> T.rangeTo( that: T): ClosedRange<T>",
      "desc": "Creates a range from this Comparable value to the specified that value."
    },
    {
      "text": "fun UShort.rotateLeft(bitCount: Int): UShort",
      "desc": "Rotates the binary representation of this UShort number left by the specified bitCount number of bits. The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side."
    },
    {
      "text": "fun UShort.rotateRight(bitCount: Int): UShort",
      "desc": "Rotates the binary representation of this UShort number right by the specified bitCount number of bits. The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side."
    },
    {
      "text": "fun UShort.takeHighestOneBit(): UShort",
      "desc": "Returns a number having a single bit set in the position of the most significant set bit of this UShort number, or zero, if this number is zero."
    },
    {
      "text": "fun UShort.takeLowestOneBit(): UShort",
      "desc": "Returns a number having a single bit set in the position of the least significant set bit of this UShort number, or zero, if this number is zero."
    },
    {
      "text": "fun UShort.toString(radix: Int): String",
      "desc": "Returns a string representation of this Short value in the specified radix."
    },
    {
      "text": "infix fun UShort.until(to: UShort): UIntRange",
      "desc": "Returns a range from this value up to but excluding the specified to value."
    }
  ]
}