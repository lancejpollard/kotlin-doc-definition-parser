{
  "type": "package",
  "name": "kotlin.collections",
  "items": [
    {
      "text": "abstract class AbstractCollection<out E> : Collection<E>",
      "desc": "Provides a skeletal implementation of the read-only Collection interface."
    },
    {
      "text": "abstract class AbstractIterator<T> : Iterator<T>",
      "desc": "A base class to simplify implementing iterators so that implementations only have to implement computeNext to implement the iterator, calling done when the iteration is complete."
    },
    {
      "text": "abstract class AbstractList<out E> : AbstractCollection<E>, List<E>",
      "desc": "Provides a skeletal implementation of the read-only List interface."
    },
    {
      "text": "abstract class AbstractMap<K, out V> : Map<K, V>",
      "desc": "Provides a skeletal implementation of the read-only Map interface."
    },
    {
      "text": "abstract class AbstractMutableCollection<E> : MutableCollection<E>",
      "desc": "Provides a skeletal implementation of the MutableCollection interface."
    },
    {
      "text": "abstract class AbstractMutableList<E> : MutableList<E>",
      "desc": "Provides a skeletal implementation of the MutableList interface."
    },
    {
      "text": "abstract class AbstractMutableMap<K, V> : MutableMap<K, V>",
      "desc": "Provides a skeletal implementation of the MutableMap interface."
    },
    {
      "text": "abstract class AbstractMutableSet<E> : MutableSet<E>",
      "desc": "Provides a skeletal implementation of the MutableSet interface."
    },
    {
      "text": "abstract class AbstractSet<out E> : AbstractCollection<E>, Set<E>",
      "desc": "Provides a skeletal implementation of the read-only Set interface."
    },
    {
      "text": "class ArrayDeque<E> : AbstractMutableList<E>",
      "desc": "Resizable-array implementation of the deque data structure."
    },
    {
      "text": "class ArrayList<E> : MutableList<E>, RandomAccess",
      "desc": "Provides a MutableList implementation, which uses a resizable array as its backing storage."
    },
    {
      "text": "abstract class BooleanIterator : Iterator<Boolean>",
      "desc": "An iterator over a sequence of values of type Boolean."
    },
    {
      "text": "abstract class ByteIterator : Iterator<Byte>",
      "desc": "An iterator over a sequence of values of type Byte."
    },
    {
      "text": "abstract class CharIterator : Iterator<Char>",
      "desc": "An iterator over a sequence of values of type Char."
    },
    {
      "text": "interface Collection<out E> : Iterable<E>",
      "desc": "A generic collection of elements. Methods in this interface support only read-only access to the collection; read/write access is supported through the MutableCollection interface."
    },
    {
      "text": "abstract class DoubleIterator : Iterator<Double>",
      "desc": "An iterator over a sequence of values of type Double."
    },
    {
      "text": "abstract class FloatIterator : Iterator<Float>",
      "desc": "An iterator over a sequence of values of type Float."
    },
    {
      "text": "interface Grouping<T, out K>",
      "desc": "Represents a source of elements with a keyOf function, which can be applied to each element to get its key."
    },
    {
      "text": "class HashMap<K, V> : MutableMap<K, V>",
      "desc": "Hash table based implementation of the MutableMap interface."
    },
    {
      "text": "class HashSet<E> : MutableSet<E>",
      "desc": "The implementation of the MutableSet interface, backed by a HashMap instance."
    },
    {
      "text": "data class IndexedValue<out T>",
      "desc": "Data class representing a value from a collection or sequence, along with its index in that collection or sequence."
    },
    {
      "text": "abstract class IntIterator : Iterator<Int>",
      "desc": "An iterator over a sequence of values of type Int."
    },
    {
      "text": "interface Iterable<out T>",
      "desc": "Classes that inherit from this interface can be represented as a sequence of elements that can be iterated over."
    },
    {
      "text": "interface Iterator<out T>",
      "desc": "An iterator over a collection or another entity that can be represented as a sequence of elements. Allows to sequentially access the elements."
    },
    {
      "text": "class LinkedHashMap<K, V> : MutableMap<K, V>",
      "desc": "Hash table based implementation of the MutableMap interface, which additionally preserves the insertion order of entries during the iteration."
    },
    {
      "text": "class LinkedHashSet<E> : MutableSet<E>",
      "desc": "The implementation of the MutableSet interface, backed by a LinkedHashMap instance."
    },
    {
      "text": "interface List<out E> : Collection<E>",
      "desc": "A generic ordered collection of elements. Methods in this interface support only read-only access to the list; read/write access is supported through the MutableList interface."
    },
    {
      "text": "interface ListIterator<out T> : Iterator<T>",
      "desc": "An iterator over a collection that supports indexed access."
    },
    {
      "text": "abstract class LongIterator : Iterator<Long>",
      "desc": "An iterator over a sequence of values of type Long."
    },
    {
      "text": "interface Map<K, out V>",
      "desc": "A collection that holds pairs of objects (keys and values) and supports efficiently retrieving the value corresponding to each key. Map keys are unique; the map holds only one value for each key. Methods in this interface support only read-only access to the map; read-write access is supported through the MutableMap interface."
    },
    {
      "text": "interface MutableCollection<E> : Collection<E>, MutableIterable<E>",
      "desc": "A generic collection of elements that supports adding and removing elements."
    },
    {
      "text": "interface MutableIterable<out T> : Iterable<T>",
      "desc": "Classes that inherit from this interface can be represented as a sequence of elements that can be iterated over and that supports removing elements during iteration."
    },
    {
      "text": "interface MutableIterator<out T> : Iterator<T>",
      "desc": "An iterator over a mutable collection. Provides the ability to remove elements while iterating."
    },
    {
      "text": "interface MutableList<E> : List<E>, MutableCollection<E>",
      "desc": "A generic ordered collection of elements that supports adding and removing elements."
    },
    {
      "text": "interface MutableListIterator<T> : ListIterator<T>, MutableIterator<T>",
      "desc": "An iterator over a mutable collection that supports indexed access. Provides the ability to add, modify and remove elements while iterating."
    },
    {
      "text": "interface MutableMap<K, V> : Map<K, V>",
      "desc": "A modifiable collection that holds pairs of objects (keys and values) and supports efficiently retrieving the value corresponding to each key. Map keys are unique; the map holds only one value for each key."
    },
    {
      "text": "interface MutableSet<E> : Set<E>, MutableCollection<E>",
      "desc": "A generic unordered collection of elements that does not support duplicate elements, and supports adding and removing elements."
    },
    {
      "text": "interface RandomAccess",
      "desc": "Marker interface indicating that the List implementation supports fast indexed access."
    },
    {
      "text": "interface Set<out E> : Collection<E>",
      "desc": "A generic unordered collection of elements that does not support duplicate elements. Methods in this interface support only read-only access to the set; read/write access is supported through the MutableSet interface."
    },
    {
      "text": "abstract class ShortIterator : Iterator<Short>",
      "desc": "An iterator over a sequence of values of type Short."
    },
    {
      "text": "abstract class UByteIterator : Iterator<UByte>",
      "desc": "An iterator over a sequence of values of type UByte."
    },
    {
      "text": "abstract class UIntIterator : Iterator<UInt>",
      "desc": "An iterator over a sequence of values of type UInt."
    },
    {
      "text": "abstract class ULongIterator : Iterator<ULong>",
      "desc": "An iterator over a sequence of values of type ULong."
    },
    {
      "text": "abstract class UShortIterator : Iterator<UShort>",
      "desc": "An iterator over a sequence of values of type UShort."
    },
    {
      "text": "val <T> Array<out T>.indices: IntRange",
      "desc": "Returns the range of valid indices for the array."
    },
    {
      "text": "val Collection<*>.indices: IntRange",
      "desc": "Returns an IntRange of the valid indices for this collection."
    },
    {
      "text": "val <T> Array<out T>.lastIndex: Int",
      "desc": "Returns the last valid index for the array."
    },
    {
      "text": "val <T> List<T>.lastIndex: Int",
      "desc": "Returns the index of the last item in the list or -1 if the list is empty."
    },
    {
      "text": "fun <T> MutableCollection<in T>.addAll( elements: Iterable<T>): Boolean",
      "desc": "Adds all elements of the given elements collection to this MutableCollection."
    },
    {
      "text": "fun <T> MutableCollection<in T>.addAll( elements: Sequence<T>): Boolean",
      "desc": "Adds all elements of the given elements sequence to this MutableCollection."
    },
    {
      "text": "fun <T> MutableCollection<in T>.addAll( elements: Array<out T>): Boolean",
      "desc": "Adds all elements of the given elements array to this MutableCollection."
    },
    {
      "text": "fun <T, K, R> Grouping<T, K>.aggregate( operation: (key: K, accumulator: R?, element: T, first: Boolean) -> R): Map<K, R>",
      "desc": "Groups elements from the Grouping source by key and applies operation to the elements of each group sequentially, passing the previously accumulated value and the current element as arguments, and stores the results in a new map."
    },
    {
      "text": "fun <T, K, R, M : MutableMap<in K, R>> Grouping<T, K>.aggregateTo( destination: M, operation: (key: K, accumulator: R?, element: T, first: Boolean) -> R): M",
      "desc": "Groups elements from the Grouping source by key and applies operation to the elements of each group sequentially, passing the previously accumulated value and the current element as arguments, and stores the results in the given destination map."
    },
    {
      "text": "fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean",
      "desc": "Returns true if all elements match the given predicate."
    },
    {
      "text": "fun <K, V> Map<out K, V>.all( predicate: (Entry<K, V>) -> Boolean): Boolean",
      "desc": "Returns true if all entries match the given predicate."
    },
    {
      "text": "fun <T> Array<out T>.any(): Boolean",
      "desc": "Returns true if array has at least one element."
    },
    {
      "text": "fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean",
      "desc": "Returns true if at least one element matches the given predicate."
    },
    {
      "text": "fun <T> Iterable<T>.any(): Boolean",
      "desc": "Returns true if collection has at least one element."
    },
    {
      "text": "fun <K, V> Map<out K, V>.any(): Boolean",
      "desc": "Returns true if map has at least one entry."
    },
    {
      "text": "fun <K, V> Map<out K, V>.any( predicate: (Entry<K, V>) -> Boolean): Boolean",
      "desc": "Returns true if at least one entry matches the given predicate."
    },
    {
      "text": "fun <T> arrayListOf(): ArrayList<T>",
      "desc": "Returns an empty new ArrayList."
    },
    {
      "text": "fun <T> arrayListOf(vararg elements: T): ArrayList<T>",
      "desc": "Returns a new ArrayList with the given elements."
    },
    {
      "text": "fun UByteArray.asByteArray(): ByteArray",
      "desc": "Returns an array of type ByteArray, which is a view of this array where each element is a signed reinterpretation of the corresponding element of this array."
    },
    {
      "text": "fun UIntArray.asIntArray(): IntArray",
      "desc": "Returns an array of type IntArray, which is a view of this array where each element is a signed reinterpretation of the corresponding element of this array."
    },
    {
      "text": "fun <T> any_array<T>.asIterable(): Iterable<T>",
      "desc": "Creates an Iterable instance that wraps the original array returning its elements when being iterated."
    },
    {
      "text": "fun <T> Iterable<T>.asIterable(): Iterable<T>",
      "desc": "Returns this collection as an Iterable."
    },
    {
      "text": "fun <K, V> Map<out K, V>.asIterable(): Iterable<Entry<K, V>>",
      "desc": "Creates an Iterable instance that wraps the original map returning its entries when being iterated."
    },
    {
      "text": "fun <T> Array<out T>.asList(): List<T>",
      "desc": "Returns a List that wraps the original array."
    },
    {
      "text": "fun ULongArray.asLongArray(): LongArray",
      "desc": "Returns an array of type LongArray, which is a view of this array where each element is a signed reinterpretation of the corresponding element of this array."
    },
    {
      "text": "fun <T> List<T>.asReversed(): List<T>",
      "desc": "Returns a reversed read-only view of the original List. All changes made in the original list will be reflected in the reversed one."
    },
    {
      "text": "fun <T> MutableList<T>.asReversed(): MutableList<T>",
      "desc": "Returns a reversed mutable view of the original mutable List. All changes made in the original list will be reflected in the reversed one and vice versa."
    },
    {
      "text": "fun <T> any_array<T>.asSequence(): Sequence<T>",
      "desc": "Creates a Sequence instance that wraps the original array returning its elements when being iterated."
    },
    {
      "text": "fun <T> Iterable<T>.asSequence(): Sequence<T>",
      "desc": "Creates a Sequence instance that wraps the original collection returning its elements when being iterated."
    },
    {
      "text": "fun <K, V> Map<out K, V>.asSequence(): Sequence<Entry<K, V>>",
      "desc": "Creates a Sequence instance that wraps the original map returning its entries when being iterated."
    },
    {
      "text": "fun UShortArray.asShortArray(): ShortArray",
      "desc": "Returns an array of type ShortArray, which is a view of this array where each element is a signed reinterpretation of the corresponding element of this array."
    },
    {
      "text": "fun <T, K, V> any_array<T>.associate( transform: (T) -> Pair<K, V>): Map<K, V>",
      "desc": "Returns a Map containing key-value pairs provided by transform function applied to elements of the given array."
    },
    {
      "text": "fun <T, K, V> Iterable<T>.associate( transform: (T) -> Pair<K, V>): Map<K, V>",
      "desc": "Returns a Map containing key-value pairs provided by transform function applied to elements of the given collection."
    },
    {
      "text": "fun <T, K> any_array<T>.associateBy( keySelector: (T) -> K): Map<K, T>",
      "desc": "Returns a Map containing the elements from the given array indexed by the key returned from keySelector function applied to each element."
    },
    {
      "text": "fun <T, K, V> any_array<T>.associateBy( keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V>",
      "desc": "Returns a Map containing the values provided by valueTransform and indexed by keySelector functions applied to elements of the given array."
    },
    {
      "text": "fun <T, K> Iterable<T>.associateBy( keySelector: (T) -> K): Map<K, T>",
      "desc": "Returns a Map containing the elements from the given collection indexed by the key returned from keySelector function applied to each element."
    },
    {
      "text": "fun <T, K, V> Iterable<T>.associateBy( keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V>",
      "desc": "Returns a Map containing the values provided by valueTransform and indexed by keySelector functions applied to elements of the given collection."
    },
    {
      "text": "fun <T, K, M : MutableMap<in K, in T>> any_array<T>.associateByTo( destination: M, keySelector: (T) -> K): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs, where key is provided by the keySelector function applied to each element of the given array and value is the element itself."
    },
    {
      "text": "fun <T, K, V, M : MutableMap<in K, in V>> any_array<T>.associateByTo( destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs, where key is provided by the keySelector function and and value is provided by the valueTransform function applied to elements of the given array."
    },
    {
      "text": "fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo( destination: M, keySelector: (T) -> K): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs, where key is provided by the keySelector function applied to each element of the given collection and value is the element itself."
    },
    {
      "text": "fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo( destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs, where key is provided by the keySelector function and and value is provided by the valueTransform function applied to elements of the given collection."
    },
    {
      "text": "fun <T, K, V, M : MutableMap<in K, in V>> any_array<T>.associateTo( destination: M, transform: (T) -> Pair<K, V>): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs provided by transform function applied to each element of the given array."
    },
    {
      "text": "fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo( destination: M, transform: (T) -> Pair<K, V>): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs provided by transform function applied to each element of the given collection."
    },
    {
      "text": "fun <K, V> Array<out K>.associateWith( valueSelector: (K) -> V): Map<K, V>",
      "desc": "Returns a Map where keys are elements from the given array and values are produced by the valueSelector function applied to each element."
    },
    {
      "text": "fun <K, V> Iterable<K>.associateWith( valueSelector: (K) -> V): Map<K, V>",
      "desc": "Returns a Map where keys are elements from the given collection and values are produced by the valueSelector function applied to each element."
    },
    {
      "text": "fun <K, V, M : MutableMap<in K, in V>> Array<out K>.associateWithTo( destination: M, valueSelector: (K) -> V): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs for each element of the given array, where key is the element itself and value is provided by the valueSelector function applied to that key."
    },
    {
      "text": "fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo( destination: M, valueSelector: (K) -> V): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs for each element of the given collection, where key is the element itself and value is provided by the valueSelector function applied to that key."
    },
    {
      "text": "fun ByteArray.asUByteArray(): UByteArray",
      "desc": "Returns an array of type UByteArray, which is a view of this array where each element is an unsigned reinterpretation of the corresponding element of this array."
    },
    {
      "text": "fun IntArray.asUIntArray(): UIntArray",
      "desc": "Returns an array of type UIntArray, which is a view of this array where each element is an unsigned reinterpretation of the corresponding element of this array."
    },
    {
      "text": "fun LongArray.asULongArray(): ULongArray",
      "desc": "Returns an array of type ULongArray, which is a view of this array where each element is an unsigned reinterpretation of the corresponding element of this array."
    },
    {
      "text": "fun ShortArray.asUShortArray(): UShortArray",
      "desc": "Returns an array of type UShortArray, which is a view of this array where each element is an unsigned reinterpretation of the corresponding element of this array."
    },
    {
      "text": "fun Array<out Byte>.average(): Double",
      "desc": "Returns an average value of elements in the array."
    },
    {
      "text": "fun Iterable<Byte>.average(): Double",
      "desc": "Returns an average value of elements in the collection."
    },
    {
      "text": "fun <T : Comparable<T>> List<T?>.binarySearch( element: T?, fromIndex: Int = 0, toIndex: Int = size): Int",
      "desc": "Searches this list or its range for the provided element using the binary search algorithm. The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements, otherwise the result is undefined."
    },
    {
      "text": "fun <T> List<T>.binarySearch( element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int",
      "desc": "Searches this list or its range for the provided element using the binary search algorithm. The list is expected to be sorted into ascending order according to the specified comparator, otherwise the result is undefined."
    },
    {
      "text": "fun <T> List<T>.binarySearch( fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int",
      "desc": "Searches this list or its range for an element for which the given comparison function returns zero using the binary search algorithm."
    },
    {
      "text": "fun <T> Array<out T>.binarySearch( element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int",
      "desc": "Searches the array or the range of the array for the provided element using the binary search algorithm. The array is expected to be sorted according to the specified comparator, otherwise the result is undefined."
    },
    {
      "text": "fun <T> Array<out T>.binarySearch( element: T, fromIndex: Int = 0, toIndex: Int = size): Int",
      "desc": "Searches the array or the range of the array for the provided element using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined."
    },
    {
      "text": "fun <T, K : Comparable<K>> List<T>.binarySearchBy( key: K?, fromIndex: Int = 0, toIndex: Int = size, selector: (T) -> K?): Int",
      "desc": "Searches this list or its range for an element having the key returned by the specified selector function equal to the provided key value using the binary search algorithm. The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements. otherwise the result is undefined."
    },
    {
      "text": "fun <E> buildList( builderAction: MutableList<E>.() -> Unit): List<E>",
      "desc": "Builds a new read-only List by populating a MutableList using the given builderAction and returning a read-only list with the same elements."
    },
    {
      "text": "fun <K, V> buildMap( builderAction: MutableMap<K, V>.() -> Unit): Map<K, V>",
      "desc": "Builds a new read-only Map by populating a MutableMap using the given builderAction and returning a read-only map with the same key-value pairs."
    },
    {
      "text": "fun <E> buildSet( builderAction: MutableSet<E>.() -> Unit): Set<E>",
      "desc": "Builds a new read-only Set by populating a MutableSet using the given builderAction and returning a read-only set with the same elements."
    },
    {
      "text": "fun <T> Iterable<T>.chunked(size: Int): List<List<T>>",
      "desc": "Splits this collection into a list of lists each not exceeding the given size."
    },
    {
      "text": "fun <T, R> Iterable<T>.chunked( size: Int, transform: (List<T>) -> R): List<R>",
      "desc": "Splits this collection into several lists each not exceeding the given size and applies the given transform function to an each."
    },
    {
      "text": "operator fun <T> Array<out T>.component1(): T",
      "desc": "Returns 1st element from the array."
    },
    {
      "text": "operator fun <T> List<T>.component1(): T",
      "desc": "Returns 1st element from the list."
    },
    {
      "text": "operator fun <K, V> Entry<K, V>.component1(): K",
      "desc": "Returns the key component of the map entry."
    },
    {
      "text": "operator fun <T> Array<out T>.component2(): T",
      "desc": "Returns 2nd element from the array."
    },
    {
      "text": "operator fun <T> List<T>.component2(): T",
      "desc": "Returns 2nd element from the list."
    },
    {
      "text": "operator fun <K, V> Entry<K, V>.component2(): V",
      "desc": "Returns the value component of the map entry."
    },
    {
      "text": "operator fun <T> Array<out T>.component3(): T",
      "desc": "Returns 3rd element from the array."
    },
    {
      "text": "operator fun <T> List<T>.component3(): T",
      "desc": "Returns 3rd element from the list."
    },
    {
      "text": "operator fun <T> Array<out T>.component4(): T",
      "desc": "Returns 4th element from the array."
    },
    {
      "text": "operator fun <T> List<T>.component4(): T",
      "desc": "Returns 4th element from the list."
    },
    {
      "text": "operator fun <T> Array<out T>.component5(): T",
      "desc": "Returns 5th element from the array."
    },
    {
      "text": "operator fun <T> List<T>.component5(): T",
      "desc": "Returns 5th element from the list."
    },
    {
      "text": "operator fun <T> any_array<T>.contains(element: T): Boolean",
      "desc": "Returns true if element is found in the array."
    },
    {
      "text": "operator fun <T> Iterable<T>.contains(element: T): Boolean",
      "desc": "Returns true if element is found in the collection."
    },
    {
      "text": "operator fun <K, V> Map<out K, V>.contains(key: K): Boolean",
      "desc": "Checks if the map contains the given key."
    },
    {
      "text": "fun <T> Collection<T>.containsAll( elements: Collection<T>): Boolean",
      "desc": "Checks if all elements in the specified collection are contained in this collection."
    },
    {
      "text": "fun <K> Map<out K, *>.containsKey(key: K): Boolean",
      "desc": "Returns true if the map contains the specified key."
    },
    {
      "text": "fun <K, V> Map<K, V>.containsValue(value: V): Boolean",
      "desc": "Returns true if the map maps one or more keys to the specified value."
    },
    {
      "text": "infix fun <T> any_array<T>.contentDeepEquals( other: Array<out T>): Boolean",
      "desc": "Returns true if the two specified arrays are deeply equal to one another, i.e. contain the same number of the same elements in the same order."
    },
    {
      "text": "fun <T> any_array<T>.contentDeepHashCode(): Int",
      "desc": "Returns a hash code based on the contents of this array as if it is List. Nested arrays are treated as lists too."
    },
    {
      "text": "fun <T> any_array<T>.contentDeepToString(): String",
      "desc": "Returns a string representation of the contents of this array as if it is a List. Nested arrays are treated as lists too."
    },
    {
      "text": "infix fun UIntArray.contentEquals(other: UIntArray): Boolean",
      "desc": "Returns true if the two specified arrays are structurally equal to one another, i.e. contain the same number of the same elements in the same order."
    },
    {
      "text": "fun UIntArray.contentHashCode(): Int",
      "desc": "Returns a hash code based on the contents of this array as if it is List."
    },
    {
      "text": "fun UIntArray.contentToString(): String",
      "desc": "Returns a string representation of the contents of the specified array as if it is List."
    },
    {
      "text": "fun UIntArray.copyInto( destination: UIntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): UIntArray",
      "desc": "Copies this array or its subrange into the destination array and returns that array."
    },
    {
      "text": "fun UIntArray.copyOf(): UIntArray",
      "desc": "Returns new array which is a copy of the original array."
    },
    {
      "text": "fun UIntArray.copyOf(newSize: Int): UIntArray",
      "desc": "Returns new array which is a copy of the original array, resized to the given newSize. The copy is either truncated or padded at the end with zero values if necessary."
    },
    {
      "text": "fun BooleanArray.copyOf(newSize: Int): BooleanArray",
      "desc": "Returns new array which is a copy of the original array, resized to the given newSize. The copy is either truncated or padded at the end with false values if necessary."
    },
    {
      "text": "fun CharArray.copyOf(newSize: Int): CharArray",
      "desc": "Returns new array which is a copy of the original array, resized to the given newSize. The copy is either truncated or padded at the end with null char (\\u0000) values if necessary."
    },
    {
      "text": "fun <T> any_array<T>.copyOf(newSize: Int): Array<T?>",
      "desc": "Returns new array which is a copy of the original array, resized to the given newSize. The copy is either truncated or padded at the end with null values if necessary."
    },
    {
      "text": "fun UIntArray.copyOfRange( fromIndex: Int, toIndex: Int): UIntArray",
      "desc": "Returns a new array which is a copy of the specified range of the original array."
    },
    {
      "text": "fun <T> any_array<T>.count(): Int",
      "desc": "Returns the number of elements in this array."
    },
    {
      "text": "fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int",
      "desc": "Returns the number of elements matching the given predicate."
    },
    {
      "text": "fun <T> Iterable<T>.count(): Int",
      "desc": "Returns the number of elements in this collection."
    },
    {
      "text": "fun <K, V> Map<out K, V>.count(): Int",
      "desc": "Returns the number of entries in this map."
    },
    {
      "text": "fun <K, V> Map<out K, V>.count( predicate: (Entry<K, V>) -> Boolean): Int",
      "desc": "Returns the number of entries matching the given predicate."
    },
    {
      "text": "fun <T> any_array<T>.distinct(): List<T>",
      "desc": "Returns a list containing only distinct elements from the given array."
    },
    {
      "text": "fun <T> Iterable<T>.distinct(): List<T>",
      "desc": "Returns a list containing only distinct elements from the given collection."
    },
    {
      "text": "fun <T, K> any_array<T>.distinctBy( selector: (T) -> K): List<T>",
      "desc": "Returns a list containing only elements from the given array having distinct keys returned by the given selector function."
    },
    {
      "text": "fun <T, K> Iterable<T>.distinctBy( selector: (T) -> K): List<T>",
      "desc": "Returns a list containing only elements from the given collection having distinct keys returned by the given selector function."
    },
    {
      "text": "fun <T> Array<out T>.drop(n: Int): List<T>",
      "desc": "Returns a list containing all elements except first n elements."
    },
    {
      "text": "fun <T> Array<out T>.dropLast(n: Int): List<T>",
      "desc": "Returns a list containing all elements except last n elements."
    },
    {
      "text": "fun <T> Array<out T>.dropLastWhile( predicate: (T) -> Boolean): List<T>",
      "desc": "Returns a list containing all elements except last elements that satisfy the given predicate."
    },
    {
      "text": "fun <T> Array<out T>.dropWhile( predicate: (T) -> Boolean): List<T>",
      "desc": "Returns a list containing all elements except first elements that satisfy the given predicate."
    },
    {
      "text": "fun <T, K> Grouping<T, K>.eachCount(): Map<K, Int>",
      "desc": "Groups elements from the Grouping source by key and counts elements in each group."
    },
    {
      "text": "fun <T, K, M : MutableMap<in K, Int>> Grouping<T, K>.eachCountTo( destination: M): M",
      "desc": "Groups elements from the Grouping source by key and counts elements in each group to the given destination map."
    },
    {
      "text": "fun <T> Iterable<T>.elementAt(index: Int): T",
      "desc": "Returns an element at the given index or throws an IndexOutOfBoundsException if the index is out of bounds of this collection."
    },
    {
      "text": "fun <T> List<T>.elementAt(index: Int): T",
      "desc": "Returns an element at the given index or throws an IndexOutOfBoundsException if the index is out of bounds of this list."
    },
    {
      "text": "fun <T> Array<out T>.elementAt(index: Int): T",
      "desc": "Returns an element at the given index or throws an IndexOutOfBoundsException if the index is out of bounds of this array."
    },
    {
      "text": "fun <T> Array<out T>.elementAtOrElse( index: Int, defaultValue: (Int) -> T): T",
      "desc": "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
    },
    {
      "text": "fun <T> Iterable<T>.elementAtOrElse( index: Int, defaultValue: (Int) -> T): T",
      "desc": "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this collection."
    },
    {
      "text": "fun <T> List<T>.elementAtOrElse( index: Int, defaultValue: (Int) -> T): T",
      "desc": "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this list."
    },
    {
      "text": "fun <T> Array<out T>.elementAtOrNull(index: Int): T?",
      "desc": "Returns an element at the given index or null if the index is out of bounds of this array."
    },
    {
      "text": "fun <T> Iterable<T>.elementAtOrNull(index: Int): T?",
      "desc": "Returns an element at the given index or null if the index is out of bounds of this collection."
    },
    {
      "text": "fun <T> List<T>.elementAtOrNull(index: Int): T?",
      "desc": "Returns an element at the given index or null if the index is out of bounds of this list."
    },
    {
      "text": "fun <T> emptyList(): List<T>",
      "desc": "Returns an empty read-only list. The returned list is serializable (JVM)."
    },
    {
      "text": "fun <K, V> emptyMap(): Map<K, V>",
      "desc": "Returns an empty read-only map of specified type."
    },
    {
      "text": "fun <T> emptySet(): Set<T>",
      "desc": "Returns an empty read-only set. The returned set is serializable (JVM)."
    },
    {
      "text": "fun UIntArray.fill( element: UInt, fromIndex: Int = 0, toIndex: Int = size)",
      "desc": "Fills this array or its subrange with the specified element value."
    },
    {
      "text": "fun <T> MutableList<T>.fill(value: T)",
      "desc": "Fills the list with the provided value."
    },
    {
      "text": "fun <T> Array<out T>.filter( predicate: (T) -> Boolean): List<T>",
      "desc": "Returns a list containing only elements matching the given predicate."
    },
    {
      "text": "fun <K, V> Map<out K, V>.filter( predicate: (Entry<K, V>) -> Boolean): Map<K, V>",
      "desc": "Returns a new map containing all key-value pairs matching the given predicate."
    },
    {
      "text": "fun <T> Array<out T>.filterIndexed( predicate: (index: Int, T) -> Boolean): List<T>",
      "desc": "Returns a list containing only elements matching the given predicate."
    },
    {
      "text": "fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo( destination: C, predicate: (index: Int, T) -> Boolean): C",
      "desc": "Appends all elements matching the given predicate to the given destination."
    },
    {
      "text": "fun <R> Array<*>.filterIsInstance(): List<R>",
      "desc": "Returns a list containing all elements that are instances of specified type parameter R."
    },
    {
      "text": "fun <R> Array<*>.filterIsInstance(klass: Class<R>): List<R>",
      "desc": "Returns a list containing all elements that are instances of specified class."
    },
    {
      "text": "fun <R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo( destination: C): C",
      "desc": "Appends all elements that are instances of specified type parameter R to the given destination."
    },
    {
      "text": "fun <C : MutableCollection<in R>, R> Array<*>.filterIsInstanceTo( destination: C, klass: Class<R>): C",
      "desc": "Appends all elements that are instances of specified class to the given destination."
    },
    {
      "text": "fun <K, V> Map<out K, V>.filterKeys( predicate: (K) -> Boolean): Map<K, V>",
      "desc": "Returns a map containing all key-value pairs with keys matching the given predicate."
    },
    {
      "text": "fun <T> Array<out T>.filterNot( predicate: (T) -> Boolean): List<T>",
      "desc": "Returns a list containing all elements not matching the given predicate."
    },
    {
      "text": "fun <K, V> Map<out K, V>.filterNot( predicate: (Entry<K, V>) -> Boolean): Map<K, V>",
      "desc": "Returns a new map containing all key-value pairs not matching the given predicate."
    },
    {
      "text": "fun <T : Any> Array<out T?>.filterNotNull(): List<T>",
      "desc": "Returns a list containing all elements that are not null."
    },
    {
      "text": "fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo( destination: C): C",
      "desc": "Appends all elements that are not null to the given destination."
    },
    {
      "text": "fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo( destination: C, predicate: (T) -> Boolean): C",
      "desc": "Appends all elements not matching the given predicate to the given destination."
    },
    {
      "text": "fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo( destination: M, predicate: (Entry<K, V>) -> Boolean): M",
      "desc": "Appends all entries not matching the given predicate into the given destination."
    },
    {
      "text": "fun <T, C : MutableCollection<in T>> Array<out T>.filterTo( destination: C, predicate: (T) -> Boolean): C",
      "desc": "Appends all elements matching the given predicate to the given destination."
    },
    {
      "text": "fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo( destination: M, predicate: (Entry<K, V>) -> Boolean): M",
      "desc": "Appends all entries matching the given predicate into the mutable map given as destination parameter."
    },
    {
      "text": "fun <K, V> Map<out K, V>.filterValues( predicate: (V) -> Boolean): Map<K, V>",
      "desc": "Returns a map containing all key-value pairs with values matching the given predicate."
    },
    {
      "text": "fun <T> Array<out T>.find(predicate: (T) -> Boolean): T?",
      "desc": "Returns the first element matching the given predicate, or null if no such element was found."
    },
    {
      "text": "fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T?",
      "desc": "Returns the last element matching the given predicate, or null if no such element was found."
    },
    {
      "text": "fun <T> Array<out T>.first(): T",
      "desc": "Returns first element."
    },
    {
      "text": "fun <T> Array<out T>.first(predicate: (T) -> Boolean): T",
      "desc": "Returns the first element matching the given predicate."
    },
    {
      "text": "fun <T, R : Any> Array<out T>.firstNotNullOf( transform: (T) -> R?): R",
      "desc": "Returns the first non-null value produced by transform function being applied to elements of this array in iteration order, or throws NoSuchElementException if no non-null value was produced."
    },
    {
      "text": "fun <T, R : Any> Iterable<T>.firstNotNullOf( transform: (T) -> R?): R",
      "desc": "Returns the first non-null value produced by transform function being applied to elements of this collection in iteration order, or throws NoSuchElementException if no non-null value was produced."
    },
    {
      "text": "fun <K, V, R : Any> Map<out K, V>.firstNotNullOf( transform: (Entry<K, V>) -> R?): R",
      "desc": "Returns the first non-null value produced by transform function being applied to entries of this map in iteration order, or throws NoSuchElementException if no non-null value was produced."
    },
    {
      "text": "fun <T, R : Any> Array<out T>.firstNotNullOfOrNull( transform: (T) -> R?): R?",
      "desc": "Returns the first non-null value produced by transform function being applied to elements of this array in iteration order, or null if no non-null value was produced."
    },
    {
      "text": "fun <T, R : Any> Iterable<T>.firstNotNullOfOrNull( transform: (T) -> R?): R?",
      "desc": "Returns the first non-null value produced by transform function being applied to elements of this collection in iteration order, or null if no non-null value was produced."
    },
    {
      "text": "fun <K, V, R : Any> Map<out K, V>.firstNotNullOfOrNull( transform: (Entry<K, V>) -> R?): R?",
      "desc": "Returns the first non-null value produced by transform function being applied to entries of this map in iteration order, or null if no non-null value was produced."
    },
    {
      "text": "fun <T> Array<out T>.firstOrNull(): T?",
      "desc": "Returns the first element, or null if the array is empty."
    },
    {
      "text": "fun <T> Array<out T>.firstOrNull( predicate: (T) -> Boolean): T?",
      "desc": "Returns the first element matching the given predicate, or null if element was not found."
    },
    {
      "text": "fun <T> Iterable<T>.firstOrNull(): T?",
      "desc": "Returns the first element, or null if the collection is empty."
    },
    {
      "text": "fun <T> List<T>.firstOrNull(): T?",
      "desc": "Returns the first element, or null if the list is empty."
    },
    {
      "text": "fun <T, R> Array<out T>.flatMap( transform: (T) -> Iterable<R>): List<R>",
      "desc": "Returns a single list of all elements yielded from results of transform function being invoked on each element of original array."
    },
    {
      "text": "fun <T, R> Iterable<T>.flatMap( transform: (T) -> Iterable<R>): List<R>",
      "desc": "Returns a single list of all elements yielded from results of transform function being invoked on each element of original collection."
    },
    {
      "text": "fun <K, V, R> Map<out K, V>.flatMap( transform: (Entry<K, V>) -> Iterable<R>): List<R>",
      "desc": "Returns a single list of all elements yielded from results of transform function being invoked on each entry of original map."
    },
    {
      "text": "fun <T, R> Array<out T>.flatMapIndexed( transform: (index: Int, T) -> Iterable<R>): List<R>",
      "desc": "Returns a single list of all elements yielded from results of transform function being invoked on each element and its index in the original array."
    },
    {
      "text": "fun <T, R> Iterable<T>.flatMapIndexed( transform: (index: Int, T) -> Iterable<R>): List<R>",
      "desc": "Returns a single list of all elements yielded from results of transform function being invoked on each element and its index in the original collection."
    },
    {
      "text": "fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapIndexedTo( destination: C, transform: (index: Int, T) -> Iterable<R>): C",
      "desc": "Appends all elements yielded from results of transform function being invoked on each element and its index in the original array, to the given destination."
    },
    {
      "text": "fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo( destination: C, transform: (index: Int, T) -> Iterable<R>): C",
      "desc": "Appends all elements yielded from results of transform function being invoked on each element and its index in the original collection, to the given destination."
    },
    {
      "text": "fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo( destination: C, transform: (T) -> Iterable<R>): C",
      "desc": "Appends all elements yielded from results of transform function being invoked on each element of original array, to the given destination."
    },
    {
      "text": "fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo( destination: C, transform: (T) -> Iterable<R>): C",
      "desc": "Appends all elements yielded from results of transform function being invoked on each element of original collection, to the given destination."
    },
    {
      "text": "fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.flatMapTo( destination: C, transform: (Entry<K, V>) -> Iterable<R>): C",
      "desc": "Appends all elements yielded from results of transform function being invoked on each entry of original map, to the given destination."
    },
    {
      "text": "fun <T> Array<out Array<out T>>.flatten(): List<T>",
      "desc": "Returns a single list of all elements from all arrays in the given array."
    },
    {
      "text": "fun <T> Iterable<Iterable<T>>.flatten(): List<T>",
      "desc": "Returns a single list of all elements from all collections in the given collection."
    },
    {
      "text": "fun <T, R> Array<out T>.fold( initial: R, operation: (acc: R, T) -> R): R",
      "desc": "Accumulates value starting with initial value and applying operation from left to right to current accumulator value and each element."
    },
    {
      "text": "fun <T, K, R> Grouping<T, K>.fold( initialValueSelector: (key: K, element: T) -> R, operation: (key: K, accumulator: R, element: T) -> R): Map<K, R>",
      "desc": "Groups elements from the Grouping source by key and applies operation to the elements of each group sequentially, passing the previously accumulated value and the current element as arguments, and stores the results in a new map. An initial value of accumulator is provided by initialValueSelector function."
    },
    {
      "text": "fun <T, K, R> Grouping<T, K>.fold( initialValue: R, operation: (accumulator: R, element: T) -> R): Map<K, R>",
      "desc": "Groups elements from the Grouping source by key and applies operation to the elements of each group sequentially, passing the previously accumulated value and the current element as arguments, and stores the results in a new map. An initial value of accumulator is the same initialValue for each group."
    },
    {
      "text": "fun <T, R> Array<out T>.foldIndexed( initial: R, operation: (index: Int, acc: R, T) -> R): R",
      "desc": "Accumulates value starting with initial value and applying operation from left to right to current accumulator value and each element with its index in the original array."
    },
    {
      "text": "fun <T, R> Iterable<T>.foldIndexed( initial: R, operation: (index: Int, acc: R, T) -> R): R",
      "desc": "Accumulates value starting with initial value and applying operation from left to right to current accumulator value and each element with its index in the original collection."
    },
    {
      "text": "fun <T, R> Array<out T>.foldRight( initial: R, operation: (T, acc: R) -> R): R",
      "desc": "Accumulates value starting with initial value and applying operation from right to left to each element and current accumulator value."
    },
    {
      "text": "fun <T, R> Array<out T>.foldRightIndexed( initial: R, operation: (index: Int, T, acc: R) -> R): R",
      "desc": "Accumulates value starting with initial value and applying operation from right to left to each element with its index in the original array and current accumulator value."
    },
    {
      "text": "fun <T, R> List<T>.foldRightIndexed( initial: R, operation: (index: Int, T, acc: R) -> R): R",
      "desc": "Accumulates value starting with initial value and applying operation from right to left to each element with its index in the original list and current accumulator value."
    },
    {
      "text": "fun <T, K, R, M : MutableMap<in K, R>> Grouping<T, K>.foldTo( destination: M, initialValueSelector: (key: K, element: T) -> R, operation: (key: K, accumulator: R, element: T) -> R): M",
      "desc": "Groups elements from the Grouping source by key and applies operation to the elements of each group sequentially, passing the previously accumulated value and the current element as arguments, and stores the results in the given destination map. An initial value of accumulator is provided by initialValueSelector function."
    },
    {
      "text": "fun <T, K, R, M : MutableMap<in K, R>> Grouping<T, K>.foldTo( destination: M, initialValue: R, operation: (accumulator: R, element: T) -> R): M",
      "desc": "Groups elements from the Grouping source by key and applies operation to the elements of each group sequentially, passing the previously accumulated value and the current element as arguments, and stores the results in the given destination map. An initial value of accumulator is the same initialValue for each group."
    },
    {
      "text": "fun <T> Array<out T>.forEach(action: (T) -> Unit)",
      "desc": "Performs the given action on each element."
    },
    {
      "text": "fun <K, V> Map<out K, V>.forEach( action: (Entry<K, V>) -> Unit)",
      "desc": "Performs the given action on each entry."
    },
    {
      "text": "fun <T> Iterator<T>.forEach(operation: (T) -> Unit)",
      "desc": "Performs the given operation on each element of this Iterator."
    },
    {
      "text": "fun <T> Array<out T>.forEachIndexed( action: (index: Int, T) -> Unit)",
      "desc": "Performs the given action on each element, providing sequential index with the element."
    },
    {
      "text": "operator fun <K, V> Map<out K, V>.get(key: K): V?",
      "desc": "Returns the value corresponding to the given key, or null if such a key is not present in the map."
    },
    {
      "text": "fun <K, V> Map<out K, V>.getOrDefault( key: K, defaultValue: V): V",
      "desc": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key."
    },
    {
      "text": "fun <T> Array<out T>.getOrElse( index: Int, defaultValue: (Int) -> T): T",
      "desc": "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
    },
    {
      "text": "fun <T> List<T>.getOrElse( index: Int, defaultValue: (Int) -> T): T",
      "desc": "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this list."
    },
    {
      "text": "fun <K, V> Map<K, V>.getOrElse( key: K, defaultValue: () -> V): V",
      "desc": "Returns the value for the given key, or the result of the defaultValue function if there was no entry for the given key."
    },
    {
      "text": "fun <T> Array<out T>.getOrNull(index: Int): T?",
      "desc": "Returns an element at the given index or null if the index is out of bounds of this array."
    },
    {
      "text": "fun <T> List<T>.getOrNull(index: Int): T?",
      "desc": "Returns an element at the given index or null if the index is out of bounds of this list."
    },
    {
      "text": "fun <K, V> MutableMap<K, V>.getOrPut( key: K, defaultValue: () -> V): V",
      "desc": "Returns the value for the given key. If the key is not found in the map, calls the defaultValue function, puts its result into the map under the given key and returns it."
    },
    {
      "text": "operator fun <V, V1 : V> Map<in String, V>.getValue( thisRef: Any?, property: KProperty<*>): V1",
      "desc": "Returns the value of the property for the given object from this read-only map."
    },
    {
      "text": "operator fun <V, V1 : V> MutableMap<in String, out V>.getValue( thisRef: Any?, property: KProperty<*>): V1",
      "desc": "Returns the value of the property for the given object from this mutable map."
    },
    {
      "text": "fun <K, V> Map<K, V>.getValue(key: K): V",
      "desc": "Returns the value for the given key or throws an exception if there is no such key in the map."
    },
    {
      "text": "fun <T, K> Array<out T>.groupBy( keySelector: (T) -> K): Map<K, List<T>>",
      "desc": "Groups elements of the original array by the key returned by the given keySelector function applied to each element and returns a map where each group key is associated with a list of corresponding elements."
    },
    {
      "text": "fun <T, K, V> Array<out T>.groupBy( keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>>",
      "desc": "Groups values returned by the valueTransform function applied to each element of the original array by the key returned by the given keySelector function applied to the element and returns a map where each group key is associated with a list of corresponding values."
    },
    {
      "text": "fun <T, K> Iterable<T>.groupBy( keySelector: (T) -> K): Map<K, List<T>>",
      "desc": "Groups elements of the original collection by the key returned by the given keySelector function applied to each element and returns a map where each group key is associated with a list of corresponding elements."
    },
    {
      "text": "fun <T, K, V> Iterable<T>.groupBy( keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>>",
      "desc": "Groups values returned by the valueTransform function applied to each element of the original collection by the key returned by the given keySelector function applied to the element and returns a map where each group key is associated with a list of corresponding values."
    },
    {
      "text": "fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo( destination: M, keySelector: (T) -> K): M",
      "desc": "Groups elements of the original array by the key returned by the given keySelector function applied to each element and puts to the destination map each group key associated with a list of corresponding elements."
    },
    {
      "text": "fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo( destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M",
      "desc": "Groups values returned by the valueTransform function applied to each element of the original array by the key returned by the given keySelector function applied to the element and puts to the destination map each group key associated with a list of corresponding values."
    },
    {
      "text": "fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo( destination: M, keySelector: (T) -> K): M",
      "desc": "Groups elements of the original collection by the key returned by the given keySelector function applied to each element and puts to the destination map each group key associated with a list of corresponding elements."
    },
    {
      "text": "fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo( destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M",
      "desc": "Groups values returned by the valueTransform function applied to each element of the original collection by the key returned by the given keySelector function applied to the element and puts to the destination map each group key associated with a list of corresponding values."
    },
    {
      "text": "fun <T, K> Array<out T>.groupingBy( keySelector: (T) -> K): Grouping<T, K>",
      "desc": "Creates a Grouping source from an array to be used later with one of group-and-fold operations using the specified keySelector function to extract a key from each element."
    },
    {
      "text": "fun <T, K> Iterable<T>.groupingBy( keySelector: (T) -> K): Grouping<T, K>",
      "desc": "Creates a Grouping source from a collection to be used later with one of group-and-fold operations using the specified keySelector function to extract a key from each element."
    },
    {
      "text": "fun <K, V> hashMapOf(): HashMap<K, V>",
      "desc": "Returns an empty new HashMap."
    },
    {
      "text": "fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V>",
      "desc": "Returns a new HashMap with the specified contents, given as a list of pairs where the first component is the key and the second is the value."
    },
    {
      "text": "fun <T> hashSetOf(): HashSet<T>",
      "desc": "Returns an empty new HashSet."
    },
    {
      "text": "fun <T> hashSetOf(vararg elements: T): HashSet<T>",
      "desc": "Returns a new HashSet with the given elements."
    },
    {
      "text": "fun <C, R> C.ifEmpty( defaultValue: () -> R): R where C : Array<*>, C : R",
      "desc": "Returns this array if it's not empty or the result of calling defaultValue function if the array is empty."
    },
    {
      "text": "fun <M, R> M.ifEmpty( defaultValue: () -> R): R where M : Map<*, *>, M : R",
      "desc": "Returns this map if it's not empty or the result of calling defaultValue function if the map is empty."
    },
    {
      "text": "fun <T> Array<out T>.indexOf(element: T): Int",
      "desc": "Returns first index of element, or -1 if the array does not contain element."
    },
    {
      "text": "fun <T> Iterable<T>.indexOf(element: T): Int",
      "desc": "Returns first index of element, or -1 if the collection does not contain element."
    },
    {
      "text": "fun <T> List<T>.indexOf(element: T): Int",
      "desc": "Returns first index of element, or -1 if the list does not contain element."
    },
    {
      "text": "fun <T> Array<out T>.indexOfFirst( predicate: (T) -> Boolean): Int",
      "desc": "Returns index of the first element matching the given predicate, or -1 if the array does not contain such element."
    },
    {
      "text": "fun <T> Iterable<T>.indexOfFirst( predicate: (T) -> Boolean): Int",
      "desc": "Returns index of the first element matching the given predicate, or -1 if the collection does not contain such element."
    },
    {
      "text": "fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int",
      "desc": "Returns index of the first element matching the given predicate, or -1 if the list does not contain such element."
    },
    {
      "text": "fun <T> Array<out T>.indexOfLast( predicate: (T) -> Boolean): Int",
      "desc": "Returns index of the last element matching the given predicate, or -1 if the array does not contain such element."
    },
    {
      "text": "fun <T> Iterable<T>.indexOfLast( predicate: (T) -> Boolean): Int",
      "desc": "Returns index of the last element matching the given predicate, or -1 if the collection does not contain such element."
    },
    {
      "text": "fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int",
      "desc": "Returns index of the last element matching the given predicate, or -1 if the list does not contain such element."
    },
    {
      "text": "infix fun <T> any_array<T>.intersect( other: Iterable<T>): Set<T>",
      "desc": "Returns a set containing all elements that are contained by both this array and the specified collection."
    },
    {
      "text": "infix fun <T> Iterable<T>.intersect( other: Iterable<T>): Set<T>",
      "desc": "Returns a set containing all elements that are contained by both this collection and the specified collection."
    },
    {
      "text": "fun <T> any_array<T>.isEmpty(): Boolean",
      "desc": "Returns true if the array is empty."
    },
    {
      "text": "fun <T> any_array<T>.isNotEmpty(): Boolean",
      "desc": "Returns true if the array is not empty."
    },
    {
      "text": "fun <T> Collection<T>.isNotEmpty(): Boolean",
      "desc": "Returns true if the collection is not empty."
    },
    {
      "text": "fun <K, V> Map<out K, V>.isNotEmpty(): Boolean",
      "desc": "Returns true if this map is not empty."
    },
    {
      "text": "fun Array<*>?.isNullOrEmpty(): Boolean",
      "desc": "Returns true if this nullable array is either null or empty."
    },
    {
      "text": "fun <T> Collection<T>?.isNullOrEmpty(): Boolean",
      "desc": "Returns true if this nullable collection is either null or empty."
    },
    {
      "text": "fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean",
      "desc": "Returns true if this nullable map is either null or empty."
    },
    {
      "text": "fun <T> Iterable(iterator: () -> Iterator<T>): Iterable<T>",
      "desc": "Given an iterator function constructs an Iterable instance that returns values through the Iterator provided by that function."
    },
    {
      "text": "operator fun <T> Iterator<T>.iterator(): Iterator<T>",
      "desc": "Returns the given iterator itself. This allows to use an instance of iterator in a for loop."
    },
    {
      "text": "operator fun <K, V> Map<out K, V>.iterator(): Iterator<Entry<K, V>>",
      "desc": "Returns an Iterator over the entries in the Map."
    },
    {
      "text": "operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableEntry<K, V>>",
      "desc": "Returns a MutableIterator over the mutable entries in the MutableMap."
    },
    {
      "text": "fun <T, A : Appendable> Array<out T>.joinTo( buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A",
      "desc": "Appends the string from all the elements separated using separator and using the given prefix and postfix if supplied."
    },
    {
      "text": "fun <T> Array<out T>.joinToString( separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String",
      "desc": "Creates a string from all the elements separated using separator and using the given prefix and postfix if supplied."
    },
    {
      "text": "fun <T> Array<out T>.last(): T",
      "desc": "Returns the last element."
    },
    {
      "text": "fun <T> Array<out T>.last(predicate: (T) -> Boolean): T",
      "desc": "Returns the last element matching the given predicate."
    },
    {
      "text": "fun <T> Array<out T>.lastIndexOf(element: T): Int",
      "desc": "Returns last index of element, or -1 if the array does not contain element."
    },
    {
      "text": "fun <T> Iterable<T>.lastIndexOf(element: T): Int",
      "desc": "Returns last index of element, or -1 if the collection does not contain element."
    },
    {
      "text": "fun <T> List<T>.lastIndexOf(element: T): Int",
      "desc": "Returns last index of element, or -1 if the list does not contain element."
    },
    {
      "text": "fun <T> Array<out T>.lastOrNull(): T?",
      "desc": "Returns the last element, or null if the array is empty."
    },
    {
      "text": "fun <T> Array<out T>.lastOrNull( predicate: (T) -> Boolean): T?",
      "desc": "Returns the last element matching the given predicate, or null if no such element was found."
    },
    {
      "text": "fun <T> Iterable<T>.lastOrNull(): T?",
      "desc": "Returns the last element, or null if the collection is empty."
    },
    {
      "text": "fun <T> List<T>.lastOrNull(): T?",
      "desc": "Returns the last element, or null if the list is empty."
    },
    {
      "text": "fun <K, V> linkedMapOf(): LinkedHashMap<K, V>",
      "desc": "Returns an empty new LinkedHashMap."
    },
    {
      "text": "fun <K, V> linkedMapOf( vararg pairs: Pair<K, V>): LinkedHashMap<K, V>",
      "desc": "Returns a new LinkedHashMap with the specified contents, given as a list of pairs where the first component is the key and the second is the value."
    },
    {
      "text": "fun <T> linkedSetOf(): LinkedHashSet<T>",
      "desc": "Returns an empty new LinkedHashSet."
    },
    {
      "text": "fun <T> linkedSetOf(vararg elements: T): LinkedHashSet<T>",
      "desc": "Returns a new LinkedHashSet with the given elements. Elements of the set are iterated in the order they were specified."
    },
    {
      "text": "fun <V> linkedStringMapOf( vararg pairs: Pair<String, V>): LinkedHashMap<String, V>",
      "desc": "Constructs the specialized implementation of LinkedHashMap with String keys, which stores the keys as properties of JS object without hashing them."
    },
    {
      "text": "fun linkedStringSetOf( vararg elements: String): LinkedHashSet<String>",
      "desc": "Creates a new instance of the specialized implementation of LinkedHashSet with the specified String elements, which elements the keys as properties of JS object without hashing them."
    },
    {
      "text": "fun <T> List(size: Int, init: (index: Int) -> T): List<T>",
      "desc": "Creates a new read-only list with the specified size, where each element is calculated by calling the specified init function."
    },
    {
      "text": "fun <T> listOf(vararg elements: T): List<T>",
      "desc": "Returns a new read-only list of given elements. The returned list is serializable (JVM)."
    },
    {
      "text": "fun <T> listOf(): List<T>",
      "desc": "Returns an empty read-only list. The returned list is serializable (JVM)."
    },
    {
      "text": "fun <T> listOf(element: T): List<T>",
      "desc": "Returns an immutable list containing only the specified object element. The returned list is serializable."
    },
    {
      "text": "fun <T : Any> listOfNotNull(element: T?): List<T>",
      "desc": "Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM)."
    },
    {
      "text": "fun <T : Any> listOfNotNull(vararg elements: T?): List<T>",
      "desc": "Returns a new read-only list only of those given elements, that are not null. The returned list is serializable (JVM)."
    },
    {
      "text": "fun <T, R> Array<out T>.map(transform: (T) -> R): List<R>",
      "desc": "Returns a list containing the results of applying the given transform function to each element in the original array."
    },
    {
      "text": "fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R>",
      "desc": "Returns a list containing the results of applying the given transform function to each element in the original collection."
    },
    {
      "text": "fun <K, V, R> Map<out K, V>.map( transform: (Entry<K, V>) -> R): List<R>",
      "desc": "Returns a list containing the results of applying the given transform function to each entry in the original map."
    },
    {
      "text": "fun <T, R> Array<out T>.mapIndexed( transform: (index: Int, T) -> R): List<R>",
      "desc": "Returns a list containing the results of applying the given transform function to each element and its index in the original array."
    },
    {
      "text": "fun <T, R> Iterable<T>.mapIndexed( transform: (index: Int, T) -> R): List<R>",
      "desc": "Returns a list containing the results of applying the given transform function to each element and its index in the original collection."
    },
    {
      "text": "fun <T, R : Any> Array<out T>.mapIndexedNotNull( transform: (index: Int, T) -> R?): List<R>",
      "desc": "Returns a list containing only the non-null results of applying the given transform function to each element and its index in the original array."
    },
    {
      "text": "fun <T, R : Any> Iterable<T>.mapIndexedNotNull( transform: (index: Int, T) -> R?): List<R>",
      "desc": "Returns a list containing only the non-null results of applying the given transform function to each element and its index in the original collection."
    },
    {
      "text": "fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo( destination: C, transform: (index: Int, T) -> R?): C",
      "desc": "Applies the given transform function to each element and its index in the original array and appends only the non-null results to the given destination."
    },
    {
      "text": "fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo( destination: C, transform: (index: Int, T) -> R?): C",
      "desc": "Applies the given transform function to each element and its index in the original collection and appends only the non-null results to the given destination."
    },
    {
      "text": "fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo( destination: C, transform: (index: Int, T) -> R): C",
      "desc": "Applies the given transform function to each element and its index in the original array and appends the results to the given destination."
    },
    {
      "text": "fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo( destination: C, transform: (index: Int, T) -> R): C",
      "desc": "Applies the given transform function to each element and its index in the original collection and appends the results to the given destination."
    },
    {
      "text": "fun <K, V, R> Map<out K, V>.mapKeys( transform: (Entry<K, V>) -> R): Map<R, V>",
      "desc": "Returns a new Map with entries having the keys obtained by applying the transform function to each entry in this Map and the values of this map."
    },
    {
      "text": "fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo( destination: M, transform: (Entry<K, V>) -> R): M",
      "desc": "Populates the given destination map with entries having the keys obtained by applying the transform function to each entry in this Map and the values of this map."
    },
    {
      "text": "fun <T, R : Any> Array<out T>.mapNotNull( transform: (T) -> R?): List<R>",
      "desc": "Returns a list containing only the non-null results of applying the given transform function to each element in the original array."
    },
    {
      "text": "fun <T, R : Any> Iterable<T>.mapNotNull( transform: (T) -> R?): List<R>",
      "desc": "Returns a list containing only the non-null results of applying the given transform function to each element in the original collection."
    },
    {
      "text": "fun <K, V, R : Any> Map<out K, V>.mapNotNull( transform: (Entry<K, V>) -> R?): List<R>",
      "desc": "Returns a list containing only the non-null results of applying the given transform function to each entry in the original map."
    },
    {
      "text": "fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo( destination: C, transform: (T) -> R?): C",
      "desc": "Applies the given transform function to each element in the original array and appends only the non-null results to the given destination."
    },
    {
      "text": "fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo( destination: C, transform: (T) -> R?): C",
      "desc": "Applies the given transform function to each element in the original collection and appends only the non-null results to the given destination."
    },
    {
      "text": "fun <K, V, R : Any, C : MutableCollection<in R>> Map<out K, V>.mapNotNullTo( destination: C, transform: (Entry<K, V>) -> R?): C",
      "desc": "Applies the given transform function to each entry in the original map and appends only the non-null results to the given destination."
    },
    {
      "text": "fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V>",
      "desc": "Returns a new read-only map with the specified contents, given as a list of pairs where the first value is the key and the second is the value."
    },
    {
      "text": "fun <K, V> mapOf(): Map<K, V>",
      "desc": "Returns an empty read-only map."
    },
    {
      "text": "fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V>",
      "desc": "Returns an immutable map, mapping only the specified key to the specified value."
    },
    {
      "text": "fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo( destination: C, transform: (T) -> R): C",
      "desc": "Applies the given transform function to each element of the original array and appends the results to the given destination."
    },
    {
      "text": "fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo( destination: C, transform: (T) -> R): C",
      "desc": "Applies the given transform function to each element of the original collection and appends the results to the given destination."
    },
    {
      "text": "fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.mapTo( destination: C, transform: (Entry<K, V>) -> R): C",
      "desc": "Applies the given transform function to each entry of the original map and appends the results to the given destination."
    },
    {
      "text": "fun <K, V, R> Map<out K, V>.mapValues( transform: (Entry<K, V>) -> R): Map<K, R>",
      "desc": "Returns a new map with entries having the keys of this map and the values obtained by applying the transform function to each entry in this Map."
    },
    {
      "text": "fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo( destination: M, transform: (Entry<K, V>) -> R): M",
      "desc": "Populates the given destination map with entries having the keys of this map and the values obtained by applying the transform function to each entry in this Map."
    },
    {
      "text": "fun Array<out Double>.max(): Double?"
    },
    {
      "text": "fun <T, R : Comparable<R>> Array<out T>.maxBy( selector: (T) -> R): T?"
    },
    {
      "text": "fun <T, R : Comparable<R>> Array<out T>.maxByOrNull( selector: (T) -> R): T?",
      "desc": "Returns the first element yielding the largest value of the given function or null if there are no elements."
    },
    {
      "text": "fun <K, V, R : Comparable<R>> Map<out K, V>.maxByOrNull( selector: (Entry<K, V>) -> R): Entry<K, V>?",
      "desc": "Returns the first entry yielding the largest value of the given function or null if there are no entries."
    },
    {
      "text": "fun <T> Array<out T>.maxOf(selector: (T) -> Double): Double",
      "desc": "Returns the largest value among all values produced by selector function applied to each element in the array."
    },
    {
      "text": "fun <T> Iterable<T>.maxOf(selector: (T) -> Double): Double",
      "desc": "Returns the largest value among all values produced by selector function applied to each element in the collection."
    },
    {
      "text": "fun <K, V> Map<out K, V>.maxOf( selector: (Entry<K, V>) -> Double): Double",
      "desc": "Returns the largest value among all values produced by selector function applied to each entry in the map."
    },
    {
      "text": "fun <T> Array<out T>.maxOfOrNull( selector: (T) -> Double): Double?",
      "desc": "Returns the largest value among all values produced by selector function applied to each element in the array or null if there are no elements."
    },
    {
      "text": "fun <T> Iterable<T>.maxOfOrNull( selector: (T) -> Double): Double?",
      "desc": "Returns the largest value among all values produced by selector function applied to each element in the collection or null if there are no elements."
    },
    {
      "text": "fun <K, V> Map<out K, V>.maxOfOrNull( selector: (Entry<K, V>) -> Double): Double?",
      "desc": "Returns the largest value among all values produced by selector function applied to each entry in the map or null if there are no entries."
    },
    {
      "text": "fun <T, R> Array<out T>.maxOfWith( comparator: Comparator<in R>, selector: (T) -> R): R",
      "desc": "Returns the largest value according to the provided comparator among all values produced by selector function applied to each element in the array."
    },
    {
      "text": "fun <T, R> Iterable<T>.maxOfWith( comparator: Comparator<in R>, selector: (T) -> R): R",
      "desc": "Returns the largest value according to the provided comparator among all values produced by selector function applied to each element in the collection."
    },
    {
      "text": "fun <K, V, R> Map<out K, V>.maxOfWith( comparator: Comparator<in R>, selector: (Entry<K, V>) -> R): R",
      "desc": "Returns the largest value according to the provided comparator among all values produced by selector function applied to each entry in the map."
    },
    {
      "text": "fun <T, R> Array<out T>.maxOfWithOrNull( comparator: Comparator<in R>, selector: (T) -> R): R?",
      "desc": "Returns the largest value according to the provided comparator among all values produced by selector function applied to each element in the array or null if there are no elements."
    },
    {
      "text": "fun <T, R> Iterable<T>.maxOfWithOrNull( comparator: Comparator<in R>, selector: (T) -> R): R?",
      "desc": "Returns the largest value according to the provided comparator among all values produced by selector function applied to each element in the collection or null if there are no elements."
    },
    {
      "text": "fun <K, V, R> Map<out K, V>.maxOfWithOrNull( comparator: Comparator<in R>, selector: (Entry<K, V>) -> R): R?",
      "desc": "Returns the largest value according to the provided comparator among all values produced by selector function applied to each entry in the map or null if there are no entries."
    },
    {
      "text": "fun Array<out Double>.maxOrNull(): Double?",
      "desc": "Returns the largest element or null if there are no elements."
    },
    {
      "text": "fun <T> Array<out T>.maxWith( comparator: Comparator<in T>): T?"
    },
    {
      "text": "fun <T> Array<out T>.maxWithOrNull( comparator: Comparator<in T>): T?",
      "desc": "Returns the first element having the largest value according to the provided comparator or null if there are no elements."
    },
    {
      "text": "fun <K, V> Map<out K, V>.maxWithOrNull( comparator: Comparator<in Entry<K, V>>): Entry<K, V>?",
      "desc": "Returns the first entry having the largest value according to the provided comparator or null if there are no entries."
    },
    {
      "text": "fun Array<out Double>.min(): Double?"
    },
    {
      "text": "fun <T, R : Comparable<R>> Array<out T>.minBy( selector: (T) -> R): T?"
    },
    {
      "text": "fun <T, R : Comparable<R>> Array<out T>.minByOrNull( selector: (T) -> R): T?",
      "desc": "Returns the first element yielding the smallest value of the given function or null if there are no elements."
    },
    {
      "text": "fun <K, V, R : Comparable<R>> Map<out K, V>.minByOrNull( selector: (Entry<K, V>) -> R): Entry<K, V>?",
      "desc": "Returns the first entry yielding the smallest value of the given function or null if there are no entries."
    },
    {
      "text": "fun <T> Array<out T>.minOf(selector: (T) -> Double): Double",
      "desc": "Returns the smallest value among all values produced by selector function applied to each element in the array."
    },
    {
      "text": "fun <T> Iterable<T>.minOf(selector: (T) -> Double): Double",
      "desc": "Returns the smallest value among all values produced by selector function applied to each element in the collection."
    },
    {
      "text": "fun <K, V> Map<out K, V>.minOf( selector: (Entry<K, V>) -> Double): Double",
      "desc": "Returns the smallest value among all values produced by selector function applied to each entry in the map."
    },
    {
      "text": "fun <T> Array<out T>.minOfOrNull( selector: (T) -> Double): Double?",
      "desc": "Returns the smallest value among all values produced by selector function applied to each element in the array or null if there are no elements."
    },
    {
      "text": "fun <T> Iterable<T>.minOfOrNull( selector: (T) -> Double): Double?",
      "desc": "Returns the smallest value among all values produced by selector function applied to each element in the collection or null if there are no elements."
    },
    {
      "text": "fun <K, V> Map<out K, V>.minOfOrNull( selector: (Entry<K, V>) -> Double): Double?",
      "desc": "Returns the smallest value among all values produced by selector function applied to each entry in the map or null if there are no entries."
    },
    {
      "text": "fun <T, R> Array<out T>.minOfWith( comparator: Comparator<in R>, selector: (T) -> R): R",
      "desc": "Returns the smallest value according to the provided comparator among all values produced by selector function applied to each element in the array."
    },
    {
      "text": "fun <T, R> Iterable<T>.minOfWith( comparator: Comparator<in R>, selector: (T) -> R): R",
      "desc": "Returns the smallest value according to the provided comparator among all values produced by selector function applied to each element in the collection."
    },
    {
      "text": "fun <K, V, R> Map<out K, V>.minOfWith( comparator: Comparator<in R>, selector: (Entry<K, V>) -> R): R",
      "desc": "Returns the smallest value according to the provided comparator among all values produced by selector function applied to each entry in the map."
    },
    {
      "text": "fun <T, R> Array<out T>.minOfWithOrNull( comparator: Comparator<in R>, selector: (T) -> R): R?",
      "desc": "Returns the smallest value according to the provided comparator among all values produced by selector function applied to each element in the array or null if there are no elements."
    },
    {
      "text": "fun <T, R> Iterable<T>.minOfWithOrNull( comparator: Comparator<in R>, selector: (T) -> R): R?",
      "desc": "Returns the smallest value according to the provided comparator among all values produced by selector function applied to each element in the collection or null if there are no elements."
    },
    {
      "text": "fun <K, V, R> Map<out K, V>.minOfWithOrNull( comparator: Comparator<in R>, selector: (Entry<K, V>) -> R): R?",
      "desc": "Returns the smallest value according to the provided comparator among all values produced by selector function applied to each entry in the map or null if there are no entries."
    },
    {
      "text": "fun Array<out Double>.minOrNull(): Double?",
      "desc": "Returns the smallest element or null if there are no elements."
    },
    {
      "text": "operator fun <T> Iterable<T>.minus(element: T): List<T>",
      "desc": "Returns a list containing all elements of the original collection without the first occurrence of the given element."
    },
    {
      "text": "operator fun <T> Iterable<T>.minus( elements: Array<out T>): List<T>",
      "desc": "Returns a list containing all elements of the original collection except the elements contained in the given elements array."
    },
    {
      "text": "operator fun <T> Iterable<T>.minus( elements: Iterable<T>): List<T>",
      "desc": "Returns a list containing all elements of the original collection except the elements contained in the given elements collection."
    },
    {
      "text": "operator fun <T> Iterable<T>.minus( elements: Sequence<T>): List<T>",
      "desc": "Returns a list containing all elements of the original collection except the elements contained in the given elements sequence."
    },
    {
      "text": "operator fun <T> Set<T>.minus(element: T): Set<T>",
      "desc": "Returns a set containing all elements of the original set except the given element."
    },
    {
      "text": "operator fun <T> Set<T>.minus(elements: Array<out T>): Set<T>",
      "desc": "Returns a set containing all elements of the original set except the elements contained in the given elements array."
    },
    {
      "text": "operator fun <T> Set<T>.minus(elements: Iterable<T>): Set<T>",
      "desc": "Returns a set containing all elements of the original set except the elements contained in the given elements collection."
    },
    {
      "text": "operator fun <T> Set<T>.minus(elements: Sequence<T>): Set<T>",
      "desc": "Returns a set containing all elements of the original set except the elements contained in the given elements sequence."
    },
    {
      "text": "operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V>",
      "desc": "Returns a map containing all entries of the original map except the entry with the given key."
    },
    {
      "text": "operator fun <K, V> Map<out K, V>.minus( keys: Iterable<K>): Map<K, V>",
      "desc": "Returns a map containing all entries of the original map except those entries the keys of which are contained in the given keys collection."
    },
    {
      "text": "operator fun <K, V> Map<out K, V>.minus( keys: Array<out K>): Map<K, V>",
      "desc": "Returns a map containing all entries of the original map except those entries the keys of which are contained in the given keys array."
    },
    {
      "text": "operator fun <K, V> Map<out K, V>.minus( keys: Sequence<K>): Map<K, V>",
      "desc": "Returns a map containing all entries of the original map except those entries the keys of which are contained in the given keys sequence."
    },
    {
      "text": "operator fun <K, V> MutableMap<K, V>.minusAssign(key: K)",
      "desc": "Removes the entry with the given key from this mutable map."
    },
    {
      "text": "operator fun <K, V> MutableMap<K, V>.minusAssign( keys: Iterable<K>)",
      "desc": "Removes all entries the keys of which are contained in the given keys collection from this mutable map."
    },
    {
      "text": "operator fun <K, V> MutableMap<K, V>.minusAssign( keys: Array<out K>)",
      "desc": "Removes all entries the keys of which are contained in the given keys array from this mutable map."
    },
    {
      "text": "operator fun <K, V> MutableMap<K, V>.minusAssign( keys: Sequence<K>)",
      "desc": "Removes all entries from the keys of which are contained in the given keys sequence from this mutable map."
    },
    {
      "text": "operator fun <T> MutableCollection<in T>.minusAssign( element: T)",
      "desc": "Removes a single instance of the specified element from this mutable collection."
    },
    {
      "text": "operator fun <T> MutableCollection<in T>.minusAssign( elements: Iterable<T>)",
      "desc": "Removes all elements contained in the given elements collection from this mutable collection."
    },
    {
      "text": "operator fun <T> MutableCollection<in T>.minusAssign( elements: Array<T>)",
      "desc": "Removes all elements contained in the given elements array from this mutable collection."
    },
    {
      "text": "operator fun <T> MutableCollection<in T>.minusAssign( elements: Sequence<T>)",
      "desc": "Removes all elements contained in the given elements sequence from this mutable collection."
    },
    {
      "text": "fun <T> Iterable<T>.minusElement(element: T): List<T>",
      "desc": "Returns a list containing all elements of the original collection without the first occurrence of the given element."
    },
    {
      "text": "fun <T> Set<T>.minusElement(element: T): Set<T>",
      "desc": "Returns a set containing all elements of the original set except the given element."
    },
    {
      "text": "fun <T> Array<out T>.minWith( comparator: Comparator<in T>): T?"
    },
    {
      "text": "fun <T> Array<out T>.minWithOrNull( comparator: Comparator<in T>): T?",
      "desc": "Returns the first element having the smallest value according to the provided comparator or null if there are no elements."
    },
    {
      "text": "fun <K, V> Map<out K, V>.minWithOrNull( comparator: Comparator<in Entry<K, V>>): Entry<K, V>?",
      "desc": "Returns the first entry having the smallest value according to the provided comparator or null if there are no entries."
    },
    {
      "text": "fun <T> MutableList( size: Int, init: (index: Int) -> T): MutableList<T>",
      "desc": "Creates a new mutable list with the specified size, where each element is calculated by calling the specified init function."
    },
    {
      "text": "fun <T> mutableListOf(): MutableList<T>",
      "desc": "Returns an empty new MutableList."
    },
    {
      "text": "fun <T> mutableListOf(vararg elements: T): MutableList<T>",
      "desc": "Returns a new MutableList with the given elements."
    },
    {
      "text": "fun <K, V> mutableMapOf(): MutableMap<K, V>",
      "desc": "Returns an empty new MutableMap."
    },
    {
      "text": "fun <K, V> mutableMapOf( vararg pairs: Pair<K, V>): MutableMap<K, V>",
      "desc": "Returns a new MutableMap with the specified contents, given as a list of pairs where the first component is the key and the second is the value."
    },
    {
      "text": "fun <T> mutableSetOf(): MutableSet<T>",
      "desc": "Returns an empty new MutableSet."
    },
    {
      "text": "fun <T> mutableSetOf(vararg elements: T): MutableSet<T>",
      "desc": "Returns a new MutableSet with the given elements. Elements of the set are iterated in the order they were specified."
    },
    {
      "text": "fun <T> Array<out T>.none(): Boolean",
      "desc": "Returns true if the array has no elements."
    },
    {
      "text": "fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean",
      "desc": "Returns true if no elements match the given predicate."
    },
    {
      "text": "fun <T> Iterable<T>.none(): Boolean",
      "desc": "Returns true if the collection has no elements."
    },
    {
      "text": "fun <K, V> Map<out K, V>.none(): Boolean",
      "desc": "Returns true if the map has no entries."
    },
    {
      "text": "fun <K, V> Map<out K, V>.none( predicate: (Entry<K, V>) -> Boolean): Boolean",
      "desc": "Returns true if no entries match the given predicate."
    },
    {
      "text": "fun <T> Array<out T>.onEach( action: (T) -> Unit): Array<out T>",
      "desc": "Performs the given action on each element and returns the array itself afterwards."
    },
    {
      "text": "fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C",
      "desc": "Performs the given action on each element and returns the collection itself afterwards."
    },
    {
      "text": "fun <K, V, M : Map<out K, V>> M.onEach( action: (Entry<K, V>) -> Unit): M",
      "desc": "Performs the given action on each entry and returns the map itself afterwards."
    },
    {
      "text": "fun <T> Array<out T>.onEachIndexed( action: (index: Int, T) -> Unit): Array<out T>",
      "desc": "Performs the given action on each element, providing sequential index with the element, and returns the array itself afterwards."
    },
    {
      "text": "fun <T, C : Iterable<T>> C.onEachIndexed( action: (index: Int, T) -> Unit): C",
      "desc": "Performs the given action on each element, providing sequential index with the element, and returns the collection itself afterwards."
    },
    {
      "text": "fun <K, V, M : Map<out K, V>> M.onEachIndexed( action: (index: Int, Entry<K, V>) -> Unit): M",
      "desc": "Performs the given action on each entry, providing sequential index with the entry, and returns the map itself afterwards."
    },
    {
      "text": "fun <T> Collection<T>?.orEmpty(): Collection<T>",
      "desc": "Returns this Collection if it's not null and the empty list otherwise."
    },
    {
      "text": "fun <T> List<T>?.orEmpty(): List<T>",
      "desc": "Returns this List if it's not null and the empty list otherwise."
    },
    {
      "text": "fun <K, V> Map<K, V>?.orEmpty(): Map<K, V>",
      "desc": "Returns the Map if its not null, or the empty Map otherwise."
    },
    {
      "text": "fun <T> Set<T>?.orEmpty(): Set<T>",
      "desc": "Returns this Set if it's not null and the empty set otherwise."
    },
    {
      "text": "fun <T> any_array<T>.orEmpty(): Array<out T>",
      "desc": "Returns the array if it's not null, or an empty array otherwise."
    },
    {
      "text": "fun <T> any_array<T>.partition( predicate: (T) -> Boolean): Pair<List<T>, List<T>>",
      "desc": "Splits the original array into pair of lists, where first list contains elements for which predicate yielded true, while second list contains elements for which predicate yielded false."
    },
    {
      "text": "fun <T> Iterable<T>.partition( predicate: (T) -> Boolean): Pair<List<T>, List<T>>",
      "desc": "Splits the original collection into pair of lists, where first list contains elements for which predicate yielded true, while second list contains elements for which predicate yielded false."
    },
    {
      "text": "operator fun <T> Iterable<T>.plus(element: T): List<T>",
      "desc": "Returns a list containing all elements of the original collection and then the given element."
    },
    {
      "text": "operator fun <T> Iterable<T>.plus( elements: Array<out T>): List<T>",
      "desc": "Returns a list containing all elements of the original collection and then all elements of the given elements array."
    },
    {
      "text": "operator fun <T> Iterable<T>.plus( elements: Iterable<T>): List<T>",
      "desc": "Returns a list containing all elements of the original collection and then all elements of the given elements collection."
    },
    {
      "text": "operator fun <T> Iterable<T>.plus( elements: Sequence<T>): List<T>",
      "desc": "Returns a list containing all elements of the original collection and then all elements of the given elements sequence."
    },
    {
      "text": "operator fun <T> Set<T>.plus(element: T): Set<T>",
      "desc": "Returns a set containing all elements of the original set and then the given element if it isn't already in this set."
    },
    {
      "text": "operator fun <T> Set<T>.plus(elements: Array<out T>): Set<T>",
      "desc": "Returns a set containing all elements of the original set and the given elements array, which aren't already in this set."
    },
    {
      "text": "operator fun <T> Set<T>.plus(elements: Iterable<T>): Set<T>",
      "desc": "Returns a set containing all elements of the original set and the given elements collection, which aren't already in this set. The returned set preserves the element iteration order of the original set."
    },
    {
      "text": "operator fun <T> Set<T>.plus(elements: Sequence<T>): Set<T>",
      "desc": "Returns a set containing all elements of the original set and the given elements sequence, which aren't already in this set."
    },
    {
      "text": "operator fun UIntArray.plus(element: UInt): UIntArray",
      "desc": "Returns an array containing all elements of the original array and then the given element."
    },
    {
      "text": "operator fun UIntArray.plus( elements: Collection<UInt>): UIntArray",
      "desc": "Returns an array containing all elements of the original array and then all elements of the given elements collection."
    },
    {
      "text": "operator fun UIntArray.plus(elements: UIntArray): UIntArray",
      "desc": "Returns an array containing all elements of the original array and then all elements of the given elements array."
    },
    {
      "text": "operator fun <K, V> Map<out K, V>.plus( pair: Pair<K, V>): Map<K, V>",
      "desc": "Creates a new read-only map by replacing or adding an entry to this map from a given key-value pair."
    },
    {
      "text": "operator fun <K, V> Map<out K, V>.plus( pairs: Iterable<Pair<K, V>>): Map<K, V>",
      "desc": "Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value pairs."
    },
    {
      "text": "operator fun <K, V> Map<out K, V>.plus( pairs: Array<out Pair<K, V>>): Map<K, V>",
      "desc": "Creates a new read-only map by replacing or adding entries to this map from a given array of key-value pairs."
    },
    {
      "text": "operator fun <K, V> Map<out K, V>.plus( pairs: Sequence<Pair<K, V>>): Map<K, V>",
      "desc": "Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value pairs."
    },
    {
      "text": "operator fun <K, V> Map<out K, V>.plus( map: Map<out K, V>): Map<K, V>",
      "desc": "Creates a new read-only map by replacing or adding entries to this map from another map."
    },
    {
      "text": "operator fun <K, V> MutableMap<in K, in V>.plusAssign( pair: Pair<K, V>)",
      "desc": "Appends or replaces the given pair in this mutable map."
    },
    {
      "text": "operator fun <K, V> MutableMap<in K, in V>.plusAssign( pairs: Iterable<Pair<K, V>>)",
      "desc": "Appends or replaces all pairs from the given collection of pairs in this mutable map."
    },
    {
      "text": "operator fun <K, V> MutableMap<in K, in V>.plusAssign( pairs: Array<out Pair<K, V>>)",
      "desc": "Appends or replaces all pairs from the given array of pairs in this mutable map."
    },
    {
      "text": "operator fun <K, V> MutableMap<in K, in V>.plusAssign( pairs: Sequence<Pair<K, V>>)",
      "desc": "Appends or replaces all pairs from the given sequence of pairs in this mutable map."
    },
    {
      "text": "operator fun <K, V> MutableMap<in K, in V>.plusAssign( map: Map<K, V>)",
      "desc": "Appends or replaces all entries from the given map in this mutable map."
    },
    {
      "text": "operator fun <T> MutableCollection<in T>.plusAssign( element: T)",
      "desc": "Adds the specified element to this mutable collection."
    },
    {
      "text": "operator fun <T> MutableCollection<in T>.plusAssign( elements: Iterable<T>)",
      "desc": "Adds all elements of the given elements collection to this mutable collection."
    },
    {
      "text": "operator fun <T> MutableCollection<in T>.plusAssign( elements: Array<T>)",
      "desc": "Adds all elements of the given elements array to this mutable collection."
    },
    {
      "text": "operator fun <T> MutableCollection<in T>.plusAssign( elements: Sequence<T>)",
      "desc": "Adds all elements of the given elements sequence to this mutable collection."
    },
    {
      "text": "fun <T> Iterable<T>.plusElement(element: T): List<T>",
      "desc": "Returns a list containing all elements of the original collection and then the given element."
    },
    {
      "text": "fun <T> Set<T>.plusElement(element: T): Set<T>",
      "desc": "Returns a set containing all elements of the original set and then the given element if it isn't already in this set."
    },
    {
      "text": "fun <T> any_array<T>.plusElement(element: T): Array<T>",
      "desc": "Returns an array containing all elements of the original array and then the given element."
    },
    {
      "text": "fun <K, V> MutableMap<in K, in V>.putAll( pairs: Array<out Pair<K, V>>)",
      "desc": "Puts all the given pairs into this MutableMap with the first component in the pair being the key and the second the value."
    },
    {
      "text": "fun <K, V> MutableMap<in K, in V>.putAll( pairs: Iterable<Pair<K, V>>)",
      "desc": "Puts all the elements of the given collection into this MutableMap with the first component in the pair being the key and the second the value."
    },
    {
      "text": "fun <K, V> MutableMap<in K, in V>.putAll( pairs: Sequence<Pair<K, V>>)",
      "desc": "Puts all the elements of the given sequence into this MutableMap with the first component in the pair being the key and the second the value."
    },
    {
      "text": "fun <T> Array<out T>.random(): T",
      "desc": "Returns a random element from this array."
    },
    {
      "text": "fun <T> Array<out T>.random(random: Random): T",
      "desc": "Returns a random element from this array using the specified source of randomness."
    },
    {
      "text": "fun <T> Collection<T>.random(): T",
      "desc": "Returns a random element from this collection."
    },
    {
      "text": "fun <T> Collection<T>.random(random: Random): T",
      "desc": "Returns a random element from this collection using the specified source of randomness."
    },
    {
      "text": "fun <T> Array<out T>.randomOrNull(): T?",
      "desc": "Returns a random element from this array, or null if this array is empty."
    },
    {
      "text": "fun <T> Array<out T>.randomOrNull(random: Random): T?",
      "desc": "Returns a random element from this array using the specified source of randomness, or null if this array is empty."
    },
    {
      "text": "fun <T> Collection<T>.randomOrNull(): T?",
      "desc": "Returns a random element from this collection, or null if this collection is empty."
    },
    {
      "text": "fun <T> Collection<T>.randomOrNull(random: Random): T?",
      "desc": "Returns a random element from this collection using the specified source of randomness, or null if this collection is empty."
    },
    {
      "text": "fun <S, T : S> Array<out T>.reduce( operation: (acc: S, T) -> S): S",
      "desc": "Accumulates value starting with the first element and applying operation from left to right to current accumulator value and each element."
    },
    {
      "text": "fun <S, T : S, K> Grouping<T, K>.reduce( operation: (key: K, accumulator: S, element: T) -> S): Map<K, S>",
      "desc": "Groups elements from the Grouping source by key and applies the reducing operation to the elements of each group sequentially starting from the second element of the group, passing the previously accumulated value and the current element as arguments, and stores the results in a new map. An initial value of accumulator is the first element of the group."
    },
    {
      "text": "fun <S, T : S> Array<out T>.reduceIndexed( operation: (index: Int, acc: S, T) -> S): S",
      "desc": "Accumulates value starting with the first element and applying operation from left to right to current accumulator value and each element with its index in the original array."
    },
    {
      "text": "fun <S, T : S> Iterable<T>.reduceIndexed( operation: (index: Int, acc: S, T) -> S): S",
      "desc": "Accumulates value starting with the first element and applying operation from left to right to current accumulator value and each element with its index in the original collection."
    },
    {
      "text": "fun <S, T : S> Array<out T>.reduceIndexedOrNull( operation: (index: Int, acc: S, T) -> S): S?",
      "desc": "Accumulates value starting with the first element and applying operation from left to right to current accumulator value and each element with its index in the original array."
    },
    {
      "text": "fun <S, T : S> Iterable<T>.reduceIndexedOrNull( operation: (index: Int, acc: S, T) -> S): S?",
      "desc": "Accumulates value starting with the first element and applying operation from left to right to current accumulator value and each element with its index in the original collection."
    },
    {
      "text": "fun <S, T : S> Array<out T>.reduceOrNull( operation: (acc: S, T) -> S): S?",
      "desc": "Accumulates value starting with the first element and applying operation from left to right to current accumulator value and each element."
    },
    {
      "text": "fun <S, T : S> Array<out T>.reduceRight( operation: (T, acc: S) -> S): S",
      "desc": "Accumulates value starting with the last element and applying operation from right to left to each element and current accumulator value."
    },
    {
      "text": "fun <S, T : S> Array<out T>.reduceRightIndexed( operation: (index: Int, T, acc: S) -> S): S",
      "desc": "Accumulates value starting with the last element and applying operation from right to left to each element with its index in the original array and current accumulator value."
    },
    {
      "text": "fun <S, T : S> List<T>.reduceRightIndexed( operation: (index: Int, T, acc: S) -> S): S",
      "desc": "Accumulates value starting with the last element and applying operation from right to left to each element with its index in the original list and current accumulator value."
    },
    {
      "text": "fun <S, T : S> Array<out T>.reduceRightIndexedOrNull( operation: (index: Int, T, acc: S) -> S): S?",
      "desc": "Accumulates value starting with the last element and applying operation from right to left to each element with its index in the original array and current accumulator value."
    },
    {
      "text": "fun <S, T : S> List<T>.reduceRightIndexedOrNull( operation: (index: Int, T, acc: S) -> S): S?",
      "desc": "Accumulates value starting with the last element and applying operation from right to left to each element with its index in the original list and current accumulator value."
    },
    {
      "text": "fun <S, T : S> Array<out T>.reduceRightOrNull( operation: (T, acc: S) -> S): S?",
      "desc": "Accumulates value starting with the last element and applying operation from right to left to each element and current accumulator value."
    },
    {
      "text": "fun <S, T : S, K, M : MutableMap<in K, S>> Grouping<T, K>.reduceTo( destination: M, operation: (key: K, accumulator: S, element: T) -> S): M",
      "desc": "Groups elements from the Grouping source by key and applies the reducing operation to the elements of each group sequentially starting from the second element of the group, passing the previously accumulated value and the current element as arguments, and stores the results in the given destination map. An initial value of accumulator is the first element of the group."
    },
    {
      "text": "fun <K, V> MutableMap<out K, V>.remove(key: K): V?",
      "desc": "Removes the specified key and its corresponding value from this map."
    },
    {
      "text": "fun <T> MutableCollection<out T>.remove(element: T): Boolean",
      "desc": "Removes a single instance of the specified element from this collection, if it is present."
    },
    {
      "text": "fun <T> MutableList<T>.remove(index: Int): T",
      "desc": "Removes the element at the specified index from this list. In Kotlin one should use the MutableList.removeAt function instead."
    },
    {
      "text": "fun <K, V> MutableMap<out K, out V>.remove( key: K, value: V): Boolean",
      "desc": "Removes the entry for the specified key only if it is currently mapped to the specified value."
    },
    {
      "text": "fun <T> MutableCollection<out T>.removeAll( elements: Collection<T>): Boolean",
      "desc": "Removes all of this collection's elements that are also contained in the specified collection."
    },
    {
      "text": "fun <T> MutableCollection<in T>.removeAll( elements: Iterable<T>): Boolean",
      "desc": "Removes all elements from this MutableCollection that are also contained in the given elements collection."
    },
    {
      "text": "fun <T> MutableCollection<in T>.removeAll( elements: Sequence<T>): Boolean",
      "desc": "Removes all elements from this MutableCollection that are also contained in the given elements sequence."
    },
    {
      "text": "fun <T> MutableCollection<in T>.removeAll( elements: Array<out T>): Boolean",
      "desc": "Removes all elements from this MutableCollection that are also contained in the given elements array."
    },
    {
      "text": "fun <T> MutableIterable<T>.removeAll( predicate: (T) -> Boolean): Boolean",
      "desc": "Removes all elements from this MutableIterable that match the given predicate."
    },
    {
      "text": "fun <T> MutableList<T>.removeAll( predicate: (T) -> Boolean): Boolean",
      "desc": "Removes all elements from this MutableList that match the given predicate."
    },
    {
      "text": "fun <T> MutableList<T>.removeFirst(): T",
      "desc": "Removes the first element from this mutable list and returns that removed element, or throws NoSuchElementException if this list is empty."
    },
    {
      "text": "fun <T> MutableList<T>.removeFirstOrNull(): T?",
      "desc": "Removes the first element from this mutable list and returns that removed element, or returns null if this list is empty."
    },
    {
      "text": "fun <T> MutableList<T>.removeLast(): T",
      "desc": "Removes the last element from this mutable list and returns that removed element, or throws NoSuchElementException if this list is empty."
    },
    {
      "text": "fun <T> MutableList<T>.removeLastOrNull(): T?",
      "desc": "Removes the last element from this mutable list and returns that removed element, or returns null if this list is empty."
    },
    {
      "text": "fun <T> MutableList<T>.replaceAll(transformation: (T) -> T)",
      "desc": "Replaces each element in the list with a result of a transformation specified."
    },
    {
      "text": "fun <T : Any> Array<T?>.requireNoNulls(): Array<T>",
      "desc": "Returns an original collection containing all the non-null elements, throwing an IllegalArgumentException if there are any null elements."
    },
    {
      "text": "fun <T> MutableCollection<out T>.retainAll( elements: Collection<T>): Boolean",
      "desc": "Retains only the elements in this collection that are contained in the specified collection."
    },
    {
      "text": "fun <T> MutableCollection<in T>.retainAll( elements: Iterable<T>): Boolean",
      "desc": "Retains only elements of this MutableCollection that are contained in the given elements collection."
    },
    {
      "text": "fun <T> MutableCollection<in T>.retainAll( elements: Array<out T>): Boolean",
      "desc": "Retains only elements of this MutableCollection that are contained in the given elements array."
    },
    {
      "text": "fun <T> MutableCollection<in T>.retainAll( elements: Sequence<T>): Boolean",
      "desc": "Retains only elements of this MutableCollection that are contained in the given elements sequence."
    },
    {
      "text": "fun <T> MutableIterable<T>.retainAll( predicate: (T) -> Boolean): Boolean",
      "desc": "Retains only elements of this MutableIterable that match the given predicate."
    },
    {
      "text": "fun <T> MutableList<T>.retainAll( predicate: (T) -> Boolean): Boolean",
      "desc": "Retains only elements of this MutableList that match the given predicate."
    },
    {
      "text": "fun <T> Array<T>.reverse()",
      "desc": "Reverses elements in the array in-place."
    },
    {
      "text": "fun <T> Array<T>.reverse(fromIndex: Int, toIndex: Int)",
      "desc": "Reverses elements of the array in the specified range in-place."
    },
    {
      "text": "fun <T> MutableList<T>.reverse()",
      "desc": "Reverses elements in the list in-place."
    },
    {
      "text": "fun <T> Array<out T>.reversed(): List<T>",
      "desc": "Returns a list with elements in reversed order."
    },
    {
      "text": "fun <T> Array<T>.reversedArray(): Array<T>",
      "desc": "Returns an array with elements of this array in reversed order."
    },
    {
      "text": "fun <T, R> Array<out T>.runningFold( initial: R, operation: (acc: R, T) -> R): List<R>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element and current accumulator value that starts with initial value."
    },
    {
      "text": "fun <T, R> Array<out T>.runningFoldIndexed( initial: R, operation: (index: Int, acc: R, T) -> R): List<R>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element, its index in the original array and current accumulator value that starts with initial value."
    },
    {
      "text": "fun <T, R> Iterable<T>.runningFoldIndexed( initial: R, operation: (index: Int, acc: R, T) -> R): List<R>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element, its index in the original collection and current accumulator value that starts with initial value."
    },
    {
      "text": "fun <S, T : S> Array<out T>.runningReduce( operation: (acc: S, T) -> S): List<S>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element and current accumulator value that starts with the first element of this array."
    },
    {
      "text": "fun <S, T : S> Iterable<T>.runningReduce( operation: (acc: S, T) -> S): List<S>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element and current accumulator value that starts with the first element of this collection."
    },
    {
      "text": "fun <S, T : S> Array<out T>.runningReduceIndexed( operation: (index: Int, acc: S, T) -> S): List<S>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element, its index in the original array and current accumulator value that starts with the first element of this array."
    },
    {
      "text": "fun <S, T : S> Iterable<T>.runningReduceIndexed( operation: (index: Int, acc: S, T) -> S): List<S>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element, its index in the original collection and current accumulator value that starts with the first element of this collection."
    },
    {
      "text": "fun <T, R> Array<out T>.scan( initial: R, operation: (acc: R, T) -> R): List<R>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element and current accumulator value that starts with initial value."
    },
    {
      "text": "fun <T, R> Array<out T>.scanIndexed( initial: R, operation: (index: Int, acc: R, T) -> R): List<R>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element, its index in the original array and current accumulator value that starts with initial value."
    },
    {
      "text": "fun <T, R> Iterable<T>.scanIndexed( initial: R, operation: (index: Int, acc: R, T) -> R): List<R>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element, its index in the original collection and current accumulator value that starts with initial value."
    },
    {
      "text": "operator fun <K, V> MutableMap<K, V>.set(key: K, value: V)",
      "desc": "Allows to use the index operator for storing values in a mutable map."
    },
    {
      "text": "fun <T> setOf(vararg elements: T): Set<T>",
      "desc": "Returns a new read-only set with the given elements. Elements of the set are iterated in the order they were specified. The returned set is serializable (JVM)."
    },
    {
      "text": "fun <T> setOf(): Set<T>",
      "desc": "Returns an empty read-only set. The returned set is serializable (JVM)."
    },
    {
      "text": "fun <T> setOf(element: T): Set<T>",
      "desc": "Returns an immutable set containing only the specified object element. The returned set is serializable."
    },
    {
      "text": "fun <T : Any> setOfNotNull(element: T?): Set<T>",
      "desc": "Returns a new read-only set either with single given element, if it is not null, or empty set if the element is null. The returned set is serializable (JVM)."
    },
    {
      "text": "fun <T : Any> setOfNotNull(vararg elements: T?): Set<T>",
      "desc": "Returns a new read-only set only with those given elements, that are not null. Elements of the set are iterated in the order they were specified. The returned set is serializable (JVM)."
    },
    {
      "text": "operator fun <V> MutableMap<in String, in V>.setValue( thisRef: Any?, property: KProperty<*>, value: V)",
      "desc": "Stores the value of the property for the given object in this mutable map."
    },
    {
      "text": "fun <T> Array<T>.shuffle()",
      "desc": "Randomly shuffles elements in this array in-place."
    },
    {
      "text": "fun <T> Array<T>.shuffle(random: Random)",
      "desc": "Randomly shuffles elements in this array in-place using the specified random instance as the source of randomness."
    },
    {
      "text": "fun <T> MutableList<T>.shuffle(random: Random)",
      "desc": "Randomly shuffles elements in this list in-place using the specified random instance as the source of randomness."
    },
    {
      "text": "fun <T> MutableList<T>.shuffle(random: Random)",
      "desc": "Randomly shuffles elements in this mutable list using the specified random instance as the source of randomness."
    },
    {
      "text": "fun <T> MutableList<T>.shuffle()",
      "desc": "Randomly shuffles elements in this mutable list."
    },
    {
      "text": "fun <T> Iterable<T>.shuffled(random: Random): List<T>",
      "desc": "Returns a new list with the elements of this list randomly shuffled using the specified random instance as the source of randomness."
    },
    {
      "text": "fun <T> Iterable<T>.shuffled(): List<T>",
      "desc": "Returns a new list with the elements of this list randomly shuffled."
    },
    {
      "text": "fun <T> Array<out T>.single(): T",
      "desc": "Returns the single element, or throws an exception if the array is empty or has more than one element."
    },
    {
      "text": "fun <T> Array<out T>.single(predicate: (T) -> Boolean): T",
      "desc": "Returns the single element matching the given predicate, or throws exception if there is no or more than one matching element."
    },
    {
      "text": "fun <T> Iterable<T>.single(): T",
      "desc": "Returns the single element, or throws an exception if the collection is empty or has more than one element."
    },
    {
      "text": "fun <T> List<T>.single(): T",
      "desc": "Returns the single element, or throws an exception if the list is empty or has more than one element."
    },
    {
      "text": "fun <T> Array<out T>.singleOrNull(): T?",
      "desc": "Returns single element, or null if the array is empty or has more than one element."
    },
    {
      "text": "fun <T> Array<out T>.singleOrNull( predicate: (T) -> Boolean): T?",
      "desc": "Returns the single element matching the given predicate, or null if element was not found or more than one element was found."
    },
    {
      "text": "fun <T> Iterable<T>.singleOrNull(): T?",
      "desc": "Returns single element, or null if the collection is empty or has more than one element."
    },
    {
      "text": "fun <T> List<T>.singleOrNull(): T?",
      "desc": "Returns single element, or null if the list is empty or has more than one element."
    },
    {
      "text": "fun <T> Array<out T>.slice(indices: IntRange): List<T>",
      "desc": "Returns a list containing elements at indices in the specified indices range."
    },
    {
      "text": "fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T>",
      "desc": "Returns a list containing elements at specified indices."
    },
    {
      "text": "fun <T> Array<T>.sliceArray( indices: Collection<Int>): Array<T>",
      "desc": "Returns an array containing elements of this array at specified indices."
    },
    {
      "text": "fun <T> Array<T>.sliceArray(indices: IntRange): Array<T>",
      "desc": "Returns an array containing elements at indices in the specified indices range."
    },
    {
      "text": "fun UIntArray.sort()",
      "desc": "Sorts the array in-place."
    },
    {
      "text": "fun UIntArray.sort(fromIndex: Int = 0, toIndex: Int = size)",
      "desc": "Sorts a range in the array in-place."
    },
    {
      "text": "fun <T> MutableList<T>.sort(comparator: Comparator<in T>)"
    },
    {
      "text": "fun <T> any_array<T>.sort(comparison: (a: T, b: T) -> Int)",
      "desc": "Sorts the array in-place according to the order specified by the given comparison function."
    },
    {
      "text": "fun <T : Comparable<T>> any_array<T>.sort()",
      "desc": "Sorts the array in-place according to the natural order of its elements."
    },
    {
      "text": "fun <T : Comparable<T>> MutableList<T>.sort()",
      "desc": "Sorts elements in the list in-place according to their natural sort order."
    },
    {
      "text": "fun <T, R : Comparable<R>> Array<out T>.sortBy( selector: (T) -> R?)",
      "desc": "Sorts elements in the array in-place according to natural sort order of the value returned by specified selector function."
    },
    {
      "text": "fun <T, R : Comparable<R>> MutableList<T>.sortBy( selector: (T) -> R?)",
      "desc": "Sorts elements in the list in-place according to natural sort order of the value returned by specified selector function."
    },
    {
      "text": "fun <T, R : Comparable<R>> Array<out T>.sortByDescending( selector: (T) -> R?)",
      "desc": "Sorts elements in the array in-place descending according to natural sort order of the value returned by specified selector function."
    },
    {
      "text": "fun <T, R : Comparable<R>> MutableList<T>.sortByDescending( selector: (T) -> R?)",
      "desc": "Sorts elements in the list in-place descending according to natural sort order of the value returned by specified selector function."
    },
    {
      "text": "fun <T : Comparable<T>> Array<out T>.sortDescending()",
      "desc": "Sorts elements in the array in-place descending according to their natural sort order."
    },
    {
      "text": "fun <T : Comparable<T>> Array<out T>.sortDescending( fromIndex: Int, toIndex: Int)",
      "desc": "Sorts elements of the array in the specified range in-place. The elements are sorted descending according to their natural sort order."
    },
    {
      "text": "fun <T : Comparable<T>> MutableList<T>.sortDescending()",
      "desc": "Sorts elements in the list in-place descending according to their natural sort order."
    },
    {
      "text": "fun <T : Comparable<T>> Array<out T>.sorted(): List<T>",
      "desc": "Returns a list of all elements sorted according to their natural sort order."
    },
    {
      "text": "fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T>",
      "desc": "Returns an array with all elements of this array sorted according to their natural sort order."
    },
    {
      "text": "fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T>",
      "desc": "Returns an array with all elements of this array sorted descending according to their natural sort order."
    },
    {
      "text": "fun <T> Array<out T>.sortedArrayWith( comparator: Comparator<in T>): Array<out T>",
      "desc": "Returns an array with all elements of this array sorted according the specified comparator."
    },
    {
      "text": "fun <T, R : Comparable<R>> Array<out T>.sortedBy( selector: (T) -> R?): List<T>",
      "desc": "Returns a list of all elements sorted according to natural sort order of the value returned by specified selector function."
    },
    {
      "text": "fun <T, R : Comparable<R>> Array<out T>.sortedByDescending( selector: (T) -> R?): List<T>",
      "desc": "Returns a list of all elements sorted descending according to natural sort order of the value returned by specified selector function."
    },
    {
      "text": "fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T>",
      "desc": "Returns a list of all elements sorted descending according to their natural sort order."
    },
    {
      "text": "fun <K : Comparable<K>, V> sortedMapOf( vararg pairs: Pair<K, V>): SortedMap<K, V>",
      "desc": "Returns a new SortedMap with the specified contents, given as a list of pairs where the first value is the key and the second is the value."
    },
    {
      "text": "fun <T> sortedSetOf(vararg elements: T): TreeSet<T>",
      "desc": "Returns a new java.util.SortedSet with the given elements."
    },
    {
      "text": "fun <T> sortedSetOf( comparator: Comparator<in T>, vararg elements: T): TreeSet<T>",
      "desc": "Returns a new java.util.SortedSet with the given comparator and elements."
    },
    {
      "text": "fun <T> Array<out T>.sortedWith( comparator: Comparator<in T>): List<T>",
      "desc": "Returns a list of all elements sorted according to the specified comparator."
    },
    {
      "text": "fun <T> any_array<T>.sortWith(comparator: Comparator<in T>)",
      "desc": "Sorts the array in-place according to the order specified by the given comparator."
    },
    {
      "text": "fun <T> any_array<T>.sortWith( comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size)",
      "desc": "Sorts a range in the array in-place with the given comparator."
    },
    {
      "text": "fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>)",
      "desc": "Sorts elements in the list in-place according to the order specified with comparator."
    },
    {
      "text": "fun <V> stringMapOf( vararg pairs: Pair<String, V>): HashMap<String, V>",
      "desc": "Constructs the specialized implementation of HashMap with String keys, which stores the keys as properties of JS object without hashing them."
    },
    {
      "text": "fun stringSetOf(vararg elements: String): HashSet<String>",
      "desc": "Creates a new instance of the specialized implementation of HashSet with the specified String elements, which elements the keys as properties of JS object without hashing them."
    },
    {
      "text": "fun <T> Array<out T>.subarrayContentToString( offset: Int, length: Int): String",
      "desc": "Returns a string representation of the contents of the subarray of the specified array as if it is List."
    },
    {
      "text": "infix fun <T> any_array<T>.subtract( other: Iterable<T>): Set<T>",
      "desc": "Returns a set containing all elements that are contained by this array and not contained by the specified collection."
    },
    {
      "text": "infix fun <T> Iterable<T>.subtract( other: Iterable<T>): Set<T>",
      "desc": "Returns a set containing all elements that are contained by this collection and not contained by the specified collection."
    },
    {
      "text": "fun Array<out Byte>.sum(): Int",
      "desc": "Returns the sum of all elements in the array."
    },
    {
      "text": "fun Iterable<Byte>.sum(): Int",
      "desc": "Returns the sum of all elements in the collection."
    },
    {
      "text": "fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int",
      "desc": "Returns the sum of all values produced by selector function applied to each element in the array."
    },
    {
      "text": "fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int",
      "desc": "Returns the sum of all values produced by selector function applied to each element in the collection."
    },
    {
      "text": "fun <T> Array<out T>.sumByDouble( selector: (T) -> Double): Double",
      "desc": "Returns the sum of all values produced by selector function applied to each element in the array."
    },
    {
      "text": "fun <T> Iterable<T>.sumByDouble( selector: (T) -> Double): Double",
      "desc": "Returns the sum of all values produced by selector function applied to each element in the collection."
    },
    {
      "text": "fun <T> Array<out T>.sumOf(selector: (T) -> Double): Double",
      "desc": "Returns the sum of all values produced by selector function applied to each element in the array."
    },
    {
      "text": "fun <T> Iterable<T>.sumOf(selector: (T) -> Double): Double",
      "desc": "Returns the sum of all values produced by selector function applied to each element in the collection."
    },
    {
      "text": "fun <T> Array<out T>.take(n: Int): List<T>",
      "desc": "Returns a list containing first n elements."
    },
    {
      "text": "fun <T> Array<out T>.takeLast(n: Int): List<T>",
      "desc": "Returns a list containing last n elements."
    },
    {
      "text": "fun <T> Array<out T>.takeLastWhile( predicate: (T) -> Boolean): List<T>",
      "desc": "Returns a list containing last elements satisfying the given predicate."
    },
    {
      "text": "fun <T> Array<out T>.takeWhile( predicate: (T) -> Boolean): List<T>",
      "desc": "Returns a list containing first elements satisfying the given predicate."
    },
    {
      "text": "fun Array<out Boolean>.toBooleanArray(): BooleanArray",
      "desc": "Returns an array of Boolean containing all of the elements of this generic array."
    },
    {
      "text": "fun Collection<Boolean>.toBooleanArray(): BooleanArray",
      "desc": "Returns an array of Boolean containing all of the elements of this collection."
    },
    {
      "text": "fun Array<out Byte>.toByteArray(): ByteArray",
      "desc": "Returns an array of Byte containing all of the elements of this generic array."
    },
    {
      "text": "fun Collection<Byte>.toByteArray(): ByteArray",
      "desc": "Returns an array of Byte containing all of the elements of this collection."
    },
    {
      "text": "fun UByteArray.toByteArray(): ByteArray",
      "desc": "Returns an array of type ByteArray, which is a copy of this array where each element is a signed reinterpretation of the corresponding element of this array."
    },
    {
      "text": "fun Array<out Char>.toCharArray(): CharArray",
      "desc": "Returns an array of Char containing all of the elements of this generic array."
    },
    {
      "text": "fun Collection<Char>.toCharArray(): CharArray",
      "desc": "Returns an array of Char containing all of the elements of this collection."
    },
    {
      "text": "fun <T, C : MutableCollection<in T>> Array<out T>.toCollection( destination: C): C",
      "desc": "Appends all elements to the given destination collection."
    },
    {
      "text": "fun Array<out Double>.toDoubleArray(): DoubleArray",
      "desc": "Returns an array of Double containing all of the elements of this generic array."
    },
    {
      "text": "fun Collection<Double>.toDoubleArray(): DoubleArray",
      "desc": "Returns an array of Double containing all of the elements of this collection."
    },
    {
      "text": "fun Array<out Float>.toFloatArray(): FloatArray",
      "desc": "Returns an array of Float containing all of the elements of this generic array."
    },
    {
      "text": "fun Collection<Float>.toFloatArray(): FloatArray",
      "desc": "Returns an array of Float containing all of the elements of this collection."
    },
    {
      "text": "fun <T> Array<out T>.toHashSet(): HashSet<T>",
      "desc": "Returns a new HashSet of all elements."
    },
    {
      "text": "fun Array<out Int>.toIntArray(): IntArray",
      "desc": "Returns an array of Int containing all of the elements of this generic array."
    },
    {
      "text": "fun Collection<Int>.toIntArray(): IntArray",
      "desc": "Returns an array of Int containing all of the elements of this collection."
    },
    {
      "text": "fun UIntArray.toIntArray(): IntArray",
      "desc": "Returns an array of type IntArray, which is a copy of this array where each element is a signed reinterpretation of the corresponding element of this array."
    },
    {
      "text": "fun <T> Array<out T>.toList(): List<T>",
      "desc": "Returns a List containing all elements."
    },
    {
      "text": "fun <K, V> Map<out K, V>.toList(): List<Pair<K, V>>",
      "desc": "Returns a List containing all key-value pairs."
    },
    {
      "text": "fun Array<out Long>.toLongArray(): LongArray",
      "desc": "Returns an array of Long containing all of the elements of this generic array."
    },
    {
      "text": "fun Collection<Long>.toLongArray(): LongArray",
      "desc": "Returns an array of Long containing all of the elements of this collection."
    },
    {
      "text": "fun ULongArray.toLongArray(): LongArray",
      "desc": "Returns an array of type LongArray, which is a copy of this array where each element is a signed reinterpretation of the corresponding element of this array."
    },
    {
      "text": "fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V>",
      "desc": "Returns a new map containing all key-value pairs from the given collection of pairs."
    },
    {
      "text": "fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap( destination: M): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs from the given collection of pairs."
    },
    {
      "text": "fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V>",
      "desc": "Returns a new map containing all key-value pairs from the given array of pairs."
    },
    {
      "text": "fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap( destination: M): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs from the given array of pairs."
    },
    {
      "text": "fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V>",
      "desc": "Returns a new map containing all key-value pairs from the given sequence of pairs."
    },
    {
      "text": "fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap( destination: M): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs from the given sequence of pairs."
    },
    {
      "text": "fun <K, V> Map<out K, V>.toMap(): Map<K, V>",
      "desc": "Returns a new read-only map containing all key-value pairs from the original map."
    },
    {
      "text": "fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap( destination: M): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs from the given map."
    },
    {
      "text": "fun <T> any_array<T>.toMutableList(): MutableList<T>",
      "desc": "Returns a new MutableList filled with all elements of this array."
    },
    {
      "text": "fun <T> Iterable<T>.toMutableList(): MutableList<T>",
      "desc": "Returns a new MutableList filled with all elements of this collection."
    },
    {
      "text": "fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V>",
      "desc": "Returns a new mutable map containing all key-value pairs from the original map."
    },
    {
      "text": "fun <T> any_array<T>.toMutableSet(): MutableSet<T>",
      "desc": "Returns a new MutableSet containing all distinct elements from the given array."
    },
    {
      "text": "fun <T> Iterable<T>.toMutableSet(): MutableSet<T>",
      "desc": "Returns a new MutableSet containing all distinct elements from the given collection."
    },
    {
      "text": "fun <K, V> Entry<K, V>.toPair(): Pair<K, V>",
      "desc": "Converts entry to Pair with key being first component and value being second."
    },
    {
      "text": "fun Map<String, String>.toProperties(): Properties",
      "desc": "Converts this Map to a Properties object."
    },
    {
      "text": "fun <T> Array<out T>.toSet(): Set<T>",
      "desc": "Returns a Set of all elements."
    },
    {
      "text": "fun Array<out Short>.toShortArray(): ShortArray",
      "desc": "Returns an array of Short containing all of the elements of this generic array."
    },
    {
      "text": "fun Collection<Short>.toShortArray(): ShortArray",
      "desc": "Returns an array of Short containing all of the elements of this collection."
    },
    {
      "text": "fun UShortArray.toShortArray(): ShortArray",
      "desc": "Returns an array of type ShortArray, which is a copy of this array where each element is a signed reinterpretation of the corresponding element of this array."
    },
    {
      "text": "fun <K : Comparable<K>, V> Map<out K, V>.toSortedMap(): SortedMap<K, V>",
      "desc": "Converts this Map to a SortedMap. The resulting SortedMap determines the equality and order of keys according to their natural sorting order."
    },
    {
      "text": "fun <K, V> Map<out K, V>.toSortedMap( comparator: Comparator<in K>): SortedMap<K, V>",
      "desc": "Converts this Map to a SortedMap. The resulting SortedMap determines the equality and order of keys according to the sorting order provided by the given comparator."
    },
    {
      "text": "fun <T : Comparable<T>> Array<out T>.toSortedSet(): SortedSet<T>",
      "desc": "Returns a new SortedSet of all elements."
    },
    {
      "text": "fun ByteArray.toString(charset: Charset): String",
      "desc": "Converts the contents of this byte array to a string using the specified charset."
    },
    {
      "text": "fun UIntArray.toTypedArray(): Array<UInt>",
      "desc": "Returns a typed object array containing all of the elements of this primitive array."
    },
    {
      "text": "fun <T> Collection<T>.toTypedArray(): Array<T>",
      "desc": "Returns a typed array containing all of the elements of this collection."
    },
    {
      "text": "fun Array<out UByte>.toUByteArray(): UByteArray",
      "desc": "Returns an array of UByte containing all of the elements of this generic array."
    },
    {
      "text": "fun ByteArray.toUByteArray(): UByteArray",
      "desc": "Returns an array of type UByteArray, which is a copy of this array where each element is an unsigned reinterpretation of the corresponding element of this array."
    },
    {
      "text": "fun Collection<UByte>.toUByteArray(): UByteArray",
      "desc": "Returns an array of UByte containing all of the elements of this collection."
    },
    {
      "text": "fun Array<out UInt>.toUIntArray(): UIntArray",
      "desc": "Returns an array of UInt containing all of the elements of this generic array."
    },
    {
      "text": "fun IntArray.toUIntArray(): UIntArray",
      "desc": "Returns an array of type UIntArray, which is a copy of this array where each element is an unsigned reinterpretation of the corresponding element of this array."
    },
    {
      "text": "fun Collection<UInt>.toUIntArray(): UIntArray",
      "desc": "Returns an array of UInt containing all of the elements of this collection."
    },
    {
      "text": "fun Array<out ULong>.toULongArray(): ULongArray",
      "desc": "Returns an array of ULong containing all of the elements of this generic array."
    },
    {
      "text": "fun LongArray.toULongArray(): ULongArray",
      "desc": "Returns an array of type ULongArray, which is a copy of this array where each element is an unsigned reinterpretation of the corresponding element of this array."
    },
    {
      "text": "fun Collection<ULong>.toULongArray(): ULongArray",
      "desc": "Returns an array of ULong containing all of the elements of this collection."
    },
    {
      "text": "fun Array<out UShort>.toUShortArray(): UShortArray",
      "desc": "Returns an array of UShort containing all of the elements of this generic array."
    },
    {
      "text": "fun ShortArray.toUShortArray(): UShortArray",
      "desc": "Returns an array of type UShortArray, which is a copy of this array where each element is an unsigned reinterpretation of the corresponding element of this array."
    },
    {
      "text": "fun Collection<UShort>.toUShortArray(): UShortArray",
      "desc": "Returns an array of UShort containing all of the elements of this collection."
    },
    {
      "text": "infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T>",
      "desc": "Returns a set containing all distinct elements from both collections."
    },
    {
      "text": "fun <T, R> Array<out Pair<T, R>>.unzip(): Pair<List<T>, List<R>>",
      "desc": "Returns a pair of lists, where first list is built from the first values of each pair from this array, second list is built from the second values of each pair from this array."
    },
    {
      "text": "fun <T, R> Iterable<Pair<T, R>>.unzip(): Pair<List<T>, List<R>>",
      "desc": "Returns a pair of lists, where first list is built from the first values of each pair from this collection, second list is built from the second values of each pair from this collection."
    },
    {
      "text": "fun <T> Iterable<T>.windowed( size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>>",
      "desc": "Returns a list of snapshots of the window of the given size sliding along this collection with the given step, where each snapshot is a list."
    },
    {
      "text": "fun <T, R> Iterable<T>.windowed( size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R>",
      "desc": "Returns a list of results of applying the given transform function to an each list representing a view over the window of the given size sliding along this collection with the given step."
    },
    {
      "text": "fun <K, V> Map<K, V>.withDefault( defaultValue: (key: K) -> V): Map<K, V>",
      "desc": "Returns a wrapper of this read-only map, having the implicit default value provided with the specified function defaultValue."
    },
    {
      "text": "fun <K, V> MutableMap<K, V>.withDefault( defaultValue: (key: K) -> V): MutableMap<K, V>",
      "desc": "Returns a wrapper of this mutable map, having the implicit default value provided with the specified function defaultValue."
    },
    {
      "text": "fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>>",
      "desc": "Returns a lazy Iterable that wraps each element of the original array into an IndexedValue containing the index of that element and the element itself."
    },
    {
      "text": "fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>>",
      "desc": "Returns a lazy Iterable that wraps each element of the original collection into an IndexedValue containing the index of that element and the element itself."
    },
    {
      "text": "fun <T> Iterator<T>.withIndex(): Iterator<IndexedValue<T>>",
      "desc": "Returns an Iterator that wraps each element produced by the original iterator into an IndexedValue containing the index of that element and the element itself."
    },
    {
      "text": "infix fun <T, R> Array<out T>.zip( other: Array<out R>): List<Pair<T, R>>",
      "desc": "Returns a list of pairs built from the elements of this array and the other array with the same index. The returned list has length of the shortest collection."
    },
    {
      "text": "fun <T, R, V> Array<out T>.zip( other: Array<out R>, transform: (a: T, b: R) -> V): List<V>",
      "desc": "Returns a list of values built from the elements of this array and the other array with the same index using the provided transform function applied to each pair of elements. The returned list has length of the shortest collection."
    },
    {
      "text": "infix fun <T, R> Array<out T>.zip( other: Iterable<R>): List<Pair<T, R>>",
      "desc": "Returns a list of pairs built from the elements of this collection and other array with the same index. The returned list has length of the shortest collection."
    },
    {
      "text": "fun <T, R, V> Array<out T>.zip( other: Iterable<R>, transform: (a: T, b: R) -> V): List<V>",
      "desc": "Returns a list of values built from the elements of this array and the other collection with the same index using the provided transform function applied to each pair of elements. The returned list has length of the shortest collection."
    },
    {
      "text": "fun <V> ByteArray.zip( other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V>",
      "desc": "Returns a list of values built from the elements of this array and the other array with the same index using the provided transform function applied to each pair of elements. The returned list has length of the shortest array."
    },
    {
      "text": "infix fun <T, R> Iterable<T>.zip( other: Array<out R>): List<Pair<T, R>>",
      "desc": "Returns a list of pairs built from the elements of this collection and the other array with the same index. The returned list has length of the shortest collection."
    },
    {
      "text": "fun <T, R, V> Iterable<T>.zip( other: Array<out R>, transform: (a: T, b: R) -> V): List<V>",
      "desc": "Returns a list of values built from the elements of this collection and the other array with the same index using the provided transform function applied to each pair of elements. The returned list has length of the shortest collection."
    },
    {
      "text": "infix fun <T, R> Iterable<T>.zip( other: Iterable<R>): List<Pair<T, R>>",
      "desc": "Returns a list of pairs built from the elements of this collection and other collection with the same index. The returned list has length of the shortest collection."
    },
    {
      "text": "fun <T, R, V> Iterable<T>.zip( other: Iterable<R>, transform: (a: T, b: R) -> V): List<V>",
      "desc": "Returns a list of values built from the elements of this collection and the other collection with the same index using the provided transform function applied to each pair of elements. The returned list has length of the shortest collection."
    },
    {
      "text": "fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>>",
      "desc": "Returns a list of pairs of each two adjacent elements in this collection."
    },
    {
      "text": "fun <T, R> Iterable<T>.zipWithNext( transform: (a: T, b: T) -> R): List<R>",
      "desc": "Returns a list containing the results of applying the given transform function to an each pair of two adjacent elements in this collection."
    }
  ]
}