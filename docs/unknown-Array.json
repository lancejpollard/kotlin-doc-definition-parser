{
  "type": "unknown",
  "name": "Array",
  "signature": "class Array<T>",
  "items": [
    {
      "text": "<init>(size: Int, init: (Int) -> T)",
      "desc": "Creates a new array with the specified size, where each element is calculated by calling the specified init function."
    },
    {
      "text": "val size: Int",
      "desc": "Returns the number of elements in the array."
    },
    {
      "text": "operator fun get(index: Int): T",
      "desc": "Returns the array element at the specified index. This method can be called using the index operator."
    },
    {
      "text": "operator fun iterator(): Iterator<T>",
      "desc": "Creates an Iterator for iterating over the elements of the array."
    },
    {
      "text": "operator fun set(index: Int, value: T)",
      "desc": "Sets the array element at the specified index to the specified value. This method can be called using the index operator."
    },
    {
      "text": "val <T> Array<out T>.indices: IntRange",
      "desc": "Returns the range of valid indices for the array."
    },
    {
      "text": "val <T> Array<out T>.lastIndex: Int",
      "desc": "Returns the last valid index for the array."
    },
    {
      "text": "fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean",
      "desc": "Returns true if all elements match the given predicate."
    },
    {
      "text": "fun <T> Array<out T>.any(): Boolean",
      "desc": "Returns true if array has at least one element."
    },
    {
      "text": "fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean",
      "desc": "Returns true if at least one element matches the given predicate."
    },
    {
      "text": "fun <T> Array<out T>.asIterable(): Iterable<T>",
      "desc": "Creates an Iterable instance that wraps the original array returning its elements when being iterated."
    },
    {
      "text": "fun <T> Array<out T>.asSequence(): Sequence<T>",
      "desc": "Creates a Sequence instance that wraps the original array returning its elements when being iterated."
    },
    {
      "text": "fun <T, K, V> Array<out T>.associate( transform: (T) -> Pair<K, V>): Map<K, V>",
      "desc": "Returns a Map containing key-value pairs provided by transform function applied to elements of the given array."
    },
    {
      "text": "fun <T, K> Array<out T>.associateBy( keySelector: (T) -> K): Map<K, T>",
      "desc": "Returns a Map containing the elements from the given array indexed by the key returned from keySelector function applied to each element."
    },
    {
      "text": "fun <T, K, V> Array<out T>.associateBy( keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V>",
      "desc": "Returns a Map containing the values provided by valueTransform and indexed by keySelector functions applied to elements of the given array."
    },
    {
      "text": "fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo( destination: M, keySelector: (T) -> K): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs, where key is provided by the keySelector function applied to each element of the given array and value is the element itself."
    },
    {
      "text": "fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo( destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs, where key is provided by the keySelector function and and value is provided by the valueTransform function applied to elements of the given array."
    },
    {
      "text": "fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo( destination: M, transform: (T) -> Pair<K, V>): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs provided by transform function applied to each element of the given array."
    },
    {
      "text": "fun <K, V> Array<out K>.associateWith( valueSelector: (K) -> V): Map<K, V>",
      "desc": "Returns a Map where keys are elements from the given array and values are produced by the valueSelector function applied to each element."
    },
    {
      "text": "fun <K, V, M : MutableMap<in K, in V>> Array<out K>.associateWithTo( destination: M, valueSelector: (K) -> V): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs for each element of the given array, where key is the element itself and value is provided by the valueSelector function applied to that key."
    },
    {
      "text": "fun Array<out Byte>.average(): Double",
      "desc": "Returns an average value of elements in the array."
    },
    {
      "text": "fun <T> Array<out T>.binarySearch( element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int",
      "desc": "Searches the array or the range of the array for the provided element using the binary search algorithm. The array is expected to be sorted according to the specified comparator, otherwise the result is undefined."
    },
    {
      "text": "fun <T> Array<out T>.binarySearch( element: T, fromIndex: Int = 0, toIndex: Int = size): Int",
      "desc": "Searches the array or the range of the array for the provided element using the binary search algorithm. The array is expected to be sorted, otherwise the result is undefined."
    },
    {
      "text": "operator fun <T> Array<out T>.component1(): T",
      "desc": "Returns 1st element from the array."
    },
    {
      "text": "operator fun <T> Array<out T>.component2(): T",
      "desc": "Returns 2nd element from the array."
    },
    {
      "text": "operator fun <T> Array<out T>.component3(): T",
      "desc": "Returns 3rd element from the array."
    },
    {
      "text": "operator fun <T> Array<out T>.component4(): T",
      "desc": "Returns 4th element from the array."
    },
    {
      "text": "operator fun <T> Array<out T>.component5(): T",
      "desc": "Returns 5th element from the array."
    },
    {
      "text": "operator fun <T> Array<out T>.contains(element: T): Boolean",
      "desc": "Returns true if element is found in the array."
    },
    {
      "text": "fun <T> Array<out T>.count(): Int",
      "desc": "Returns the number of elements in this array."
    },
    {
      "text": "fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int",
      "desc": "Returns the number of elements matching the given predicate."
    },
    {
      "text": "fun <T> Array<out T>.distinct(): List<T>",
      "desc": "Returns a list containing only distinct elements from the given array."
    },
    {
      "text": "fun <T, K> Array<out T>.distinctBy( selector: (T) -> K): List<T>",
      "desc": "Returns a list containing only elements from the given array having distinct keys returned by the given selector function."
    },
    {
      "text": "fun <T> Array<out T>.drop(n: Int): List<T>",
      "desc": "Returns a list containing all elements except first n elements."
    },
    {
      "text": "fun <T> Array<out T>.dropLast(n: Int): List<T>",
      "desc": "Returns a list containing all elements except last n elements."
    },
    {
      "text": "fun <T> Array<out T>.dropLastWhile( predicate: (T) -> Boolean): List<T>",
      "desc": "Returns a list containing all elements except last elements that satisfy the given predicate."
    },
    {
      "text": "fun <T> Array<out T>.dropWhile( predicate: (T) -> Boolean): List<T>",
      "desc": "Returns a list containing all elements except first elements that satisfy the given predicate."
    },
    {
      "text": "fun <T> Array<out T>.elementAtOrElse( index: Int, defaultValue: (Int) -> T): T",
      "desc": "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
    },
    {
      "text": "fun <T> Array<out T>.elementAtOrNull(index: Int): T?",
      "desc": "Returns an element at the given index or null if the index is out of bounds of this array."
    },
    {
      "text": "fun <T> Array<out T>.filter( predicate: (T) -> Boolean): List<T>",
      "desc": "Returns a list containing only elements matching the given predicate."
    },
    {
      "text": "fun <T> Array<out T>.filterIndexed( predicate: (index: Int, T) -> Boolean): List<T>",
      "desc": "Returns a list containing only elements matching the given predicate."
    },
    {
      "text": "fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo( destination: C, predicate: (index: Int, T) -> Boolean): C",
      "desc": "Appends all elements matching the given predicate to the given destination."
    },
    {
      "text": "fun <R> Array<*>.filterIsInstance(): List<R>",
      "desc": "Returns a list containing all elements that are instances of specified type parameter R."
    },
    {
      "text": "fun <R> Array<*>.filterIsInstance(klass: Class<R>): List<R>",
      "desc": "Returns a list containing all elements that are instances of specified class."
    },
    {
      "text": "fun <R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo( destination: C): C",
      "desc": "Appends all elements that are instances of specified type parameter R to the given destination."
    },
    {
      "text": "fun <C : MutableCollection<in R>, R> Array<*>.filterIsInstanceTo( destination: C, klass: Class<R>): C",
      "desc": "Appends all elements that are instances of specified class to the given destination."
    },
    {
      "text": "fun <T> Array<out T>.filterNot( predicate: (T) -> Boolean): List<T>",
      "desc": "Returns a list containing all elements not matching the given predicate."
    },
    {
      "text": "fun <T : Any> Array<out T?>.filterNotNull(): List<T>",
      "desc": "Returns a list containing all elements that are not null."
    },
    {
      "text": "fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo( destination: C): C",
      "desc": "Appends all elements that are not null to the given destination."
    },
    {
      "text": "fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo( destination: C, predicate: (T) -> Boolean): C",
      "desc": "Appends all elements not matching the given predicate to the given destination."
    },
    {
      "text": "fun <T, C : MutableCollection<in T>> Array<out T>.filterTo( destination: C, predicate: (T) -> Boolean): C",
      "desc": "Appends all elements matching the given predicate to the given destination."
    },
    {
      "text": "fun <T> Array<out T>.find(predicate: (T) -> Boolean): T?",
      "desc": "Returns the first element matching the given predicate, or null if no such element was found."
    },
    {
      "text": "fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T?",
      "desc": "Returns the last element matching the given predicate, or null if no such element was found."
    },
    {
      "text": "fun <T> Array<out T>.first(): T",
      "desc": "Returns first element."
    },
    {
      "text": "fun <T> Array<out T>.first(predicate: (T) -> Boolean): T",
      "desc": "Returns the first element matching the given predicate."
    },
    {
      "text": "fun <T, R : Any> Array<out T>.firstNotNullOf( transform: (T) -> R?): R",
      "desc": "Returns the first non-null value produced by transform function being applied to elements of this array in iteration order, or throws NoSuchElementException if no non-null value was produced."
    },
    {
      "text": "fun <T, R : Any> Array<out T>.firstNotNullOfOrNull( transform: (T) -> R?): R?",
      "desc": "Returns the first non-null value produced by transform function being applied to elements of this array in iteration order, or null if no non-null value was produced."
    },
    {
      "text": "fun <T> Array<out T>.firstOrNull(): T?",
      "desc": "Returns the first element, or null if the array is empty."
    },
    {
      "text": "fun <T> Array<out T>.firstOrNull( predicate: (T) -> Boolean): T?",
      "desc": "Returns the first element matching the given predicate, or null if element was not found."
    },
    {
      "text": "fun <T, R> any_array<T>.flatMap( transform: (T) -> Iterable<R>): List<R>",
      "desc": "Returns a single list of all elements yielded from results of transform function being invoked on each element of original array."
    },
    {
      "text": "fun <T, R> any_array<T>.flatMapIndexed( transform: (index: Int, T) -> Iterable<R>): List<R>",
      "desc": "Returns a single list of all elements yielded from results of transform function being invoked on each element and its index in the original array."
    },
    {
      "text": "fun <T, R, C : MutableCollection<in R>> any_array<T>.flatMapIndexedTo( destination: C, transform: (index: Int, T) -> Iterable<R>): C",
      "desc": "Appends all elements yielded from results of transform function being invoked on each element and its index in the original array, to the given destination."
    },
    {
      "text": "fun <T, R, C : MutableCollection<in R>> any_array<T>.flatMapTo( destination: C, transform: (T) -> Iterable<R>): C",
      "desc": "Appends all elements yielded from results of transform function being invoked on each element of original array, to the given destination."
    },
    {
      "text": "fun <T> Array<out Array<out T>>.flatten(): List<T>",
      "desc": "Returns a single list of all elements from all arrays in the given array."
    },
    {
      "text": "fun <T, R> Array<out T>.fold( initial: R, operation: (acc: R, T) -> R): R",
      "desc": "Accumulates value starting with initial value and applying operation from left to right to current accumulator value and each element."
    },
    {
      "text": "fun <T, R> Array<out T>.foldIndexed( initial: R, operation: (index: Int, acc: R, T) -> R): R",
      "desc": "Accumulates value starting with initial value and applying operation from left to right to current accumulator value and each element with its index in the original array."
    },
    {
      "text": "fun <T, R> Array<out T>.foldRight( initial: R, operation: (T, acc: R) -> R): R",
      "desc": "Accumulates value starting with initial value and applying operation from right to left to each element and current accumulator value."
    },
    {
      "text": "fun <T, R> Array<out T>.foldRightIndexed( initial: R, operation: (index: Int, T, acc: R) -> R): R",
      "desc": "Accumulates value starting with initial value and applying operation from right to left to each element with its index in the original array and current accumulator value."
    },
    {
      "text": "fun <T> Array<out T>.forEach(action: (T) -> Unit)",
      "desc": "Performs the given action on each element."
    },
    {
      "text": "fun <T> Array<out T>.forEachIndexed( action: (index: Int, T) -> Unit)",
      "desc": "Performs the given action on each element, providing sequential index with the element."
    },
    {
      "text": "fun <T> Array<out T>.getOrElse( index: Int, defaultValue: (Int) -> T): T",
      "desc": "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this array."
    },
    {
      "text": "fun <T> Array<out T>.getOrNull(index: Int): T?",
      "desc": "Returns an element at the given index or null if the index is out of bounds of this array."
    },
    {
      "text": "fun <T, K> Array<out T>.groupBy( keySelector: (T) -> K): Map<K, List<T>>",
      "desc": "Groups elements of the original array by the key returned by the given keySelector function applied to each element and returns a map where each group key is associated with a list of corresponding elements."
    },
    {
      "text": "fun <T, K, V> Array<out T>.groupBy( keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>>",
      "desc": "Groups values returned by the valueTransform function applied to each element of the original array by the key returned by the given keySelector function applied to the element and returns a map where each group key is associated with a list of corresponding values."
    },
    {
      "text": "fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo( destination: M, keySelector: (T) -> K): M",
      "desc": "Groups elements of the original array by the key returned by the given keySelector function applied to each element and puts to the destination map each group key associated with a list of corresponding elements."
    },
    {
      "text": "fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo( destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M",
      "desc": "Groups values returned by the valueTransform function applied to each element of the original array by the key returned by the given keySelector function applied to the element and puts to the destination map each group key associated with a list of corresponding values."
    },
    {
      "text": "fun <T, K> Array<out T>.groupingBy( keySelector: (T) -> K): Grouping<T, K>",
      "desc": "Creates a Grouping source from an array to be used later with one of group-and-fold operations using the specified keySelector function to extract a key from each element."
    },
    {
      "text": "fun <T> Array<out T>.indexOf(element: T): Int",
      "desc": "Returns first index of element, or -1 if the array does not contain element."
    },
    {
      "text": "fun <T> Array<out T>.indexOfFirst( predicate: (T) -> Boolean): Int",
      "desc": "Returns index of the first element matching the given predicate, or -1 if the array does not contain such element."
    },
    {
      "text": "fun <T> Array<out T>.indexOfLast( predicate: (T) -> Boolean): Int",
      "desc": "Returns index of the last element matching the given predicate, or -1 if the array does not contain such element."
    },
    {
      "text": "infix fun <T> Array<out T>.intersect( other: Iterable<T>): Set<T>",
      "desc": "Returns a set containing all elements that are contained by both this array and the specified collection."
    },
    {
      "text": "fun <T : Any> Array<*>.isArrayOf(): Boolean",
      "desc": "Checks if array can contain element of type T."
    },
    {
      "text": "fun <T> Array<out T>.isEmpty(): Boolean",
      "desc": "Returns true if the array is empty."
    },
    {
      "text": "fun <T> Array<out T>.isNotEmpty(): Boolean",
      "desc": "Returns true if the array is not empty."
    },
    {
      "text": "fun Array<*>?.isNullOrEmpty(): Boolean",
      "desc": "Returns true if this nullable array is either null or empty."
    },
    {
      "text": "fun <T, A : Appendable> Array<out T>.joinTo( buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A",
      "desc": "Appends the string from all the elements separated using separator and using the given prefix and postfix if supplied."
    },
    {
      "text": "fun <T> Array<out T>.joinToString( separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String",
      "desc": "Creates a string from all the elements separated using separator and using the given prefix and postfix if supplied."
    },
    {
      "text": "fun <T> Array<out T>.last(): T",
      "desc": "Returns the last element."
    },
    {
      "text": "fun <T> Array<out T>.last(predicate: (T) -> Boolean): T",
      "desc": "Returns the last element matching the given predicate."
    },
    {
      "text": "fun <T> Array<out T>.lastIndexOf(element: T): Int",
      "desc": "Returns last index of element, or -1 if the array does not contain element."
    },
    {
      "text": "fun <T> Array<out T>.lastOrNull(): T?",
      "desc": "Returns the last element, or null if the array is empty."
    },
    {
      "text": "fun <T> Array<out T>.lastOrNull( predicate: (T) -> Boolean): T?",
      "desc": "Returns the last element matching the given predicate, or null if no such element was found."
    },
    {
      "text": "fun <T, R> Array<out T>.map(transform: (T) -> R): List<R>",
      "desc": "Returns a list containing the results of applying the given transform function to each element in the original array."
    },
    {
      "text": "fun <T, R> Array<out T>.mapIndexed( transform: (index: Int, T) -> R): List<R>",
      "desc": "Returns a list containing the results of applying the given transform function to each element and its index in the original array."
    },
    {
      "text": "fun <T, R : Any> Array<out T>.mapIndexedNotNull( transform: (index: Int, T) -> R?): List<R>",
      "desc": "Returns a list containing only the non-null results of applying the given transform function to each element and its index in the original array."
    },
    {
      "text": "fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo( destination: C, transform: (index: Int, T) -> R?): C",
      "desc": "Applies the given transform function to each element and its index in the original array and appends only the non-null results to the given destination."
    },
    {
      "text": "fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo( destination: C, transform: (index: Int, T) -> R): C",
      "desc": "Applies the given transform function to each element and its index in the original array and appends the results to the given destination."
    },
    {
      "text": "fun <T, R : Any> Array<out T>.mapNotNull( transform: (T) -> R?): List<R>",
      "desc": "Returns a list containing only the non-null results of applying the given transform function to each element in the original array."
    },
    {
      "text": "fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo( destination: C, transform: (T) -> R?): C",
      "desc": "Applies the given transform function to each element in the original array and appends only the non-null results to the given destination."
    },
    {
      "text": "fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo( destination: C, transform: (T) -> R): C",
      "desc": "Applies the given transform function to each element of the original array and appends the results to the given destination."
    },
    {
      "text": "fun <T : Comparable<T>> any_array<T>.max(): T?"
    },
    {
      "text": "fun <T, R : Comparable<R>> Array<out T>.maxBy( selector: (T) -> R): T?"
    },
    {
      "text": "fun <T, R : Comparable<R>> Array<out T>.maxByOrNull( selector: (T) -> R): T?",
      "desc": "Returns the first element yielding the largest value of the given function or null if there are no elements."
    },
    {
      "text": "fun <T> any_array<T>.maxOf(selector: (T) -> Double): Double",
      "desc": "Returns the largest value among all values produced by selector function applied to each element in the array."
    },
    {
      "text": "fun <T> any_array<T>.maxOfOrNull( selector: (T) -> Double): Double?",
      "desc": "Returns the largest value among all values produced by selector function applied to each element in the array or null if there are no elements."
    },
    {
      "text": "fun <T, R> Array<out T>.maxOfWith( comparator: Comparator<in R>, selector: (T) -> R): R",
      "desc": "Returns the largest value according to the provided comparator among all values produced by selector function applied to each element in the array."
    },
    {
      "text": "fun <T, R> Array<out T>.maxOfWithOrNull( comparator: Comparator<in R>, selector: (T) -> R): R?",
      "desc": "Returns the largest value according to the provided comparator among all values produced by selector function applied to each element in the array or null if there are no elements."
    },
    {
      "text": "fun <T : Comparable<T>> any_array<T>.maxOrNull(): T?",
      "desc": "Returns the largest element or null if there are no elements."
    },
    {
      "text": "fun <T> Array<out T>.maxWith( comparator: Comparator<in T>): T?"
    },
    {
      "text": "fun <T> Array<out T>.maxWithOrNull( comparator: Comparator<in T>): T?",
      "desc": "Returns the first element having the largest value according to the provided comparator or null if there are no elements."
    },
    {
      "text": "fun <T : Comparable<T>> any_array<T>.min(): T?"
    },
    {
      "text": "fun <T, R : Comparable<R>> Array<out T>.minBy( selector: (T) -> R): T?"
    },
    {
      "text": "fun <T, R : Comparable<R>> Array<out T>.minByOrNull( selector: (T) -> R): T?",
      "desc": "Returns the first element yielding the smallest value of the given function or null if there are no elements."
    },
    {
      "text": "fun <T> any_array<T>.minOf(selector: (T) -> Double): Double",
      "desc": "Returns the smallest value among all values produced by selector function applied to each element in the array."
    },
    {
      "text": "fun <T> any_array<T>.minOfOrNull( selector: (T) -> Double): Double?",
      "desc": "Returns the smallest value among all values produced by selector function applied to each element in the array or null if there are no elements."
    },
    {
      "text": "fun <T, R> Array<out T>.minOfWith( comparator: Comparator<in R>, selector: (T) -> R): R",
      "desc": "Returns the smallest value according to the provided comparator among all values produced by selector function applied to each element in the array."
    },
    {
      "text": "fun <T, R> Array<out T>.minOfWithOrNull( comparator: Comparator<in R>, selector: (T) -> R): R?",
      "desc": "Returns the smallest value according to the provided comparator among all values produced by selector function applied to each element in the array or null if there are no elements."
    },
    {
      "text": "fun <T : Comparable<T>> any_array<T>.minOrNull(): T?",
      "desc": "Returns the smallest element or null if there are no elements."
    },
    {
      "text": "fun <T> Array<out T>.minWith( comparator: Comparator<in T>): T?"
    },
    {
      "text": "fun <T> Array<out T>.minWithOrNull( comparator: Comparator<in T>): T?",
      "desc": "Returns the first element having the smallest value according to the provided comparator or null if there are no elements."
    },
    {
      "text": "fun <T> Array<out T>.none(): Boolean",
      "desc": "Returns true if the array has no elements."
    },
    {
      "text": "fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean",
      "desc": "Returns true if no elements match the given predicate."
    },
    {
      "text": "fun <T> Array<out T>.onEach( action: (T) -> Unit): Array<out T>",
      "desc": "Performs the given action on each element and returns the array itself afterwards."
    },
    {
      "text": "fun <T> Array<out T>.onEachIndexed( action: (index: Int, T) -> Unit): Array<out T>",
      "desc": "Performs the given action on each element, providing sequential index with the element, and returns the array itself afterwards."
    },
    {
      "text": "fun <T> Array<out T>.partition( predicate: (T) -> Boolean): Pair<List<T>, List<T>>",
      "desc": "Splits the original array into pair of lists, where first list contains elements for which predicate yielded true, while second list contains elements for which predicate yielded false."
    },
    {
      "text": "fun <T> Array<out T>.random(): T",
      "desc": "Returns a random element from this array."
    },
    {
      "text": "fun <T> Array<out T>.random(random: Random): T",
      "desc": "Returns a random element from this array using the specified source of randomness."
    },
    {
      "text": "fun <T> Array<out T>.randomOrNull(): T?",
      "desc": "Returns a random element from this array, or null if this array is empty."
    },
    {
      "text": "fun <T> Array<out T>.randomOrNull(random: Random): T?",
      "desc": "Returns a random element from this array using the specified source of randomness, or null if this array is empty."
    },
    {
      "text": "fun <S, T : S> Array<out T>.reduce( operation: (acc: S, T) -> S): S",
      "desc": "Accumulates value starting with the first element and applying operation from left to right to current accumulator value and each element."
    },
    {
      "text": "fun <S, T : S> Array<out T>.reduceIndexed( operation: (index: Int, acc: S, T) -> S): S",
      "desc": "Accumulates value starting with the first element and applying operation from left to right to current accumulator value and each element with its index in the original array."
    },
    {
      "text": "fun <S, T : S> Array<out T>.reduceIndexedOrNull( operation: (index: Int, acc: S, T) -> S): S?",
      "desc": "Accumulates value starting with the first element and applying operation from left to right to current accumulator value and each element with its index in the original array."
    },
    {
      "text": "fun <S, T : S> Array<out T>.reduceOrNull( operation: (acc: S, T) -> S): S?",
      "desc": "Accumulates value starting with the first element and applying operation from left to right to current accumulator value and each element."
    },
    {
      "text": "fun <S, T : S> Array<out T>.reduceRight( operation: (T, acc: S) -> S): S",
      "desc": "Accumulates value starting with the last element and applying operation from right to left to each element and current accumulator value."
    },
    {
      "text": "fun <S, T : S> Array<out T>.reduceRightIndexed( operation: (index: Int, T, acc: S) -> S): S",
      "desc": "Accumulates value starting with the last element and applying operation from right to left to each element with its index in the original array and current accumulator value."
    },
    {
      "text": "fun <S, T : S> Array<out T>.reduceRightIndexedOrNull( operation: (index: Int, T, acc: S) -> S): S?",
      "desc": "Accumulates value starting with the last element and applying operation from right to left to each element with its index in the original array and current accumulator value."
    },
    {
      "text": "fun <S, T : S> Array<out T>.reduceRightOrNull( operation: (T, acc: S) -> S): S?",
      "desc": "Accumulates value starting with the last element and applying operation from right to left to each element and current accumulator value."
    },
    {
      "text": "fun <T : Any> Array<T?>.requireNoNulls(): Array<T>",
      "desc": "Returns an original collection containing all the non-null elements, throwing an IllegalArgumentException if there are any null elements."
    },
    {
      "text": "fun <T> Array<T>.reverse()",
      "desc": "Reverses elements in the array in-place."
    },
    {
      "text": "fun <T> Array<T>.reverse(fromIndex: Int, toIndex: Int)",
      "desc": "Reverses elements of the array in the specified range in-place."
    },
    {
      "text": "fun <T> Array<out T>.reversed(): List<T>",
      "desc": "Returns a list with elements in reversed order."
    },
    {
      "text": "fun <T> Array<T>.reversedArray(): Array<T>",
      "desc": "Returns an array with elements of this array in reversed order."
    },
    {
      "text": "fun <T, R> Array<out T>.runningFold( initial: R, operation: (acc: R, T) -> R): List<R>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element and current accumulator value that starts with initial value."
    },
    {
      "text": "fun <T, R> Array<out T>.runningFoldIndexed( initial: R, operation: (index: Int, acc: R, T) -> R): List<R>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element, its index in the original array and current accumulator value that starts with initial value."
    },
    {
      "text": "fun <S, T : S> Array<out T>.runningReduce( operation: (acc: S, T) -> S): List<S>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element and current accumulator value that starts with the first element of this array."
    },
    {
      "text": "fun <S, T : S> Array<out T>.runningReduceIndexed( operation: (index: Int, acc: S, T) -> S): List<S>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element, its index in the original array and current accumulator value that starts with the first element of this array."
    },
    {
      "text": "fun <T, R> Array<out T>.scan( initial: R, operation: (acc: R, T) -> R): List<R>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element and current accumulator value that starts with initial value."
    },
    {
      "text": "fun <T, R> Array<out T>.scanIndexed( initial: R, operation: (index: Int, acc: R, T) -> R): List<R>",
      "desc": "Returns a list containing successive accumulation values generated by applying operation from left to right to each element, its index in the original array and current accumulator value that starts with initial value."
    },
    {
      "text": "fun <T> Array<T>.shuffle()",
      "desc": "Randomly shuffles elements in this array in-place."
    },
    {
      "text": "fun <T> Array<T>.shuffle(random: Random)",
      "desc": "Randomly shuffles elements in this array in-place using the specified random instance as the source of randomness."
    },
    {
      "text": "fun <T> Array<out T>.single(): T",
      "desc": "Returns the single element, or throws an exception if the array is empty or has more than one element."
    },
    {
      "text": "fun <T> Array<out T>.single(predicate: (T) -> Boolean): T",
      "desc": "Returns the single element matching the given predicate, or throws exception if there is no or more than one matching element."
    },
    {
      "text": "fun <T> Array<out T>.singleOrNull(): T?",
      "desc": "Returns single element, or null if the array is empty or has more than one element."
    },
    {
      "text": "fun <T> Array<out T>.singleOrNull( predicate: (T) -> Boolean): T?",
      "desc": "Returns the single element matching the given predicate, or null if element was not found or more than one element was found."
    },
    {
      "text": "fun <T> Array<out T>.slice(indices: IntRange): List<T>",
      "desc": "Returns a list containing elements at indices in the specified indices range."
    },
    {
      "text": "fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T>",
      "desc": "Returns a list containing elements at specified indices."
    },
    {
      "text": "fun <T> Array<T>.sliceArray( indices: Collection<Int>): Array<T>",
      "desc": "Returns an array containing elements of this array at specified indices."
    },
    {
      "text": "fun <T> Array<T>.sliceArray(indices: IntRange): Array<T>",
      "desc": "Returns an array containing elements at indices in the specified indices range."
    },
    {
      "text": "fun <T> Array<out T>.sort(comparison: (a: T, b: T) -> Int)",
      "desc": "Sorts the array in-place according to the order specified by the given comparison function."
    },
    {
      "text": "fun <T, R : Comparable<R>> Array<out T>.sortBy( selector: (T) -> R?)",
      "desc": "Sorts elements in the array in-place according to natural sort order of the value returned by specified selector function."
    },
    {
      "text": "fun <T, R : Comparable<R>> Array<out T>.sortByDescending( selector: (T) -> R?)",
      "desc": "Sorts elements in the array in-place descending according to natural sort order of the value returned by specified selector function."
    },
    {
      "text": "fun <T : Comparable<T>> Array<out T>.sortDescending()",
      "desc": "Sorts elements in the array in-place descending according to their natural sort order."
    },
    {
      "text": "fun <T : Comparable<T>> Array<out T>.sortDescending( fromIndex: Int, toIndex: Int)",
      "desc": "Sorts elements of the array in the specified range in-place. The elements are sorted descending according to their natural sort order."
    },
    {
      "text": "fun <T : Comparable<T>> Array<out T>.sorted(): List<T>",
      "desc": "Returns a list of all elements sorted according to their natural sort order."
    },
    {
      "text": "fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T>",
      "desc": "Returns an array with all elements of this array sorted according to their natural sort order."
    },
    {
      "text": "fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T>",
      "desc": "Returns an array with all elements of this array sorted descending according to their natural sort order."
    },
    {
      "text": "fun <T> Array<out T>.sortedArrayWith( comparator: Comparator<in T>): Array<out T>",
      "desc": "Returns an array with all elements of this array sorted according the specified comparator."
    },
    {
      "text": "fun <T, R : Comparable<R>> Array<out T>.sortedBy( selector: (T) -> R?): List<T>",
      "desc": "Returns a list of all elements sorted according to natural sort order of the value returned by specified selector function."
    },
    {
      "text": "fun <T, R : Comparable<R>> Array<out T>.sortedByDescending( selector: (T) -> R?): List<T>",
      "desc": "Returns a list of all elements sorted descending according to natural sort order of the value returned by specified selector function."
    },
    {
      "text": "fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T>",
      "desc": "Returns a list of all elements sorted descending according to their natural sort order."
    },
    {
      "text": "fun <T> Array<out T>.sortedWith( comparator: Comparator<in T>): List<T>",
      "desc": "Returns a list of all elements sorted according to the specified comparator."
    },
    {
      "text": "fun <T> Array<out T>.sortWith(comparator: Comparator<in T>)",
      "desc": "Sorts the array in-place according to the order specified by the given comparator."
    },
    {
      "text": "fun <T> Array<out T>.sortWith( comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size)",
      "desc": "Sorts a range in the array in-place with the given comparator."
    },
    {
      "text": "fun <T> Array<out T>.subarrayContentToString( offset: Int, length: Int): String",
      "desc": "Returns a string representation of the contents of the subarray of the specified array as if it is List."
    },
    {
      "text": "infix fun <T> Array<out T>.subtract( other: Iterable<T>): Set<T>",
      "desc": "Returns a set containing all elements that are contained by this array and not contained by the specified collection."
    },
    {
      "text": "fun Array<out Byte>.sum(): Int",
      "desc": "Returns the sum of all elements in the array."
    },
    {
      "text": "fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int",
      "desc": "Returns the sum of all values produced by selector function applied to each element in the array."
    },
    {
      "text": "fun <T> Array<out T>.sumByDouble( selector: (T) -> Double): Double",
      "desc": "Returns the sum of all values produced by selector function applied to each element in the array."
    },
    {
      "text": "fun <T> any_array<T>.sumOf(selector: (T) -> Double): Double",
      "desc": "Returns the sum of all values produced by selector function applied to each element in the array."
    },
    {
      "text": "fun <T> Array<out T>.take(n: Int): List<T>",
      "desc": "Returns a list containing first n elements."
    },
    {
      "text": "fun <T> Array<out T>.takeLast(n: Int): List<T>",
      "desc": "Returns a list containing last n elements."
    },
    {
      "text": "fun <T> Array<out T>.takeLastWhile( predicate: (T) -> Boolean): List<T>",
      "desc": "Returns a list containing last elements satisfying the given predicate."
    },
    {
      "text": "fun <T> Array<out T>.takeWhile( predicate: (T) -> Boolean): List<T>",
      "desc": "Returns a list containing first elements satisfying the given predicate."
    },
    {
      "text": "fun Array<out Boolean>.toBooleanArray(): BooleanArray",
      "desc": "Returns an array of Boolean containing all of the elements of this generic array."
    },
    {
      "text": "fun Array<out Byte>.toByteArray(): ByteArray",
      "desc": "Returns an array of Byte containing all of the elements of this generic array."
    },
    {
      "text": "fun Array<out Char>.toCharArray(): CharArray",
      "desc": "Returns an array of Char containing all of the elements of this generic array."
    },
    {
      "text": "fun <T, C : MutableCollection<in T>> Array<out T>.toCollection( destination: C): C",
      "desc": "Appends all elements to the given destination collection."
    },
    {
      "text": "fun Array<String>.toCStringArray( autofreeScope: AutofreeScope): CPointer<CPointerVar<ByteVar>>",
      "desc": "Convert this array of Kotlin strings to C array of C strings, allocating memory for the array and C strings with given AutofreeScope."
    },
    {
      "text": "fun <T : CPointed> Array<CPointer<T>?>.toCValues(): CValues<CPointerVar<T>>"
    },
    {
      "text": "fun Array<out Double>.toDoubleArray(): DoubleArray",
      "desc": "Returns an array of Double containing all of the elements of this generic array."
    },
    {
      "text": "fun Array<out Float>.toFloatArray(): FloatArray",
      "desc": "Returns an array of Float containing all of the elements of this generic array."
    },
    {
      "text": "fun <T> Array<out T>.toHashSet(): HashSet<T>",
      "desc": "Returns a new HashSet of all elements."
    },
    {
      "text": "fun Array<out Int>.toIntArray(): IntArray",
      "desc": "Returns an array of Int containing all of the elements of this generic array."
    },
    {
      "text": "fun <T> Array<out T>.toList(): List<T>",
      "desc": "Returns a List containing all elements."
    },
    {
      "text": "fun Array<out Long>.toLongArray(): LongArray",
      "desc": "Returns an array of Long containing all of the elements of this generic array."
    },
    {
      "text": "fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V>",
      "desc": "Returns a new map containing all key-value pairs from the given array of pairs."
    },
    {
      "text": "fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap( destination: M): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs from the given array of pairs."
    },
    {
      "text": "fun <T> Array<out T>.toMutableList(): MutableList<T>",
      "desc": "Returns a new MutableList filled with all elements of this array."
    },
    {
      "text": "fun <T> Array<out T>.toMutableSet(): MutableSet<T>",
      "desc": "Returns a new MutableSet containing all distinct elements from the given array."
    },
    {
      "text": "fun <T> Array<out T>.toSet(): Set<T>",
      "desc": "Returns a Set of all elements."
    },
    {
      "text": "fun Array<out Short>.toShortArray(): ShortArray",
      "desc": "Returns an array of Short containing all of the elements of this generic array."
    },
    {
      "text": "fun <T : Comparable<T>> any_array<T>.toSortedSet(): SortedSet<T>",
      "desc": "Returns a new SortedSet of all elements."
    },
    {
      "text": "fun Array<out UByte>.toUByteArray(): UByteArray",
      "desc": "Returns an array of UByte containing all of the elements of this generic array."
    },
    {
      "text": "fun Array<out UInt>.toUIntArray(): UIntArray",
      "desc": "Returns an array of UInt containing all of the elements of this generic array."
    },
    {
      "text": "fun Array<out ULong>.toULongArray(): ULongArray",
      "desc": "Returns an array of ULong containing all of the elements of this generic array."
    },
    {
      "text": "fun Array<out UShort>.toUShortArray(): UShortArray",
      "desc": "Returns an array of UShort containing all of the elements of this generic array."
    },
    {
      "text": "infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T>",
      "desc": "Returns a set containing all distinct elements from both collections."
    },
    {
      "text": "fun <T, R> Array<out Pair<T, R>>.unzip(): Pair<List<T>, List<R>>",
      "desc": "Returns a pair of lists, where first list is built from the first values of each pair from this array, second list is built from the second values of each pair from this array."
    },
    {
      "text": "fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>>",
      "desc": "Returns a lazy Iterable that wraps each element of the original array into an IndexedValue containing the index of that element and the element itself."
    },
    {
      "text": "infix fun <T, R> Array<out T>.zip( other: Array<out R>): List<Pair<T, R>>",
      "desc": "Returns a list of pairs built from the elements of this array and the other array with the same index. The returned list has length of the shortest collection."
    },
    {
      "text": "fun <T, R, V> Array<out T>.zip( other: Array<out R>, transform: (a: T, b: R) -> V): List<V>",
      "desc": "Returns a list of values built from the elements of this array and the other array with the same index using the provided transform function applied to each pair of elements. The returned list has length of the shortest collection."
    },
    {
      "text": "infix fun <T, R> Array<out T>.zip( other: Iterable<R>): List<Pair<T, R>>",
      "desc": "Returns a list of pairs built from the elements of this collection and other array with the same index. The returned list has length of the shortest collection."
    },
    {
      "text": "fun <T, R, V> Array<out T>.zip( other: Iterable<R>, transform: (a: T, b: R) -> V): List<V>",
      "desc": "Returns a list of values built from the elements of this array and the other collection with the same index using the provided transform function applied to each pair of elements. The returned list has length of the shortest collection."
    }
  ]
}