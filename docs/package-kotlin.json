{
  "type": "package",
  "name": "kotlin",
  "items": [
    {
      "text": "interface Annotation",
      "desc": "Base interface implicitly implemented by all annotation interfaces. See Kotlin language documentation for more information on annotations."
    },
    {
      "text": "open class Any",
      "desc": "The root of the Kotlin class hierarchy. Every Kotlin class has Any as a superclass."
    },
    {
      "text": "class Array<T>",
      "desc": "Represents an array (specifically, a Java array when targeting the JVM platform). Array instances can be created using the arrayOf, arrayOfNulls and emptyArray standard library functions. See Kotlin language documentation for more information on arrays."
    },
    {
      "text": "open class ArrayIndexOutOfBoundsException : IndexOutOfBoundsException"
    },
    {
      "text": "class Boolean : Comparable<Boolean>",
      "desc": "Represents a value which is either true or false. On the JVM, non-nullable values of this type are represented as values of the primitive type boolean."
    },
    {
      "text": "class BooleanArray",
      "desc": "An array of booleans. When targeting the JVM, instances of this class are represented as boolean[]."
    },
    {
      "text": "class Byte : Number, Comparable<Byte>",
      "desc": "Represents a 8-bit signed integer. On the JVM, non-nullable values of this type are represented as values of the primitive type byte."
    },
    {
      "text": "class ByteArray",
      "desc": "An array of bytes. When targeting the JVM, instances of this class are represented as byte[]."
    },
    {
      "text": "class Char : Comparable<Char>",
      "desc": "Represents a 16-bit Unicode character."
    },
    {
      "text": "class CharArray",
      "desc": "An array of chars. When targeting the JVM, instances of this class are represented as char[]."
    },
    {
      "text": "interface CharSequence",
      "desc": "Represents a readable sequence of Char values."
    },
    {
      "text": "interface Comparable<in T>",
      "desc": "Classes which inherit from this interface have a defined total ordering between their instances."
    },
    {
      "text": "fun interface Comparator<T>",
      "desc": "Provides a comparison function for imposing a total ordering between instances of the type T."
    },
    {
      "text": "class DeepRecursiveFunction<T, R>",
      "desc": "Defines deep recursive function that keeps its stack on the heap, which allows very deep recursive computations that do not use the actual call stack. To initiate a call to this deep recursive function use its invoke function. As a rule of thumb, it should be used if recursion goes deeper than a thousand calls."
    },
    {
      "text": "sealed class DeepRecursiveScope<T, R>",
      "desc": "A scope class for DeepRecursiveFunction function declaration that defines callRecursive methods to recursively call this function or another DeepRecursiveFunction putting the call activation frame on the heap."
    },
    {
      "text": "enum class DeprecationLevel",
      "desc": "Possible levels of a deprecation. The level specifies how the deprecated element usages are reported in code."
    },
    {
      "text": "class Double : Number, Comparable<Double>",
      "desc": "Represents a double-precision 64-bit IEEE 754 floating point number. On the JVM, non-nullable values of this type are represented as values of the primitive type double."
    },
    {
      "text": "class DoubleArray",
      "desc": "An array of doubles. When targeting the JVM, instances of this class are represented as double[]."
    },
    {
      "text": "abstract class Enum<E : Enum<E>> : Comparable<E>",
      "desc": "The common base class of all enum classes. See the Kotlin language documentation for more information on enum classes."
    },
    {
      "text": "class Float : Number, Comparable<Float>",
      "desc": "Represents a single-precision 32-bit IEEE 754 floating point number. On the JVM, non-nullable values of this type are represented as values of the primitive type float."
    },
    {
      "text": "class FloatArray",
      "desc": "An array of floats. When targeting the JVM, instances of this class are represented as float[]."
    },
    {
      "text": "interface Function<out R>",
      "desc": "Represents a value of a functional type, such as a lambda, an anonymous function or a function reference."
    },
    {
      "text": "class Int : Number, Comparable<Int>",
      "desc": "Represents a 32-bit signed integer. On the JVM, non-nullable values of this type are represented as values of the primitive type int."
    },
    {
      "text": "class IntArray",
      "desc": "An array of ints. When targeting the JVM, instances of this class are represented as int[]."
    },
    {
      "text": "class KotlinVersion : Comparable<KotlinVersion>",
      "desc": "Represents a version of the Kotlin standard library."
    },
    {
      "text": "interface Lazy<out T>",
      "desc": "Represents a value with lazy initialization."
    },
    {
      "text": "enum class LazyThreadSafetyMode",
      "desc": "Specifies how a Lazy instance synchronizes initialization among multiple threads."
    },
    {
      "text": "class Long : Number, Comparable<Long>",
      "desc": "Represents a 64-bit signed integer. On the JVM, non-nullable values of this type are represented as values of the primitive type long."
    },
    {
      "text": "class LongArray",
      "desc": "An array of longs. When targeting the JVM, instances of this class are represented as long[]."
    },
    {
      "text": "class Nothing",
      "desc": "Nothing has no instances. You can use Nothing to represent \"a value that never exists\": for example, if a function has the return type of Nothing, it means that it never returns (always throws an exception)."
    },
    {
      "text": "abstract class Number",
      "desc": "Superclass for all platform classes representing numeric values."
    },
    {
      "text": "open class OutOfMemoryError : Error"
    },
    {
      "text": "data class Pair<out A, out B> : Serializable",
      "desc": "Represents a generic pair of two values."
    },
    {
      "text": "class Result<out T> : Serializable",
      "desc": "A discriminated union that encapsulates a successful outcome with a value of type T or a failure with an arbitrary Throwable exception."
    },
    {
      "text": "class Short : Number, Comparable<Short>",
      "desc": "Represents a 16-bit signed integer. On the JVM, non-nullable values of this type are represented as values of the primitive type short."
    },
    {
      "text": "class ShortArray",
      "desc": "An array of shorts. When targeting the JVM, instances of this class are represented as short[]."
    },
    {
      "text": "class String : Comparable<String>, CharSequence",
      "desc": "The String class represents character strings. All string literals in Kotlin programs, such as \"abc\", are implemented as instances of this class."
    },
    {
      "text": "open class Throwable",
      "desc": "The base class for all errors and exceptions. Only instances of this class can be thrown or caught."
    },
    {
      "text": "data class Triple<out A, out B, out C> : Serializable",
      "desc": "Represents a triad of values"
    },
    {
      "text": "class UByte : Comparable<UByte>"
    },
    {
      "text": "class UByteArray : Collection<UByte>"
    },
    {
      "text": "class UInt : Comparable<UInt>"
    },
    {
      "text": "class UIntArray : Collection<UInt>"
    },
    {
      "text": "class ULong : Comparable<ULong>"
    },
    {
      "text": "class ULongArray : Collection<ULong>"
    },
    {
      "text": "object Unit",
      "desc": "The type with only one value: the Unit object. This type corresponds to the void type in Java."
    },
    {
      "text": "class UShort : Comparable<UShort>"
    },
    {
      "text": "class UShortArray : Collection<UShort>"
    },
    {
      "text": "annotation class BuilderInference",
      "desc": "Allows to infer generic type arguments of a function from the calls in the annotated function parameter of that function."
    },
    {
      "text": "annotation class Deprecated",
      "desc": "Marks the annotated declaration as deprecated."
    },
    {
      "text": "annotation class DeprecatedSinceKotlin",
      "desc": "Marks the annotated declaration as deprecated. In contrast to Deprecated, severity of the reported diagnostic is not a constant value, but differs depending on the API version of the usage (the value of the -api-version argument when compiling the module where the usage is located). If the API version is greater or equal than hiddenSince, the declaration will not be accessible from the code (as if it was deprecated with level DeprecationLevel.HIDDEN), otherwise if the API version is greater or equal than errorSince, the usage will be marked as an error (as with DeprecationLevel.ERROR), otherwise if the API version is greater or equal than warningSince, the usage will be marked as a warning (as with DeprecationLevel.WARNING), otherwise the annotation is ignored."
    },
    {
      "text": "annotation class DslMarker",
      "desc": "When applied to annotation class X specifies that X defines a DSL language"
    },
    {
      "text": "annotation class Experimental",
      "desc": "Signals that the annotated annotation class is a marker of an experimental API."
    },
    {
      "text": "annotation class ExperimentalMultiplatform",
      "desc": "The experimental multiplatform support API marker."
    },
    {
      "text": "annotation class ExperimentalStdlibApi",
      "desc": "This annotation marks the standard library API that is considered experimental and is not subject to the general compatibility guarantees given for the standard library: the behavior of such API may be changed or the API may be removed completely in any further release."
    },
    {
      "text": "annotation class ExperimentalUnsignedTypes",
      "desc": "Marks the API that is dependent on the experimental unsigned types, including those types themselves."
    },
    {
      "text": "annotation class ExtensionFunctionType",
      "desc": "Signifies that the annotated functional type represents an extension function."
    },
    {
      "text": "annotation class Metadata",
      "desc": "This annotation is present on any class file produced by the Kotlin compiler and is read by the compiler and reflection. Parameters have very short JVM names on purpose: these names appear in all generated class files, and we'd like to reduce their size."
    },
    {
      "text": "annotation class OptIn",
      "desc": "Allows to use the API denoted by the given markers in the annotated file, declaration, or expression. If a declaration is annotated with OptIn, its usages are not required to opt in to that API."
    },
    {
      "text": "annotation class OptionalExpectation",
      "desc": "Marks an expected annotation class that it isn't required to have actual counterparts in all platforms."
    },
    {
      "text": "annotation class OverloadResolutionByLambdaReturnType",
      "desc": "Enables overload selection based on the type of the value returned from lambda argument."
    },
    {
      "text": "annotation class ParameterName",
      "desc": "Annotates type arguments of functional type and holds corresponding parameter name specified by the user in type declaration (if any)."
    },
    {
      "text": "annotation class PublishedApi",
      "desc": "When applied to a class or a member with internal visibility allows to use it from public inline functions and makes it effectively public."
    },
    {
      "text": "annotation class ReplaceWith",
      "desc": "Specifies a code fragment that can be used to replace a deprecated function, property or class. Tools such as IDEs can automatically apply the replacements specified through this annotation."
    },
    {
      "text": "annotation class RequiresOptIn",
      "desc": "Signals that the annotated annotation class is a marker of an API that requires an explicit opt-in."
    },
    {
      "text": "annotation class SinceKotlin",
      "desc": "Specifies the first version of Kotlin where a declaration has appeared. Using the declaration and specifying an older API version (via the -api-version command line option) will result in an error."
    },
    {
      "text": "annotation class Suppress",
      "desc": "Suppresses the given compilation warnings in the annotated element."
    },
    {
      "text": "annotation class Throws",
      "desc": "This annotation indicates what exceptions should be declared by a function when compiled to a platform method in Kotlin/JVM and Kotlin/Native."
    },
    {
      "text": "annotation class UnsafeVariance",
      "desc": "Suppresses errors about variance conflict"
    },
    {
      "text": "annotation class UseExperimental",
      "desc": "Allows to use experimental API denoted by the given markers in the annotated file, declaration, or expression. If a declaration is annotated with UseExperimental, its usages are not required to opt-in to that experimental API."
    },
    {
      "text": "open class ArithmeticException : RuntimeException"
    },
    {
      "text": "open class AssertionError : Error"
    },
    {
      "text": "open class ClassCastException : RuntimeException"
    },
    {
      "text": "open class ConcurrentModificationException : RuntimeException"
    },
    {
      "text": "open class Error : Throwable"
    },
    {
      "text": "open class Exception : Throwable"
    },
    {
      "text": "open class IllegalArgumentException : RuntimeException"
    },
    {
      "text": "open class IllegalStateException : RuntimeException"
    },
    {
      "text": "open class IndexOutOfBoundsException : RuntimeException"
    },
    {
      "text": "open class KotlinNullPointerException : NullPointerException"
    },
    {
      "text": "open class NoSuchElementException : RuntimeException"
    },
    {
      "text": "class NotImplementedError : Error",
      "desc": "An exception is thrown to indicate that a method body remains to be implemented."
    },
    {
      "text": "open class NoWhenBranchMatchedException : RuntimeException"
    },
    {
      "text": "open class NullPointerException : RuntimeException"
    },
    {
      "text": "open class NumberFormatException : IllegalArgumentException"
    },
    {
      "text": "open class RuntimeException : Exception"
    },
    {
      "text": "open class TypeCastException : ClassCastException"
    },
    {
      "text": "class UninitializedPropertyAccessException : RuntimeException"
    },
    {
      "text": "open class UnsupportedOperationException : RuntimeException"
    },
    {
      "text": "val Char.code: Int",
      "desc": "Returns the code of this Char."
    },
    {
      "text": "val KProperty0<*>.isInitialized: Boolean",
      "desc": "Returns true if this lateinit property has been assigned a value, and false otherwise."
    },
    {
      "text": "val Throwable.stackTrace: Array<StackTraceElement>",
      "desc": "Returns an array of stack trace elements representing the stack trace pertaining to this throwable."
    },
    {
      "text": "val Throwable.suppressedExceptions: List<Throwable>",
      "desc": "Returns a list of all exceptions that were suppressed in order to deliver this exception."
    },
    {
      "text": "fun Throwable.addSuppressed(exception: Throwable)",
      "desc": "When supported by the platform, adds the specified exception to the list of exceptions that were suppressed in order to deliver this exception."
    },
    {
      "text": "fun <T> T.also(block: (T) -> Unit): T",
      "desc": "Calls the specified function block with this value as its argument and returns this value."
    },
    {
      "text": "fun <T> T.apply(block: T.() -> Unit): T",
      "desc": "Calls the specified function block with this value as its receiver and returns this value."
    },
    {
      "text": "fun <T> arrayOf(vararg elements: T): Array<T>",
      "desc": "Returns an array containing the specified elements."
    },
    {
      "text": "fun <T> arrayOfNulls(size: Int): Array<T?>",
      "desc": "Returns an array of objects of the given type with the given size, initialized with null values."
    },
    {
      "text": "fun assert(value: Boolean)",
      "desc": "Throws an AssertionError if the value is false and runtime assertions have been enabled on the JVM using the -ea JVM option."
    },
    {
      "text": "fun assert(value: Boolean, lazyMessage: () -> Any)",
      "desc": "Throws an AssertionError calculated by lazyMessage if the value is false and runtime assertions have been enabled on the JVM using the -ea JVM option."
    },
    {
      "text": "fun booleanArrayOf(vararg elements: Boolean): BooleanArray",
      "desc": "Returns an array containing the specified boolean values."
    },
    {
      "text": "fun byteArrayOf(vararg elements: Byte): ByteArray",
      "desc": "Returns an array containing the specified Byte numbers."
    },
    {
      "text": "fun Char(code: Int): Char",
      "desc": "Creates a Char with the specified code, or throws an exception if the code is out of Char.MIN_VALUE.code..Char.MAX_VALUE.code."
    },
    {
      "text": "fun Char(code: UShort): Char",
      "desc": "Creates a Char with the specified code."
    },
    {
      "text": "fun charArrayOf(vararg elements: Char): CharArray",
      "desc": "Returns an array containing the specified characters."
    },
    {
      "text": "fun check(value: Boolean)",
      "desc": "Throws an IllegalStateException if the value is false."
    },
    {
      "text": "fun check(value: Boolean, lazyMessage: () -> Any)",
      "desc": "Throws an IllegalStateException with the result of calling lazyMessage if the value is false."
    },
    {
      "text": "fun <T : Any> checkNotNull(value: T?): T",
      "desc": "Throws an IllegalStateException if the value is null. Otherwise returns the not null value."
    },
    {
      "text": "fun <T : Any> checkNotNull( value: T?, lazyMessage: () -> Any): T",
      "desc": "Throws an IllegalStateException with the result of calling lazyMessage if the value is null. Otherwise returns the not null value."
    },
    {
      "text": "infix fun <T> Comparable<T>.compareTo(other: T): Int",
      "desc": "Compares this object with the specified object for order. Returns zero if this object is equal to the specified other object, a negative number if it's less than other, or a positive number if it's greater than other."
    },
    {
      "text": "fun Byte.countLeadingZeroBits(): Int",
      "desc": "Counts the number of consecutive most significant bits that are zero in the binary representation of this Byte number."
    },
    {
      "text": "fun Short.countLeadingZeroBits(): Int",
      "desc": "Counts the number of consecutive most significant bits that are zero in the binary representation of this Short number."
    },
    {
      "text": "fun UInt.countLeadingZeroBits(): Int",
      "desc": "Counts the number of consecutive most significant bits that are zero in the binary representation of this UInt number."
    },
    {
      "text": "fun ULong.countLeadingZeroBits(): Int",
      "desc": "Counts the number of consecutive most significant bits that are zero in the binary representation of this ULong number."
    },
    {
      "text": "fun UByte.countLeadingZeroBits(): Int",
      "desc": "Counts the number of consecutive most significant bits that are zero in the binary representation of this UByte number."
    },
    {
      "text": "fun UShort.countLeadingZeroBits(): Int",
      "desc": "Counts the number of consecutive most significant bits that are zero in the binary representation of this UShort number."
    },
    {
      "text": "fun Int.countLeadingZeroBits(): Int",
      "desc": "Counts the number of consecutive most significant bits that are zero in the binary representation of this Int number."
    },
    {
      "text": "fun Long.countLeadingZeroBits(): Int",
      "desc": "Counts the number of consecutive most significant bits that are zero in the binary representation of this Long number."
    },
    {
      "text": "fun Byte.countOneBits(): Int",
      "desc": "Counts the number of set bits in the binary representation of this Byte number."
    },
    {
      "text": "fun Short.countOneBits(): Int",
      "desc": "Counts the number of set bits in the binary representation of this Short number."
    },
    {
      "text": "fun UInt.countOneBits(): Int",
      "desc": "Counts the number of set bits in the binary representation of this UInt number."
    },
    {
      "text": "fun ULong.countOneBits(): Int",
      "desc": "Counts the number of set bits in the binary representation of this ULong number."
    },
    {
      "text": "fun UByte.countOneBits(): Int",
      "desc": "Counts the number of set bits in the binary representation of this UByte number."
    },
    {
      "text": "fun UShort.countOneBits(): Int",
      "desc": "Counts the number of set bits in the binary representation of this UShort number."
    },
    {
      "text": "fun Int.countOneBits(): Int",
      "desc": "Counts the number of set bits in the binary representation of this Int number."
    },
    {
      "text": "fun Long.countOneBits(): Int",
      "desc": "Counts the number of set bits in the binary representation of this Long number."
    },
    {
      "text": "fun Byte.countTrailingZeroBits(): Int",
      "desc": "Counts the number of consecutive least significant bits that are zero in the binary representation of this Byte number."
    },
    {
      "text": "fun Short.countTrailingZeroBits(): Int",
      "desc": "Counts the number of consecutive least significant bits that are zero in the binary representation of this Short number."
    },
    {
      "text": "fun UInt.countTrailingZeroBits(): Int",
      "desc": "Counts the number of consecutive least significant bits that are zero in the binary representation of this UInt number."
    },
    {
      "text": "fun ULong.countTrailingZeroBits(): Int",
      "desc": "Counts the number of consecutive least significant bits that are zero in the binary representation of this ULong number."
    },
    {
      "text": "fun UByte.countTrailingZeroBits(): Int",
      "desc": "Counts the number of consecutive least significant bits that are zero in the binary representation of this UByte number."
    },
    {
      "text": "fun UShort.countTrailingZeroBits(): Int",
      "desc": "Counts the number of consecutive least significant bits that are zero in the binary representation of this UShort number."
    },
    {
      "text": "fun Int.countTrailingZeroBits(): Int",
      "desc": "Counts the number of consecutive least significant bits that are zero in the binary representation of this Int number."
    },
    {
      "text": "fun Long.countTrailingZeroBits(): Int",
      "desc": "Counts the number of consecutive least significant bits that are zero in the binary representation of this Long number."
    },
    {
      "text": "fun doubleArrayOf(vararg elements: Double): DoubleArray",
      "desc": "Returns an array containing the specified Double numbers."
    },
    {
      "text": "fun <T> emptyArray(): Array<T>",
      "desc": "Returns an empty array of the specified type T."
    },
    {
      "text": "fun <T : Enum<T>> enumValueOf(name: String): T",
      "desc": "Returns an enum entry with specified name."
    },
    {
      "text": "fun <T : Enum<T>> enumValues(): Array<T>",
      "desc": "Returns an array containing enum T entries."
    },
    {
      "text": "fun error(message: Any): Nothing",
      "desc": "Throws an IllegalStateException with the given message."
    },
    {
      "text": "fun floatArrayOf(vararg elements: Float): FloatArray",
      "desc": "Returns an array containing the specified Float numbers."
    },
    {
      "text": "fun Byte.floorDiv(other: Byte): Int",
      "desc": "Divides this value by the other value, flooring the result to an integer that is closer to negative infinity."
    },
    {
      "text": "fun <R, T> Result<T>.fold( onSuccess: (value: T) -> R, onFailure: (exception: Throwable) -> R): R",
      "desc": "Returns the result of onSuccess for the encapsulated value if this instance represents success or the result of onFailure function for the encapsulated Throwable exception if it is failure."
    },
    {
      "text": "fun <R, T : R> Result<T>.getOrDefault(defaultValue: R): R",
      "desc": "Returns the encapsulated value if this instance represents success or the defaultValue if it is failure."
    },
    {
      "text": "fun <R, T : R> Result<T>.getOrElse( onFailure: (exception: Throwable) -> R): R",
      "desc": "Returns the encapsulated value if this instance represents success or the result of onFailure function for the encapsulated Throwable exception if it is failure."
    },
    {
      "text": "fun <T> Result<T>.getOrThrow(): T",
      "desc": "Returns the encapsulated value if this instance represents success or throws the encapsulated Throwable exception if it is failure."
    },
    {
      "text": "operator fun <V> KProperty0<V>.getValue( thisRef: Any?, property: KProperty<*>): V",
      "desc": "An extension operator that allows delegating a read-only property of type V to a property reference to a property of type V or its subtype."
    },
    {
      "text": "operator fun <T, V> KProperty1<T, V>.getValue( thisRef: T, property: KProperty<*>): V",
      "desc": "An extension operator that allows delegating a read-only member or extension property of type V to a property reference to a member or extension property of type V or its subtype."
    },
    {
      "text": "operator fun <T> Lazy<T>.getValue( thisRef: Any?, property: KProperty<*>): T",
      "desc": "An extension to delegate a read-only property of type T to an instance of Lazy."
    },
    {
      "text": "fun Any?.hashCode(): Int",
      "desc": "Returns a hash code value for the object or zero if the object is null."
    },
    {
      "text": "fun intArrayOf(vararg elements: Int): IntArray",
      "desc": "Returns an array containing the specified Int numbers."
    },
    {
      "text": "operator fun <T, R> DeepRecursiveFunction<T, R>.invoke( value: T): R",
      "desc": "Initiates a call to this deep recursive function, forming a root of the call tree."
    },
    {
      "text": "fun Double.isFinite(): Boolean",
      "desc": "Returns true if the argument is a finite floating-point value; returns false otherwise (for NaN and infinity arguments)."
    },
    {
      "text": "fun Double.isInfinite(): Boolean",
      "desc": "Returns true if this value is infinitely large in magnitude."
    },
    {
      "text": "fun Double.isNaN(): Boolean",
      "desc": "Returns true if the specified number is a Not-a-Number (NaN) value, false otherwise."
    },
    {
      "text": "fun <T> lazy(initializer: () -> T): Lazy<T>",
      "desc": "Creates a new instance of the Lazy that uses the specified initialization function initializer and the default thread-safety mode LazyThreadSafetyMode.SYNCHRONIZED."
    },
    {
      "text": "fun <T> lazy( mode: LazyThreadSafetyMode, initializer: () -> T): Lazy<T>",
      "desc": "Creates a new instance of the Lazy that uses the specified initialization function initializer."
    },
    {
      "text": "fun <T> lazyOf(value: T): Lazy<T>",
      "desc": "Creates a new instance of the Lazy that is already initialized with the specified value."
    },
    {
      "text": "fun <T, R> T.let(block: (T) -> R): R",
      "desc": "Calls the specified function block with this value as its argument and returns its result."
    },
    {
      "text": "fun longArrayOf(vararg elements: Long): LongArray",
      "desc": "Returns an array containing the specified Long numbers."
    },
    {
      "text": "fun <R, T> Result<T>.map( transform: (value: T) -> R): Result<R>",
      "desc": "Returns the encapsulated result of the given transform function applied to the encapsulated value if this instance represents success or the original encapsulated Throwable exception if it is failure."
    },
    {
      "text": "fun <R, T> Result<T>.mapCatching( transform: (value: T) -> R): Result<R>",
      "desc": "Returns the encapsulated result of the given transform function applied to the encapsulated value if this instance represents success or the original encapsulated Throwable exception if it is failure."
    },
    {
      "text": "fun Byte.mod(other: Byte): Byte",
      "desc": "Calculates the remainder of flooring division of this value by the other value."
    },
    {
      "text": "fun <T> Result<T>.onFailure( action: (exception: Throwable) -> Unit): Result<T>",
      "desc": "Performs the given action on the encapsulated Throwable exception if this instance represents failure. Returns the original Result unchanged."
    },
    {
      "text": "fun <T> Result<T>.onSuccess( action: (value: T) -> Unit): Result<T>",
      "desc": "Performs the given action on the encapsulated value if this instance represents success. Returns the original Result unchanged."
    },
    {
      "text": "operator fun String?.plus(other: Any?): String",
      "desc": "Concatenates this string with the string representation of the given other object. If either the receiver or the other object are null, they are represented as the string \"null\"."
    },
    {
      "text": "fun Throwable.printStackTrace(writer: PrintWriter)",
      "desc": "Prints the detailed description of this throwable to the specified writer."
    },
    {
      "text": "fun Throwable.printStackTrace(stream: PrintStream)",
      "desc": "Prints the detailed description of this throwable to the specified stream."
    },
    {
      "text": "fun Throwable.printStackTrace()",
      "desc": "Prints the detailed description of this throwable to the standard output or standard error output."
    },
    {
      "text": "fun <R, T : R> Result<T>.recover( transform: (exception: Throwable) -> R): Result<R>",
      "desc": "Returns the encapsulated result of the given transform function applied to the encapsulated Throwable exception if this instance represents failure or the original encapsulated value if it is success."
    },
    {
      "text": "fun <R, T : R> Result<T>.recoverCatching( transform: (exception: Throwable) -> R): Result<R>",
      "desc": "Returns the encapsulated result of the given transform function applied to the encapsulated Throwable exception if this instance represents failure or the original encapsulated value if it is success."
    },
    {
      "text": "fun repeat(times: Int, action: (Int) -> Unit)",
      "desc": "Executes the given function action specified number of times."
    },
    {
      "text": "fun require(value: Boolean)",
      "desc": "Throws an IllegalArgumentException if the value is false."
    },
    {
      "text": "fun require(value: Boolean, lazyMessage: () -> Any)",
      "desc": "Throws an IllegalArgumentException with the result of calling lazyMessage if the value is false."
    },
    {
      "text": "fun <T : Any> requireNotNull(value: T?): T",
      "desc": "Throws an IllegalArgumentException if the value is null. Otherwise returns the not null value."
    },
    {
      "text": "fun <T : Any> requireNotNull( value: T?, lazyMessage: () -> Any): T",
      "desc": "Throws an IllegalArgumentException with the result of calling lazyMessage if the value is null. Otherwise returns the not null value."
    },
    {
      "text": "fun Byte.rotateLeft(bitCount: Int): Byte",
      "desc": "Rotates the binary representation of this Byte number left by the specified bitCount number of bits. The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side."
    },
    {
      "text": "fun Short.rotateLeft(bitCount: Int): Short",
      "desc": "Rotates the binary representation of this Short number left by the specified bitCount number of bits. The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side."
    },
    {
      "text": "fun UInt.rotateLeft(bitCount: Int): UInt",
      "desc": "Rotates the binary representation of this UInt number left by the specified bitCount number of bits. The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side."
    },
    {
      "text": "fun ULong.rotateLeft(bitCount: Int): ULong",
      "desc": "Rotates the binary representation of this ULong number left by the specified bitCount number of bits. The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side."
    },
    {
      "text": "fun UByte.rotateLeft(bitCount: Int): UByte",
      "desc": "Rotates the binary representation of this UByte number left by the specified bitCount number of bits. The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side."
    },
    {
      "text": "fun UShort.rotateLeft(bitCount: Int): UShort",
      "desc": "Rotates the binary representation of this UShort number left by the specified bitCount number of bits. The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side."
    },
    {
      "text": "fun Int.rotateLeft(bitCount: Int): Int",
      "desc": "Rotates the binary representation of this Int number left by the specified bitCount number of bits. The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side."
    },
    {
      "text": "fun Long.rotateLeft(bitCount: Int): Long",
      "desc": "Rotates the binary representation of this Long number left by the specified bitCount number of bits. The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side."
    },
    {
      "text": "fun Byte.rotateRight(bitCount: Int): Byte",
      "desc": "Rotates the binary representation of this Byte number right by the specified bitCount number of bits. The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side."
    },
    {
      "text": "fun Short.rotateRight(bitCount: Int): Short",
      "desc": "Rotates the binary representation of this Short number right by the specified bitCount number of bits. The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side."
    },
    {
      "text": "fun UInt.rotateRight(bitCount: Int): UInt",
      "desc": "Rotates the binary representation of this UInt number right by the specified bitCount number of bits. The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side."
    },
    {
      "text": "fun ULong.rotateRight(bitCount: Int): ULong",
      "desc": "Rotates the binary representation of this ULong number right by the specified bitCount number of bits. The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side."
    },
    {
      "text": "fun UByte.rotateRight(bitCount: Int): UByte",
      "desc": "Rotates the binary representation of this UByte number right by the specified bitCount number of bits. The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side."
    },
    {
      "text": "fun UShort.rotateRight(bitCount: Int): UShort",
      "desc": "Rotates the binary representation of this UShort number right by the specified bitCount number of bits. The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side."
    },
    {
      "text": "fun Int.rotateRight(bitCount: Int): Int",
      "desc": "Rotates the binary representation of this Int number right by the specified bitCount number of bits. The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side."
    },
    {
      "text": "fun Long.rotateRight(bitCount: Int): Long",
      "desc": "Rotates the binary representation of this Long number right by the specified bitCount number of bits. The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side."
    },
    {
      "text": "fun <R> run(block: () -> R): R",
      "desc": "Calls the specified function block and returns its result."
    },
    {
      "text": "fun <T, R> T.run(block: T.() -> R): R",
      "desc": "Calls the specified function block with this value as its receiver and returns its result."
    },
    {
      "text": "fun <R> runCatching(block: () -> R): Result<R>",
      "desc": "Calls the specified function block and returns its encapsulated result if invocation was successful, catching any Throwable exception that was thrown from the block function execution and encapsulating it as a failure."
    },
    {
      "text": "fun <T, R> T.runCatching(block: T.() -> R): Result<R>",
      "desc": "Calls the specified function block with this value as its receiver and returns its encapsulated result if invocation was successful, catching any Throwable exception that was thrown from the block function execution and encapsulating it as a failure."
    },
    {
      "text": "operator fun <V> KMutableProperty0<V>.setValue( thisRef: Any?, property: KProperty<*>, value: V)",
      "desc": "An extension operator that allows delegating a mutable property of type V to a property reference to a mutable property of the same type V."
    },
    {
      "text": "operator fun <T, V> KMutableProperty1<T, V>.setValue( thisRef: T, property: KProperty<*>, value: V)",
      "desc": "An extension operator that allows delegating a mutable member or extension property of type V to a property reference to a member or extension mutable property of the same type V."
    },
    {
      "text": "fun shortArrayOf(vararg elements: Short): ShortArray",
      "desc": "Returns an array containing the specified Short numbers."
    },
    {
      "text": "fun Throwable.stackTraceToString(): String",
      "desc": "Returns the detailed description of this throwable with its stack trace."
    },
    {
      "text": "fun <R> suspend(block: suspend () -> R): suspend () -> R"
    },
    {
      "text": "fun <R> synchronized(lock: Any, block: () -> R): R",
      "desc": "Executes the given function block while holding the monitor of the given object lock."
    },
    {
      "text": "fun Byte.takeHighestOneBit(): Byte",
      "desc": "Returns a number having a single bit set in the position of the most significant set bit of this Byte number, or zero, if this number is zero."
    },
    {
      "text": "fun Short.takeHighestOneBit(): Short",
      "desc": "Returns a number having a single bit set in the position of the most significant set bit of this Short number, or zero, if this number is zero."
    },
    {
      "text": "fun UInt.takeHighestOneBit(): UInt",
      "desc": "Returns a number having a single bit set in the position of the most significant set bit of this UInt number, or zero, if this number is zero."
    },
    {
      "text": "fun ULong.takeHighestOneBit(): ULong",
      "desc": "Returns a number having a single bit set in the position of the most significant set bit of this ULong number, or zero, if this number is zero."
    },
    {
      "text": "fun UByte.takeHighestOneBit(): UByte",
      "desc": "Returns a number having a single bit set in the position of the most significant set bit of this UByte number, or zero, if this number is zero."
    },
    {
      "text": "fun UShort.takeHighestOneBit(): UShort",
      "desc": "Returns a number having a single bit set in the position of the most significant set bit of this UShort number, or zero, if this number is zero."
    },
    {
      "text": "fun Int.takeHighestOneBit(): Int",
      "desc": "Returns a number having a single bit set in the position of the most significant set bit of this Int number, or zero, if this number is zero."
    },
    {
      "text": "fun Long.takeHighestOneBit(): Long",
      "desc": "Returns a number having a single bit set in the position of the most significant set bit of this Long number, or zero, if this number is zero."
    },
    {
      "text": "fun <T> T.takeIf(predicate: (T) -> Boolean): T?",
      "desc": "Returns this value if it satisfies the given predicate or null, if it doesn't."
    },
    {
      "text": "fun Byte.takeLowestOneBit(): Byte",
      "desc": "Returns a number having a single bit set in the position of the least significant set bit of this Byte number, or zero, if this number is zero."
    },
    {
      "text": "fun Short.takeLowestOneBit(): Short",
      "desc": "Returns a number having a single bit set in the position of the least significant set bit of this Short number, or zero, if this number is zero."
    },
    {
      "text": "fun UInt.takeLowestOneBit(): UInt",
      "desc": "Returns a number having a single bit set in the position of the least significant set bit of this UInt number, or zero, if this number is zero."
    },
    {
      "text": "fun ULong.takeLowestOneBit(): ULong",
      "desc": "Returns a number having a single bit set in the position of the least significant set bit of this ULong number, or zero, if this number is zero."
    },
    {
      "text": "fun UByte.takeLowestOneBit(): UByte",
      "desc": "Returns a number having a single bit set in the position of the least significant set bit of this UByte number, or zero, if this number is zero."
    },
    {
      "text": "fun UShort.takeLowestOneBit(): UShort",
      "desc": "Returns a number having a single bit set in the position of the least significant set bit of this UShort number, or zero, if this number is zero."
    },
    {
      "text": "fun Int.takeLowestOneBit(): Int",
      "desc": "Returns a number having a single bit set in the position of the least significant set bit of this Int number, or zero, if this number is zero."
    },
    {
      "text": "fun Long.takeLowestOneBit(): Long",
      "desc": "Returns a number having a single bit set in the position of the least significant set bit of this Long number, or zero, if this number is zero."
    },
    {
      "text": "fun <T> T.takeUnless(predicate: (T) -> Boolean): T?",
      "desc": "Returns this value if it does not satisfy the given predicate or null, if it does."
    },
    {
      "text": "infix fun <A, B> A.to(that: B): Pair<A, B>",
      "desc": "Creates a tuple of type Pair from this and that."
    },
    {
      "text": "fun Int.toBigDecimal(): BigDecimal",
      "desc": "Returns the value of this Int number as a BigDecimal."
    },
    {
      "text": "fun Long.toBigDecimal(): BigDecimal",
      "desc": "Returns the value of this Long number as a BigDecimal."
    },
    {
      "text": "fun Float.toBigDecimal(): BigDecimal",
      "desc": "Returns the value of this Float number as a BigDecimal."
    },
    {
      "text": "fun Double.toBigDecimal(): BigDecimal",
      "desc": "Returns the value of this Double number as a BigDecimal."
    },
    {
      "text": "fun Int.toBigInteger(): BigInteger",
      "desc": "Returns the value of this Int number as a BigInteger."
    },
    {
      "text": "fun Long.toBigInteger(): BigInteger",
      "desc": "Returns the value of this Long number as a BigInteger."
    },
    {
      "text": "fun Double.toBits(): Long",
      "desc": "Returns a bit representation of the specified floating-point value as Long according to the IEEE 754 floating-point \"double format\" bit layout."
    },
    {
      "text": "fun Float.toBits(): Int",
      "desc": "Returns a bit representation of the specified floating-point value as Int according to the IEEE 754 floating-point \"single format\" bit layout."
    },
    {
      "text": "fun TODO(): Nothing",
      "desc": "Always throws NotImplementedError stating that operation is not implemented."
    },
    {
      "text": "fun <T> Pair<T, T>.toList(): List<T>",
      "desc": "Converts this pair into a list."
    },
    {
      "text": "fun <T> Triple<T, T, T>.toList(): List<T>",
      "desc": "Converts this triple into a list."
    },
    {
      "text": "fun Double.toRawBits(): Long",
      "desc": "Returns a bit representation of the specified floating-point value as Long according to the IEEE 754 floating-point \"double format\" bit layout, preserving NaN values exact layout."
    },
    {
      "text": "fun Float.toRawBits(): Int",
      "desc": "Returns a bit representation of the specified floating-point value as Int according to the IEEE 754 floating-point \"single format\" bit layout, preserving NaN values exact layout."
    },
    {
      "text": "fun Any?.toString(): String",
      "desc": "Returns a string representation of the object. Can be called with a null receiver, in which case it returns the string \"null\"."
    },
    {
      "text": "fun Byte.toUByte(): UByte",
      "desc": "Converts this Byte value to UByte."
    },
    {
      "text": "fun Short.toUByte(): UByte",
      "desc": "Converts this Short value to UByte."
    },
    {
      "text": "fun Int.toUByte(): UByte",
      "desc": "Converts this Int value to UByte."
    },
    {
      "text": "fun Long.toUByte(): UByte",
      "desc": "Converts this Long value to UByte."
    },
    {
      "text": "fun Byte.toUInt(): UInt",
      "desc": "Converts this Byte value to UInt."
    },
    {
      "text": "fun Short.toUInt(): UInt",
      "desc": "Converts this Short value to UInt."
    },
    {
      "text": "fun Int.toUInt(): UInt",
      "desc": "Converts this Int value to UInt."
    },
    {
      "text": "fun Long.toUInt(): UInt",
      "desc": "Converts this Long value to UInt."
    },
    {
      "text": "fun Float.toUInt(): UInt",
      "desc": "Converts this Float value to UInt."
    },
    {
      "text": "fun Double.toUInt(): UInt",
      "desc": "Converts this Double value to UInt."
    },
    {
      "text": "fun Byte.toULong(): ULong",
      "desc": "Converts this Byte value to ULong."
    },
    {
      "text": "fun Short.toULong(): ULong",
      "desc": "Converts this Short value to ULong."
    },
    {
      "text": "fun Int.toULong(): ULong",
      "desc": "Converts this Int value to ULong."
    },
    {
      "text": "fun Long.toULong(): ULong",
      "desc": "Converts this Long value to ULong."
    },
    {
      "text": "fun Float.toULong(): ULong",
      "desc": "Converts this Float value to ULong."
    },
    {
      "text": "fun Double.toULong(): ULong",
      "desc": "Converts this Double value to ULong."
    },
    {
      "text": "fun Byte.toUShort(): UShort",
      "desc": "Converts this Byte value to UShort."
    },
    {
      "text": "fun Short.toUShort(): UShort",
      "desc": "Converts this Short value to UShort."
    },
    {
      "text": "fun Int.toUShort(): UShort",
      "desc": "Converts this Int value to UShort."
    },
    {
      "text": "fun Long.toUShort(): UShort",
      "desc": "Converts this Long value to UShort."
    },
    {
      "text": "fun UByteArray(size: Int, init: (Int) -> UByte): UByteArray",
      "desc": "Creates a new array of the specified size, where each element is calculated by calling the specified init function."
    },
    {
      "text": "fun ubyteArrayOf(vararg elements: UByte): UByteArray"
    },
    {
      "text": "fun UIntArray(size: Int, init: (Int) -> UInt): UIntArray",
      "desc": "Creates a new array of the specified size, where each element is calculated by calling the specified init function."
    },
    {
      "text": "fun uintArrayOf(vararg elements: UInt): UIntArray"
    },
    {
      "text": "fun ULongArray(size: Int, init: (Int) -> ULong): ULongArray",
      "desc": "Creates a new array of the specified size, where each element is calculated by calling the specified init function."
    },
    {
      "text": "fun ulongArrayOf(vararg elements: ULong): ULongArray"
    },
    {
      "text": "fun <T : AutoCloseable?, R> T.use(block: (T) -> R): R",
      "desc": "Executes the given block function on this resource and then closes it down correctly whether an exception is thrown or not."
    },
    {
      "text": "fun UShortArray( size: Int, init: (Int) -> UShort): UShortArray",
      "desc": "Creates a new array of the specified size, where each element is calculated by calling the specified init function."
    },
    {
      "text": "fun ushortArrayOf(vararg elements: UShort): UShortArray"
    },
    {
      "text": "fun <T, R> with(receiver: T, block: T.() -> R): R",
      "desc": "Calls the specified function block with the given receiver as its receiver and returns its result."
    },
    {
      "text": "fun Double.Companion.fromBits(bits: Long): Double",
      "desc": "Returns the Double value corresponding to a given bit representation."
    },
    {
      "text": "fun Float.Companion.fromBits(bits: Int): Float",
      "desc": "Returns the Float value corresponding to a given bit representation."
    }
  ]
}