{
  "type": "unknown",
  "name": "AbstractIterator",
  "signature": "abstract class AbstractIterator<T> : Iterator<T>",
  "items": [
    {
      "text": "AbstractIterator()",
      "desc": "A base class to simplify implementing iterators so that implementations only have to implement computeNext to implement the iterator, calling done when the iteration is complete."
    },
    {
      "text": "abstract fun computeNext()",
      "desc": "Computes the next item in the iterator."
    },
    {
      "text": "fun done()",
      "desc": "Sets the state to done so that the iteration terminates."
    },
    {
      "text": "open fun hasNext(): Boolean"
    },
    {
      "text": "open fun next(): T"
    },
    {
      "text": "fun setNext(value: T)",
      "desc": "Sets the next value in the iteration, called from the computeNext function"
    },
    {
      "text": "fun <T> Iterator<T>.asSequence(): Sequence<T>",
      "desc": "Creates a sequence that returns all elements from this iterator. The sequence is constrained to be iterated only once."
    },
    {
      "text": "fun <T> Iterator<T>.forEach(operation: (T) -> Unit)",
      "desc": "Performs the given operation on each element of this Iterator."
    },
    {
      "text": "operator fun <T> Iterator<T>.iterator(): Iterator<T>",
      "desc": "Returns the given iterator itself. This allows to use an instance of iterator in a for loop."
    },
    {
      "text": "fun <T> Iterator<T>.withIndex(): Iterator<IndexedValue<T>>",
      "desc": "Returns an Iterator that wraps each element produced by the original iterator into an IndexedValue containing the index of that element and the element itself."
    }
  ]
}