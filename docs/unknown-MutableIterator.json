{
  "type": "unknown",
  "name": "MutableIterator",
  "signature": "interface MutableIterator<out T> : Iterator<T>",
  "items": [
    {
      "text": "abstract fun remove()",
      "desc": "Removes from the underlying collection the last element returned by this iterator."
    },
    {
      "text": "fun <T> Iterator<T>.asSequence(): Sequence<T>",
      "desc": "Creates a sequence that returns all elements from this iterator. The sequence is constrained to be iterated only once."
    },
    {
      "text": "fun <T> Iterator<T>.forEach(operation: (T) -> Unit)",
      "desc": "Performs the given operation on each element of this Iterator."
    },
    {
      "text": "operator fun <T> Iterator<T>.iterator(): Iterator<T>",
      "desc": "Returns the given iterator itself. This allows to use an instance of iterator in a for loop."
    },
    {
      "text": "fun <T> Iterator<T>.withIndex(): Iterator<IndexedValue<T>>",
      "desc": "Returns an Iterator that wraps each element produced by the original iterator into an IndexedValue containing the index of that element and the element itself."
    },
    {
      "text": "interface MutableListIterator<T> : ListIterator<T>, MutableIterator<T>",
      "desc": "An iterator over a mutable collection that supports indexed access. Provides the ability to add, modify and remove elements while iterating."
    }
  ]
}