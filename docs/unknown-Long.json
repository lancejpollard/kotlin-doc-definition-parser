{
  "type": "unknown",
  "name": "Long",
  "signature": "class Long : Number, Comparable<Long>",
  "items": [
    {
      "text": "infix fun and(other: Long): Long",
      "desc": "Performs a bitwise AND operation between the two values."
    },
    {
      "text": "operator fun compareTo(other: Byte): Int",
      "desc": "Compares this value with the specified value for order. Returns zero if this value is equal to the specified other value, a negative number if it's less than other, or a positive number if it's greater than other."
    },
    {
      "text": "operator fun dec(): Long",
      "desc": "Returns this value decremented by one."
    },
    {
      "text": "operator fun div(other: Byte): Long",
      "desc": "Divides this value by the other value, truncating the result to an integer that is closer to zero."
    },
    {
      "text": "operator fun div(other: Float): Float",
      "desc": "Divides this value by the other value."
    },
    {
      "text": "fun equals(other: Long): Boolean"
    },
    {
      "text": "fun equals(other: Any?): Boolean",
      "desc": "Indicates whether some other object is \"equal to\" this one. Implementations must fulfil the following requirements:"
    },
    {
      "text": "fun hashCode(): Int",
      "desc": "Returns a hash code value for the object. The general contract of hashCode is:"
    },
    {
      "text": "operator fun inc(): Long",
      "desc": "Returns this value incremented by one."
    },
    {
      "text": "fun inv(): Long",
      "desc": "Inverts the bits in this value."
    },
    {
      "text": "operator fun minus(other: Byte): Long",
      "desc": "Subtracts the other value from this value."
    },
    {
      "text": "infix fun or(other: Long): Long",
      "desc": "Performs a bitwise OR operation between the two values."
    },
    {
      "text": "operator fun plus(other: Byte): Long",
      "desc": "Adds the other value to this value."
    },
    {
      "text": "operator fun rangeTo(other: Byte): LongRange",
      "desc": "Creates a range from this value to the specified other value."
    },
    {
      "text": "operator fun rem(other: Byte): Long",
      "desc": "Calculates the remainder of truncating division of this value by the other value."
    },
    {
      "text": "infix fun shl(bitCount: Int): Long",
      "desc": "Shifts this value left by the bitCount number of bits."
    },
    {
      "text": "infix fun shr(bitCount: Int): Long",
      "desc": "Shifts this value right by the bitCount number of bits, filling the leftmost bits with copies of the sign bit."
    },
    {
      "text": "operator fun times(other: Byte): Long",
      "desc": "Multiplies this value by the other value."
    },
    {
      "text": "fun toByte(): Byte",
      "desc": "Converts this Long value to Byte."
    },
    {
      "text": "fun toChar(): Char",
      "desc": "Converts this Long value to Char."
    },
    {
      "text": "fun toDouble(): Double",
      "desc": "Converts this Long value to Double."
    },
    {
      "text": "fun toFloat(): Float",
      "desc": "Converts this Long value to Float."
    },
    {
      "text": "fun toInt(): Int",
      "desc": "Converts this Long value to Int."
    },
    {
      "text": "fun toLong(): Long",
      "desc": "Returns this value."
    },
    {
      "text": "fun toShort(): Short",
      "desc": "Converts this Long value to Short."
    },
    {
      "text": "fun toString(): String",
      "desc": "Returns a string representation of the object."
    },
    {
      "text": "operator fun unaryMinus(): Long",
      "desc": "Returns the negative of this value."
    },
    {
      "text": "operator fun unaryPlus(): Long",
      "desc": "Returns this value."
    },
    {
      "text": "infix fun ushr(bitCount: Int): Long",
      "desc": "Shifts this value right by the bitCount number of bits, filling the leftmost bits with zeros."
    },
    {
      "text": "infix fun xor(other: Long): Long",
      "desc": "Performs a bitwise XOR operation between the two values."
    },
    {
      "text": "const val MAX_VALUE: Long",
      "desc": "A constant holding the maximum value an instance of Long can have."
    },
    {
      "text": "const val MIN_VALUE: Long",
      "desc": "A constant holding the minimum value an instance of Long can have."
    },
    {
      "text": "const val SIZE_BITS: Int",
      "desc": "The number of bits used to represent an instance of Long in a binary form."
    },
    {
      "text": "const val SIZE_BYTES: Int",
      "desc": "The number of bytes used to represent an instance of Long in a binary form."
    },
    {
      "text": "val Long.days: Duration",
      "desc": "Returns a Duration equal to this Long number of days."
    },
    {
      "text": "val Long.hours: Duration",
      "desc": "Returns a Duration equal to this Long number of hours."
    },
    {
      "text": "val Long.microseconds: Duration",
      "desc": "Returns a Duration equal to this Long number of microseconds."
    },
    {
      "text": "val Long.milliseconds: Duration",
      "desc": "Returns a Duration equal to this Long number of milliseconds."
    },
    {
      "text": "val Long.minutes: Duration",
      "desc": "Returns a Duration equal to this Long number of minutes."
    },
    {
      "text": "val Long.nanoseconds: Duration",
      "desc": "Returns a Duration equal to this Long number of nanoseconds."
    },
    {
      "text": "val Long.seconds: Duration",
      "desc": "Returns a Duration equal to this Long number of seconds."
    },
    {
      "text": "fun Long.coerceAtLeast(minimumValue: Long): Long",
      "desc": "Ensures that this value is not less than the specified minimumValue."
    },
    {
      "text": "fun Long.coerceAtMost(maximumValue: Long): Long",
      "desc": "Ensures that this value is not greater than the specified maximumValue."
    },
    {
      "text": "fun Long.coerceIn( minimumValue: Long, maximumValue: Long): Long",
      "desc": "Ensures that this value lies in the specified range minimumValue..maximumValue."
    },
    {
      "text": "fun Long.coerceIn(range: ClosedRange<Long>): Long",
      "desc": "Ensures that this value lies in the specified range."
    },
    {
      "text": "infix fun <T> Comparable<T>.compareTo(other: T): Int",
      "desc": "Compares this object with the specified object for order. Returns zero if this object is equal to the specified other object, a negative number if it's less than other, or a positive number if it's greater than other."
    },
    {
      "text": "fun <R : Any> Long.convert(): R"
    },
    {
      "text": "infix fun Long.downTo(to: Byte): LongProgression",
      "desc": "Returns a progression from this value down to the specified to value with the step -1."
    },
    {
      "text": "fun Long.floorDiv(other: Byte): Long",
      "desc": "Divides this value by the other value, flooring the result to an integer that is closer to negative infinity."
    },
    {
      "text": "fun Long.mod(other: Byte): Byte",
      "desc": "Calculates the remainder of flooring division of this value by the other value."
    },
    {
      "text": "fun <R : Number> Number.narrow(): R"
    },
    {
      "text": "operator fun <T : Comparable<T>> T.rangeTo( that: T): ClosedRange<T>",
      "desc": "Creates a range from this Comparable value to the specified that value."
    },
    {
      "text": "fun <R : Number> Number.signExtend(): R"
    },
    {
      "text": "fun Long.toBigDecimal(): BigDecimal",
      "desc": "Returns the value of this Long number as a BigDecimal."
    },
    {
      "text": "fun Long.toBigInteger(): BigInteger",
      "desc": "Returns the value of this Long number as a BigInteger."
    },
    {
      "text": "fun <T : CPointed> Long.toCPointer(): CPointer<T>?"
    },
    {
      "text": "fun Long.toDuration(unit: DurationUnit): Duration",
      "desc": "Returns a Duration equal to this Long number of the specified unit."
    },
    {
      "text": "fun Long.toUByte(): UByte",
      "desc": "Converts this Long value to UByte."
    },
    {
      "text": "fun Long.toUInt(): UInt",
      "desc": "Converts this Long value to UInt."
    },
    {
      "text": "fun Long.toULong(): ULong",
      "desc": "Converts this Long value to ULong."
    },
    {
      "text": "fun Long.toUShort(): UShort",
      "desc": "Converts this Long value to UShort."
    },
    {
      "text": "infix fun Long.until(to: Byte): LongRange",
      "desc": "Returns a range from this value up to but excluding the specified to value."
    }
  ]
}