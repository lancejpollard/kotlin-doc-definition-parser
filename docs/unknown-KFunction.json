{
  "type": "unknown",
  "name": "KFunction",
  "signature": "interface KFunction<out R> : KCallable<R>, Function<R>",
  "items": [
    {
      "text": "abstract val isExternal: Boolean",
      "desc": "true if this function is external. See the Kotlin language documentation for more information."
    },
    {
      "text": "abstract val isInfix: Boolean",
      "desc": "true if this function is infix. See the Kotlin language documentation for more information."
    },
    {
      "text": "abstract val isInline: Boolean",
      "desc": "true if this function is inline. See the Kotlin language documentation for more information."
    },
    {
      "text": "abstract val isOperator: Boolean",
      "desc": "true if this function is operator. See the Kotlin language documentation for more information."
    },
    {
      "text": "abstract val isSuspend: Boolean",
      "desc": "true if this is a suspending function."
    },
    {
      "text": "abstract val isAbstract: Boolean",
      "desc": "true if this callable is abstract."
    },
    {
      "text": "abstract val isFinal: Boolean",
      "desc": "true if this callable is final."
    },
    {
      "text": "abstract val isOpen: Boolean",
      "desc": "true if this callable is open."
    },
    {
      "text": "abstract val isSuspend: Boolean",
      "desc": "true if this is a suspending function."
    },
    {
      "text": "abstract val parameters: List<KParameter>",
      "desc": "Parameters required to make a call to this callable. If this callable requires a this instance or an extension receiver parameter, they come first in the list in that order."
    },
    {
      "text": "abstract val typeParameters: List<KTypeParameter>",
      "desc": "The list of type parameters of this callable."
    },
    {
      "text": "abstract val visibility: KVisibility?",
      "desc": "Visibility of this callable, or null if its visibility cannot be represented in Kotlin."
    },
    {
      "text": "abstract fun call(vararg args: Any?): R",
      "desc": "Calls this callable with the specified list of arguments and returns the result. Throws an exception if the number of specified arguments is not equal to the size of parameters, or if their types do not match the types of the parameters."
    },
    {
      "text": "abstract fun callBy(args: Map<KParameter, Any?>): R",
      "desc": "Calls this callable with the specified mapping of parameters to arguments and returns the result. If a parameter is not found in the mapping and is not optional (as per KParameter.isOptional), or its type does not match the type of the provided value, an exception is thrown."
    },
    {
      "text": "val KCallable<*>.extensionReceiverParameter: KParameter?",
      "desc": "Returns a parameter representing the extension receiver instance needed to call this callable, or null if this callable is not an extension."
    },
    {
      "text": "val KCallable<*>.instanceParameter: KParameter?",
      "desc": "Returns a parameter representing the this instance needed to call this callable, or null if this callable is not a member of a class and thus doesn't take such parameter."
    },
    {
      "text": "var KCallable<*>.isAccessible: Boolean",
      "desc": "Provides a way to suppress JVM access checks for a callable."
    },
    {
      "text": "val <T> KFunction<T>.javaConstructor: Constructor<T>?",
      "desc": "Returns a Java Constructor instance corresponding to the given Kotlin function, or null if this function is not a constructor or cannot be represented by a Java Constructor."
    },
    {
      "text": "val KFunction<*>.javaMethod: Method?",
      "desc": "Returns a Java Method instance corresponding to the given Kotlin function, or null if this function is a constructor or cannot be represented by a Java Method."
    },
    {
      "text": "val KCallable<*>.valueParameters: List<KParameter>",
      "desc": "Returns parameters of this callable, excluding the this instance and the extension receiver parameter."
    },
    {
      "text": "suspend fun <R> KCallable<R>.callSuspend( vararg args: Any?): R",
      "desc": "Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as KCallable.call. Otherwise, calls the suspend function with current continuation."
    },
    {
      "text": "suspend fun <R> KCallable<R>.callSuspendBy( args: Map<KParameter, Any?>): R",
      "desc": "Calls a callable in the current suspend context. If the callable is not a suspend function, behaves as KCallable.callBy. Otherwise, calls the suspend function with current continuation."
    },
    {
      "text": "fun <T : Annotation> KAnnotatedElement.findAnnotation(): T?",
      "desc": "Returns an annotation of the given type on this element."
    },
    {
      "text": "fun <T : Annotation> KAnnotatedElement.findAnnotations(): List<T>",
      "desc": "Returns all annotations of the given type on this element, including individually applied annotations as well as repeated annotations."
    },
    {
      "text": "fun KCallable<*>.findParameterByName( name: String): KParameter?",
      "desc": "Returns the parameter of this callable with the given name, or null if there's no such parameter."
    },
    {
      "text": "fun <T : Annotation> KAnnotatedElement.hasAnnotation(): Boolean",
      "desc": "Returns true if this element is annotated with an annotation of type T."
    },
    {
      "text": "fun <R> Function<R>.reflect(): KFunction<R>?",
      "desc": "This is an experimental API. Given a class for a compiled Kotlin lambda or a function expression, returns a KFunction instance providing introspection capabilities for that lambda or function expression and its parameters. Not all features are currently supported, in particular KCallable.call and KCallable.callBy will fail at the moment."
    },
    {
      "text": "interface Getter<out V> : KProperty.Accessor<V>, KFunction<V>",
      "desc": "Getter of the property is a get method declared alongside the property."
    },
    {
      "text": "interface Setter<V> : KProperty.Accessor<V>, KFunction<Unit>",
      "desc": "Setter of the property is a set method declared alongside the property."
    }
  ]
}