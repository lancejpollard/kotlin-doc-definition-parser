{
  "type": "unknown",
  "name": "KParameter",
  "signature": "interface KParameter : KAnnotatedElement",
  "items": [
    {
      "text": "enum class Kind",
      "desc": "Kind represents a particular position of the parameter declaration in the source code, such as an instance, an extension receiver parameter or a value parameter."
    },
    {
      "text": "abstract val index: Int",
      "desc": "0-based index of this parameter in the parameter list of its containing callable."
    },
    {
      "text": "abstract val isOptional: Boolean",
      "desc": "true if this parameter is optional and can be omitted when making a call via KCallable.callBy, or false otherwise."
    },
    {
      "text": "abstract val isVararg: Boolean",
      "desc": "true if this parameter is vararg. See the Kotlin language documentation for more information."
    },
    {
      "text": "abstract val kind: Kind",
      "desc": "Kind of this parameter."
    },
    {
      "text": "abstract val name: String?",
      "desc": "Name of this parameter as it was declared in the source code, or null if the parameter has no name or its name is not available at runtime. Examples of nameless parameters include this instance for member functions, extension receiver for extension functions or properties, parameters of Java methods compiled without the debug information, and others."
    },
    {
      "text": "abstract val type: KType",
      "desc": "Type of this parameter. For a vararg parameter, this is the type of the corresponding array, not the individual element."
    },
    {
      "text": "abstract val annotations: List<Annotation>",
      "desc": "Annotations which are present on this element."
    },
    {
      "text": "fun <T : Annotation> KAnnotatedElement.findAnnotation(): T?",
      "desc": "Returns an annotation of the given type on this element."
    },
    {
      "text": "fun <T : Annotation> KAnnotatedElement.findAnnotations(): List<T>",
      "desc": "Returns all annotations of the given type on this element, including individually applied annotations as well as repeated annotations."
    },
    {
      "text": "fun <T : Annotation> KAnnotatedElement.hasAnnotation(): Boolean",
      "desc": "Returns true if this element is annotated with an annotation of type T."
    }
  ]
}