{
  "type": "package",
  "name": "kotlin.sequences",
  "items": [
    {
      "text": "interface Sequence<out T>",
      "desc": "A sequence that returns values through its iterator. The values are evaluated lazily, and the sequence is potentially infinite."
    },
    {
      "text": "typealias SequenceBuilder<T> = SequenceScope<T>"
    },
    {
      "text": "abstract class SequenceScope<in T>",
      "desc": "The scope for yielding values of a Sequence or an Iterator, provides yield and yieldAll suspension functions."
    },
    {
      "text": "fun <T> Sequence<T>.all(predicate: (T) -> Boolean): Boolean",
      "desc": "Returns true if all elements match the given predicate."
    },
    {
      "text": "fun <T> Sequence<T>.any(): Boolean",
      "desc": "Returns true if sequence has at least one element."
    },
    {
      "text": "fun <T> Sequence<T>.any(predicate: (T) -> Boolean): Boolean",
      "desc": "Returns true if at least one element matches the given predicate."
    },
    {
      "text": "fun <T> Sequence<T>.asIterable(): Iterable<T>",
      "desc": "Creates an Iterable instance that wraps the original sequence returning its elements when being iterated."
    },
    {
      "text": "fun <T> Sequence<T>.asSequence(): Sequence<T>",
      "desc": "Returns this sequence as a Sequence."
    },
    {
      "text": "fun <T> Iterator<T>.asSequence(): Sequence<T>",
      "desc": "Creates a sequence that returns all elements from this iterator. The sequence is constrained to be iterated only once."
    },
    {
      "text": "fun <T, K, V> Sequence<T>.associate( transform: (T) -> Pair<K, V>): Map<K, V>",
      "desc": "Returns a Map containing key-value pairs provided by transform function applied to elements of the given sequence."
    },
    {
      "text": "fun <T, K> Sequence<T>.associateBy( keySelector: (T) -> K): Map<K, T>",
      "desc": "Returns a Map containing the elements from the given sequence indexed by the key returned from keySelector function applied to each element."
    },
    {
      "text": "fun <T, K, V> Sequence<T>.associateBy( keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V>",
      "desc": "Returns a Map containing the values provided by valueTransform and indexed by keySelector functions applied to elements of the given sequence."
    },
    {
      "text": "fun <T, K, M : MutableMap<in K, in T>> Sequence<T>.associateByTo( destination: M, keySelector: (T) -> K): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs, where key is provided by the keySelector function applied to each element of the given sequence and value is the element itself."
    },
    {
      "text": "fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateByTo( destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs, where key is provided by the keySelector function and and value is provided by the valueTransform function applied to elements of the given sequence."
    },
    {
      "text": "fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateTo( destination: M, transform: (T) -> Pair<K, V>): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs provided by transform function applied to each element of the given sequence."
    },
    {
      "text": "fun <K, V> Sequence<K>.associateWith( valueSelector: (K) -> V): Map<K, V>",
      "desc": "Returns a Map where keys are elements from the given sequence and values are produced by the valueSelector function applied to each element."
    },
    {
      "text": "fun <K, V, M : MutableMap<in K, in V>> Sequence<K>.associateWithTo( destination: M, valueSelector: (K) -> V): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs for each element of the given sequence, where key is the element itself and value is provided by the valueSelector function applied to that key."
    },
    {
      "text": "fun Sequence<Byte>.average(): Double",
      "desc": "Returns an average value of elements in the sequence."
    },
    {
      "text": "fun <T> buildIterator( builderAction: suspend SequenceScope<T>.() -> Unit): Iterator<T>"
    },
    {
      "text": "fun <T> buildSequence( builderAction: suspend SequenceScope<T>.() -> Unit): Sequence<T>"
    },
    {
      "text": "fun <T> Sequence<T>.chunked(size: Int): Sequence<List<T>>",
      "desc": "Splits this sequence into a sequence of lists each not exceeding the given size."
    },
    {
      "text": "fun <T, R> Sequence<T>.chunked( size: Int, transform: (List<T>) -> R): Sequence<R>",
      "desc": "Splits this sequence into several lists each not exceeding the given size and applies the given transform function to an each."
    },
    {
      "text": "fun <T> Sequence<T>.constrainOnce(): Sequence<T>",
      "desc": "Returns a wrapper sequence that provides values of this sequence, but ensures it can be iterated only one time."
    },
    {
      "text": "operator fun <T> Sequence<T>.contains(element: T): Boolean",
      "desc": "Returns true if element is found in the sequence."
    },
    {
      "text": "fun <T> Sequence<T>.count(): Int",
      "desc": "Returns the number of elements in this sequence."
    },
    {
      "text": "fun <T> Sequence<T>.count(predicate: (T) -> Boolean): Int",
      "desc": "Returns the number of elements matching the given predicate."
    },
    {
      "text": "fun <T> Sequence<T>.distinct(): Sequence<T>",
      "desc": "Returns a sequence containing only distinct elements from the given sequence."
    },
    {
      "text": "fun <T, K> Sequence<T>.distinctBy( selector: (T) -> K): Sequence<T>",
      "desc": "Returns a sequence containing only elements from the given sequence having distinct keys returned by the given selector function."
    },
    {
      "text": "fun <T> Sequence<T>.drop(n: Int): Sequence<T>",
      "desc": "Returns a sequence containing all elements except first n elements."
    },
    {
      "text": "fun <T> Sequence<T>.dropWhile( predicate: (T) -> Boolean): Sequence<T>",
      "desc": "Returns a sequence containing all elements except first elements that satisfy the given predicate."
    },
    {
      "text": "fun <T> Sequence<T>.elementAt(index: Int): T",
      "desc": "Returns an element at the given index or throws an IndexOutOfBoundsException if the index is out of bounds of this sequence."
    },
    {
      "text": "fun <T> Sequence<T>.elementAtOrElse( index: Int, defaultValue: (Int) -> T): T",
      "desc": "Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this sequence."
    },
    {
      "text": "fun <T> Sequence<T>.elementAtOrNull(index: Int): T?",
      "desc": "Returns an element at the given index or null if the index is out of bounds of this sequence."
    },
    {
      "text": "fun <T> emptySequence(): Sequence<T>",
      "desc": "Returns an empty sequence."
    },
    {
      "text": "fun <T> Sequence<T>.filter( predicate: (T) -> Boolean): Sequence<T>",
      "desc": "Returns a sequence containing only elements matching the given predicate."
    },
    {
      "text": "fun <T> Sequence<T>.filterIndexed( predicate: (index: Int, T) -> Boolean): Sequence<T>",
      "desc": "Returns a sequence containing only elements matching the given predicate."
    },
    {
      "text": "fun <T, C : MutableCollection<in T>> Sequence<T>.filterIndexedTo( destination: C, predicate: (index: Int, T) -> Boolean): C",
      "desc": "Appends all elements matching the given predicate to the given destination."
    },
    {
      "text": "fun <R> Sequence<*>.filterIsInstance(): Sequence<R>",
      "desc": "Returns a sequence containing all elements that are instances of specified type parameter R."
    },
    {
      "text": "fun <R> Sequence<*>.filterIsInstance( klass: Class<R>): Sequence<R>",
      "desc": "Returns a sequence containing all elements that are instances of specified class."
    },
    {
      "text": "fun <R, C : MutableCollection<in R>> Sequence<*>.filterIsInstanceTo( destination: C): C",
      "desc": "Appends all elements that are instances of specified type parameter R to the given destination."
    },
    {
      "text": "fun <C : MutableCollection<in R>, R> Sequence<*>.filterIsInstanceTo( destination: C, klass: Class<R>): C",
      "desc": "Appends all elements that are instances of specified class to the given destination."
    },
    {
      "text": "fun <T> Sequence<T>.filterNot( predicate: (T) -> Boolean): Sequence<T>",
      "desc": "Returns a sequence containing all elements not matching the given predicate."
    },
    {
      "text": "fun <T : Any> Sequence<T?>.filterNotNull(): Sequence<T>",
      "desc": "Returns a sequence containing all elements that are not null."
    },
    {
      "text": "fun <C : MutableCollection<in T>, T : Any> Sequence<T?>.filterNotNullTo( destination: C): C",
      "desc": "Appends all elements that are not null to the given destination."
    },
    {
      "text": "fun <T, C : MutableCollection<in T>> Sequence<T>.filterNotTo( destination: C, predicate: (T) -> Boolean): C",
      "desc": "Appends all elements not matching the given predicate to the given destination."
    },
    {
      "text": "fun <T, C : MutableCollection<in T>> Sequence<T>.filterTo( destination: C, predicate: (T) -> Boolean): C",
      "desc": "Appends all elements matching the given predicate to the given destination."
    },
    {
      "text": "fun <T> Sequence<T>.find(predicate: (T) -> Boolean): T?",
      "desc": "Returns the first element matching the given predicate, or null if no such element was found."
    },
    {
      "text": "fun <T> Sequence<T>.findLast(predicate: (T) -> Boolean): T?",
      "desc": "Returns the last element matching the given predicate, or null if no such element was found."
    },
    {
      "text": "fun <T> Sequence<T>.first(): T",
      "desc": "Returns first element."
    },
    {
      "text": "fun <T> Sequence<T>.first(predicate: (T) -> Boolean): T",
      "desc": "Returns the first element matching the given predicate."
    },
    {
      "text": "fun <T, R : Any> Sequence<T>.firstNotNullOf( transform: (T) -> R?): R",
      "desc": "Returns the first non-null value produced by transform function being applied to elements of this sequence in iteration order, or throws NoSuchElementException if no non-null value was produced."
    },
    {
      "text": "fun <T, R : Any> Sequence<T>.firstNotNullOfOrNull( transform: (T) -> R?): R?",
      "desc": "Returns the first non-null value produced by transform function being applied to elements of this sequence in iteration order, or null if no non-null value was produced."
    },
    {
      "text": "fun <T> Sequence<T>.firstOrNull(): T?",
      "desc": "Returns the first element, or null if the sequence is empty."
    },
    {
      "text": "fun <T> Sequence<T>.firstOrNull( predicate: (T) -> Boolean): T?",
      "desc": "Returns the first element matching the given predicate, or null if element was not found."
    },
    {
      "text": "fun <T, R> Sequence<T>.flatMap( transform: (T) -> Iterable<R>): Sequence<R>",
      "desc": "Returns a single sequence of all elements from results of transform function being invoked on each element of original sequence."
    },
    {
      "text": "fun <T, R> Sequence<T>.flatMapIndexed( transform: (index: Int, T) -> Iterable<R>): Sequence<R>",
      "desc": "Returns a single sequence of all elements yielded from results of transform function being invoked on each element and its index in the original sequence."
    },
    {
      "text": "fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapIndexedTo( destination: C, transform: (index: Int, T) -> Iterable<R>): C",
      "desc": "Appends all elements yielded from results of transform function being invoked on each element and its index in the original sequence, to the given destination."
    },
    {
      "text": "fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapTo( destination: C, transform: (T) -> Iterable<R>): C",
      "desc": "Appends all elements yielded from results of transform function being invoked on each element of original sequence, to the given destination."
    },
    {
      "text": "fun <T> Sequence<Sequence<T>>.flatten(): Sequence<T>",
      "desc": "Returns a sequence of all elements from all sequences in this sequence."
    },
    {
      "text": "fun <T> Sequence<Iterable<T>>.flatten(): Sequence<T>",
      "desc": "Returns a sequence of all elements from all iterables in this sequence."
    },
    {
      "text": "fun <T, R> Sequence<T>.fold( initial: R, operation: (acc: R, T) -> R): R",
      "desc": "Accumulates value starting with initial value and applying operation from left to right to current accumulator value and each element."
    },
    {
      "text": "fun <T, R> Sequence<T>.foldIndexed( initial: R, operation: (index: Int, acc: R, T) -> R): R",
      "desc": "Accumulates value starting with initial value and applying operation from left to right to current accumulator value and each element with its index in the original sequence."
    },
    {
      "text": "fun <T> Sequence<T>.forEach(action: (T) -> Unit)",
      "desc": "Performs the given action on each element."
    },
    {
      "text": "fun <T> Sequence<T>.forEachIndexed( action: (index: Int, T) -> Unit)",
      "desc": "Performs the given action on each element, providing sequential index with the element."
    },
    {
      "text": "fun <T : Any> generateSequence( nextFunction: () -> T?): Sequence<T>",
      "desc": "Returns a sequence which invokes the function to calculate the next value on each iteration until the function returns null."
    },
    {
      "text": "fun <T : Any> generateSequence( seed: T?, nextFunction: (T) -> T?): Sequence<T>",
      "desc": "Returns a sequence defined by the starting value seed and the function nextFunction, which is invoked to calculate the next value based on the previous one on each iteration."
    },
    {
      "text": "fun <T : Any> generateSequence( seedFunction: () -> T?, nextFunction: (T) -> T?): Sequence<T>",
      "desc": "Returns a sequence defined by the function seedFunction, which is invoked to produce the starting value, and the nextFunction, which is invoked to calculate the next value based on the previous one on each iteration."
    },
    {
      "text": "fun <T, K> Sequence<T>.groupBy( keySelector: (T) -> K): Map<K, List<T>>",
      "desc": "Groups elements of the original sequence by the key returned by the given keySelector function applied to each element and returns a map where each group key is associated with a list of corresponding elements."
    },
    {
      "text": "fun <T, K, V> Sequence<T>.groupBy( keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>>",
      "desc": "Groups values returned by the valueTransform function applied to each element of the original sequence by the key returned by the given keySelector function applied to the element and returns a map where each group key is associated with a list of corresponding values."
    },
    {
      "text": "fun <T, K, M : MutableMap<in K, MutableList<T>>> Sequence<T>.groupByTo( destination: M, keySelector: (T) -> K): M",
      "desc": "Groups elements of the original sequence by the key returned by the given keySelector function applied to each element and puts to the destination map each group key associated with a list of corresponding elements."
    },
    {
      "text": "fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Sequence<T>.groupByTo( destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M",
      "desc": "Groups values returned by the valueTransform function applied to each element of the original sequence by the key returned by the given keySelector function applied to the element and puts to the destination map each group key associated with a list of corresponding values."
    },
    {
      "text": "fun <T, K> Sequence<T>.groupingBy( keySelector: (T) -> K): Grouping<T, K>",
      "desc": "Creates a Grouping source from a sequence to be used later with one of group-and-fold operations using the specified keySelector function to extract a key from each element."
    },
    {
      "text": "fun <T> Sequence<T>.ifEmpty( defaultValue: () -> Sequence<T>): Sequence<T>",
      "desc": "Returns a sequence that iterates through the elements either of this sequence or, if this sequence turns out to be empty, of the sequence returned by defaultValue function."
    },
    {
      "text": "fun <T> Sequence<T>.indexOf(element: T): Int",
      "desc": "Returns first index of element, or -1 if the sequence does not contain element."
    },
    {
      "text": "fun <T> Sequence<T>.indexOfFirst( predicate: (T) -> Boolean): Int",
      "desc": "Returns index of the first element matching the given predicate, or -1 if the sequence does not contain such element."
    },
    {
      "text": "fun <T> Sequence<T>.indexOfLast( predicate: (T) -> Boolean): Int",
      "desc": "Returns index of the last element matching the given predicate, or -1 if the sequence does not contain such element."
    },
    {
      "text": "fun <T> iterator( block: suspend SequenceScope<T>.() -> Unit): Iterator<T>",
      "desc": "Builds an Iterator lazily yielding values one by one."
    },
    {
      "text": "fun <T, A : Appendable> Sequence<T>.joinTo( buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A",
      "desc": "Appends the string from all the elements separated using separator and using the given prefix and postfix if supplied."
    },
    {
      "text": "fun <T> Sequence<T>.joinToString( separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String",
      "desc": "Creates a string from all the elements separated using separator and using the given prefix and postfix if supplied."
    },
    {
      "text": "fun <T> Sequence<T>.last(): T",
      "desc": "Returns the last element."
    },
    {
      "text": "fun <T> Sequence<T>.last(predicate: (T) -> Boolean): T",
      "desc": "Returns the last element matching the given predicate."
    },
    {
      "text": "fun <T> Sequence<T>.lastIndexOf(element: T): Int",
      "desc": "Returns last index of element, or -1 if the sequence does not contain element."
    },
    {
      "text": "fun <T> Sequence<T>.lastOrNull(): T?",
      "desc": "Returns the last element, or null if the sequence is empty."
    },
    {
      "text": "fun <T> Sequence<T>.lastOrNull(predicate: (T) -> Boolean): T?",
      "desc": "Returns the last element matching the given predicate, or null if no such element was found."
    },
    {
      "text": "fun <T, R> Sequence<T>.map(transform: (T) -> R): Sequence<R>",
      "desc": "Returns a sequence containing the results of applying the given transform function to each element in the original sequence."
    },
    {
      "text": "fun <T, R> Sequence<T>.mapIndexed( transform: (index: Int, T) -> R): Sequence<R>",
      "desc": "Returns a sequence containing the results of applying the given transform function to each element and its index in the original sequence."
    },
    {
      "text": "fun <T, R : Any> Sequence<T>.mapIndexedNotNull( transform: (index: Int, T) -> R?): Sequence<R>",
      "desc": "Returns a sequence containing only the non-null results of applying the given transform function to each element and its index in the original sequence."
    },
    {
      "text": "fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapIndexedNotNullTo( destination: C, transform: (index: Int, T) -> R?): C",
      "desc": "Applies the given transform function to each element and its index in the original sequence and appends only the non-null results to the given destination."
    },
    {
      "text": "fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapIndexedTo( destination: C, transform: (index: Int, T) -> R): C",
      "desc": "Applies the given transform function to each element and its index in the original sequence and appends the results to the given destination."
    },
    {
      "text": "fun <T, R : Any> Sequence<T>.mapNotNull( transform: (T) -> R?): Sequence<R>",
      "desc": "Returns a sequence containing only the non-null results of applying the given transform function to each element in the original sequence."
    },
    {
      "text": "fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapNotNullTo( destination: C, transform: (T) -> R?): C",
      "desc": "Applies the given transform function to each element in the original sequence and appends only the non-null results to the given destination."
    },
    {
      "text": "fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapTo( destination: C, transform: (T) -> R): C",
      "desc": "Applies the given transform function to each element of the original sequence and appends the results to the given destination."
    },
    {
      "text": "fun Sequence<Double>.max(): Double?"
    },
    {
      "text": "fun <T, R : Comparable<R>> Sequence<T>.maxBy( selector: (T) -> R): T?"
    },
    {
      "text": "fun <T, R : Comparable<R>> Sequence<T>.maxByOrNull( selector: (T) -> R): T?",
      "desc": "Returns the first element yielding the largest value of the given function or null if there are no elements."
    },
    {
      "text": "fun <T> Sequence<T>.maxOf(selector: (T) -> Double): Double",
      "desc": "Returns the largest value among all values produced by selector function applied to each element in the sequence."
    },
    {
      "text": "fun <T> Sequence<T>.maxOfOrNull( selector: (T) -> Double): Double?",
      "desc": "Returns the largest value among all values produced by selector function applied to each element in the sequence or null if there are no elements."
    },
    {
      "text": "fun <T, R> Sequence<T>.maxOfWith( comparator: Comparator<in R>, selector: (T) -> R): R",
      "desc": "Returns the largest value according to the provided comparator among all values produced by selector function applied to each element in the sequence."
    },
    {
      "text": "fun <T, R> Sequence<T>.maxOfWithOrNull( comparator: Comparator<in R>, selector: (T) -> R): R?",
      "desc": "Returns the largest value according to the provided comparator among all values produced by selector function applied to each element in the sequence or null if there are no elements."
    },
    {
      "text": "fun Sequence<Double>.maxOrNull(): Double?",
      "desc": "Returns the largest element or null if there are no elements."
    },
    {
      "text": "fun <T> Sequence<T>.maxWith(comparator: Comparator<in T>): T?"
    },
    {
      "text": "fun <T> Sequence<T>.maxWithOrNull( comparator: Comparator<in T>): T?",
      "desc": "Returns the first element having the largest value according to the provided comparator or null if there are no elements."
    },
    {
      "text": "fun Sequence<Double>.min(): Double?"
    },
    {
      "text": "fun <T, R : Comparable<R>> Sequence<T>.minBy( selector: (T) -> R): T?"
    },
    {
      "text": "fun <T, R : Comparable<R>> Sequence<T>.minByOrNull( selector: (T) -> R): T?",
      "desc": "Returns the first element yielding the smallest value of the given function or null if there are no elements."
    },
    {
      "text": "fun <T> Sequence<T>.minOf(selector: (T) -> Double): Double",
      "desc": "Returns the smallest value among all values produced by selector function applied to each element in the sequence."
    },
    {
      "text": "fun <T> Sequence<T>.minOfOrNull( selector: (T) -> Double): Double?",
      "desc": "Returns the smallest value among all values produced by selector function applied to each element in the sequence or null if there are no elements."
    },
    {
      "text": "fun <T, R> Sequence<T>.minOfWith( comparator: Comparator<in R>, selector: (T) -> R): R",
      "desc": "Returns the smallest value according to the provided comparator among all values produced by selector function applied to each element in the sequence."
    },
    {
      "text": "fun <T, R> Sequence<T>.minOfWithOrNull( comparator: Comparator<in R>, selector: (T) -> R): R?",
      "desc": "Returns the smallest value according to the provided comparator among all values produced by selector function applied to each element in the sequence or null if there are no elements."
    },
    {
      "text": "fun Sequence<Double>.minOrNull(): Double?",
      "desc": "Returns the smallest element or null if there are no elements."
    },
    {
      "text": "operator fun <T> Sequence<T>.minus(element: T): Sequence<T>",
      "desc": "Returns a sequence containing all elements of the original sequence without the first occurrence of the given element."
    },
    {
      "text": "operator fun <T> Sequence<T>.minus( elements: Array<out T>): Sequence<T>",
      "desc": "Returns a sequence containing all elements of original sequence except the elements contained in the given elements array."
    },
    {
      "text": "operator fun <T> Sequence<T>.minus( elements: Iterable<T>): Sequence<T>",
      "desc": "Returns a sequence containing all elements of original sequence except the elements contained in the given elements collection."
    },
    {
      "text": "operator fun <T> Sequence<T>.minus( elements: Sequence<T>): Sequence<T>",
      "desc": "Returns a sequence containing all elements of original sequence except the elements contained in the given elements sequence."
    },
    {
      "text": "fun <T> Sequence<T>.minusElement(element: T): Sequence<T>",
      "desc": "Returns a sequence containing all elements of the original sequence without the first occurrence of the given element."
    },
    {
      "text": "fun <T> Sequence<T>.minWith(comparator: Comparator<in T>): T?"
    },
    {
      "text": "fun <T> Sequence<T>.minWithOrNull( comparator: Comparator<in T>): T?",
      "desc": "Returns the first element having the smallest value according to the provided comparator or null if there are no elements."
    },
    {
      "text": "fun <T> Sequence<T>.none(): Boolean",
      "desc": "Returns true if the sequence has no elements."
    },
    {
      "text": "fun <T> Sequence<T>.none(predicate: (T) -> Boolean): Boolean",
      "desc": "Returns true if no elements match the given predicate."
    },
    {
      "text": "fun <T> Sequence<T>.onEach(action: (T) -> Unit): Sequence<T>",
      "desc": "Returns a sequence which performs the given action on each element of the original sequence as they pass through it."
    },
    {
      "text": "fun <T> Sequence<T>.onEachIndexed( action: (index: Int, T) -> Unit): Sequence<T>",
      "desc": "Returns a sequence which performs the given action on each element of the original sequence as they pass through it."
    },
    {
      "text": "fun <T> Sequence<T>?.orEmpty(): Sequence<T>",
      "desc": "Returns this sequence if it's not null and the empty sequence otherwise."
    },
    {
      "text": "fun <T> Sequence<T>.partition( predicate: (T) -> Boolean): Pair<List<T>, List<T>>",
      "desc": "Splits the original sequence into pair of lists, where first list contains elements for which predicate yielded true, while second list contains elements for which predicate yielded false."
    },
    {
      "text": "operator fun <T> Sequence<T>.plus(element: T): Sequence<T>",
      "desc": "Returns a sequence containing all elements of the original sequence and then the given element."
    },
    {
      "text": "operator fun <T> Sequence<T>.plus( elements: Array<out T>): Sequence<T>",
      "desc": "Returns a sequence containing all elements of original sequence and then all elements of the given elements array."
    },
    {
      "text": "operator fun <T> Sequence<T>.plus( elements: Iterable<T>): Sequence<T>",
      "desc": "Returns a sequence containing all elements of original sequence and then all elements of the given elements collection."
    },
    {
      "text": "operator fun <T> Sequence<T>.plus( elements: Sequence<T>): Sequence<T>",
      "desc": "Returns a sequence containing all elements of original sequence and then all elements of the given elements sequence."
    },
    {
      "text": "fun <T> Sequence<T>.plusElement(element: T): Sequence<T>",
      "desc": "Returns a sequence containing all elements of the original sequence and then the given element."
    },
    {
      "text": "fun <S, T : S> Sequence<T>.reduce( operation: (acc: S, T) -> S): S",
      "desc": "Accumulates value starting with the first element and applying operation from left to right to current accumulator value and each element."
    },
    {
      "text": "fun <S, T : S> Sequence<T>.reduceIndexed( operation: (index: Int, acc: S, T) -> S): S",
      "desc": "Accumulates value starting with the first element and applying operation from left to right to current accumulator value and each element with its index in the original sequence."
    },
    {
      "text": "fun <S, T : S> Sequence<T>.reduceIndexedOrNull( operation: (index: Int, acc: S, T) -> S): S?",
      "desc": "Accumulates value starting with the first element and applying operation from left to right to current accumulator value and each element with its index in the original sequence."
    },
    {
      "text": "fun <S, T : S> Sequence<T>.reduceOrNull( operation: (acc: S, T) -> S): S?",
      "desc": "Accumulates value starting with the first element and applying operation from left to right to current accumulator value and each element."
    },
    {
      "text": "fun <T : Any> Sequence<T?>.requireNoNulls(): Sequence<T>",
      "desc": "Returns an original collection containing all the non-null elements, throwing an IllegalArgumentException if there are any null elements."
    },
    {
      "text": "fun <T, R> Sequence<T>.runningFold( initial: R, operation: (acc: R, T) -> R): Sequence<R>",
      "desc": "Returns a sequence containing successive accumulation values generated by applying operation from left to right to each element and current accumulator value that starts with initial value."
    },
    {
      "text": "fun <T, R> Sequence<T>.runningFoldIndexed( initial: R, operation: (index: Int, acc: R, T) -> R): Sequence<R>",
      "desc": "Returns a sequence containing successive accumulation values generated by applying operation from left to right to each element, its index in the original sequence and current accumulator value that starts with initial value."
    },
    {
      "text": "fun <S, T : S> Sequence<T>.runningReduce( operation: (acc: S, T) -> S): Sequence<S>",
      "desc": "Returns a sequence containing successive accumulation values generated by applying operation from left to right to each element and current accumulator value that starts with the first element of this sequence."
    },
    {
      "text": "fun <S, T : S> Sequence<T>.runningReduceIndexed( operation: (index: Int, acc: S, T) -> S): Sequence<S>",
      "desc": "Returns a sequence containing successive accumulation values generated by applying operation from left to right to each element, its index in the original sequence and current accumulator value that starts with the first element of this sequence."
    },
    {
      "text": "fun <T, R> Sequence<T>.scan( initial: R, operation: (acc: R, T) -> R): Sequence<R>",
      "desc": "Returns a sequence containing successive accumulation values generated by applying operation from left to right to each element and current accumulator value that starts with initial value."
    },
    {
      "text": "fun <T, R> Sequence<T>.scanIndexed( initial: R, operation: (index: Int, acc: R, T) -> R): Sequence<R>",
      "desc": "Returns a sequence containing successive accumulation values generated by applying operation from left to right to each element, its index in the original sequence and current accumulator value that starts with initial value."
    },
    {
      "text": "fun <T> sequence( block: suspend SequenceScope<T>.() -> Unit): Sequence<T>",
      "desc": "Builds a Sequence lazily yielding values one by one."
    },
    {
      "text": "fun <T> Sequence(iterator: () -> Iterator<T>): Sequence<T>",
      "desc": "Given an iterator function constructs a Sequence that returns values through the Iterator provided by that function. The values are evaluated lazily, and the sequence is potentially infinite."
    },
    {
      "text": "fun <T> sequenceOf(vararg elements: T): Sequence<T>",
      "desc": "Creates a sequence that returns the specified values."
    },
    {
      "text": "fun <T> Sequence<T>.shuffled(): Sequence<T>",
      "desc": "Returns a sequence that yields elements of this sequence randomly shuffled."
    },
    {
      "text": "fun <T> Sequence<T>.shuffled(random: Random): Sequence<T>",
      "desc": "Returns a sequence that yields elements of this sequence randomly shuffled using the specified random instance as the source of randomness."
    },
    {
      "text": "fun <T> Sequence<T>.single(): T",
      "desc": "Returns the single element, or throws an exception if the sequence is empty or has more than one element."
    },
    {
      "text": "fun <T> Sequence<T>.single(predicate: (T) -> Boolean): T",
      "desc": "Returns the single element matching the given predicate, or throws exception if there is no or more than one matching element."
    },
    {
      "text": "fun <T> Sequence<T>.singleOrNull(): T?",
      "desc": "Returns single element, or null if the sequence is empty or has more than one element."
    },
    {
      "text": "fun <T> Sequence<T>.singleOrNull( predicate: (T) -> Boolean): T?",
      "desc": "Returns the single element matching the given predicate, or null if element was not found or more than one element was found."
    },
    {
      "text": "fun <T : Comparable<T>> Sequence<T>.sorted(): Sequence<T>",
      "desc": "Returns a sequence that yields elements of this sequence sorted according to their natural sort order."
    },
    {
      "text": "fun <T, R : Comparable<R>> Sequence<T>.sortedBy( selector: (T) -> R?): Sequence<T>",
      "desc": "Returns a sequence that yields elements of this sequence sorted according to natural sort order of the value returned by specified selector function."
    },
    {
      "text": "fun <T, R : Comparable<R>> Sequence<T>.sortedByDescending( selector: (T) -> R?): Sequence<T>",
      "desc": "Returns a sequence that yields elements of this sequence sorted descending according to natural sort order of the value returned by specified selector function."
    },
    {
      "text": "fun <T : Comparable<T>> Sequence<T>.sortedDescending(): Sequence<T>",
      "desc": "Returns a sequence that yields elements of this sequence sorted descending according to their natural sort order."
    },
    {
      "text": "fun <T> Sequence<T>.sortedWith( comparator: Comparator<in T>): Sequence<T>",
      "desc": "Returns a sequence that yields elements of this sequence sorted according to the specified comparator."
    },
    {
      "text": "fun Sequence<Byte>.sum(): Int",
      "desc": "Returns the sum of all elements in the sequence."
    },
    {
      "text": "fun <T> Sequence<T>.sumBy(selector: (T) -> Int): Int",
      "desc": "Returns the sum of all values produced by selector function applied to each element in the sequence."
    },
    {
      "text": "fun <T> Sequence<T>.sumByDouble( selector: (T) -> Double): Double",
      "desc": "Returns the sum of all values produced by selector function applied to each element in the sequence."
    },
    {
      "text": "fun <T> Sequence<T>.sumOf(selector: (T) -> Double): Double",
      "desc": "Returns the sum of all values produced by selector function applied to each element in the sequence."
    },
    {
      "text": "fun <T> Sequence<T>.take(n: Int): Sequence<T>",
      "desc": "Returns a sequence containing first n elements."
    },
    {
      "text": "fun <T> Sequence<T>.takeWhile( predicate: (T) -> Boolean): Sequence<T>",
      "desc": "Returns a sequence containing first elements satisfying the given predicate."
    },
    {
      "text": "fun <T, C : MutableCollection<in T>> Sequence<T>.toCollection( destination: C): C",
      "desc": "Appends all elements to the given destination collection."
    },
    {
      "text": "fun <T> Sequence<T>.toHashSet(): HashSet<T>",
      "desc": "Returns a new HashSet of all elements."
    },
    {
      "text": "fun <T> Sequence<T>.toList(): List<T>",
      "desc": "Returns a List containing all elements."
    },
    {
      "text": "fun <T> Sequence<T>.toMutableList(): MutableList<T>",
      "desc": "Returns a new MutableList filled with all elements of this sequence."
    },
    {
      "text": "fun <T> Sequence<T>.toMutableSet(): MutableSet<T>",
      "desc": "Returns a new MutableSet containing all distinct elements from the given sequence."
    },
    {
      "text": "fun <T> Sequence<T>.toSet(): Set<T>",
      "desc": "Returns a Set of all elements."
    },
    {
      "text": "fun <T : Comparable<T>> Sequence<T>.toSortedSet(): SortedSet<T>",
      "desc": "Returns a new SortedSet of all elements."
    },
    {
      "text": "fun <T, R> Sequence<Pair<T, R>>.unzip(): Pair<List<T>, List<R>>",
      "desc": "Returns a pair of lists, where first list is built from the first values of each pair from this sequence, second list is built from the second values of each pair from this sequence."
    },
    {
      "text": "fun <T> Sequence<T>.windowed( size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<List<T>>",
      "desc": "Returns a sequence of snapshots of the window of the given size sliding along this sequence with the given step, where each snapshot is a list."
    },
    {
      "text": "fun <T, R> Sequence<T>.windowed( size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): Sequence<R>",
      "desc": "Returns a sequence of results of applying the given transform function to an each list representing a view over the window of the given size sliding along this sequence with the given step."
    },
    {
      "text": "fun <T> Sequence<T>.withIndex(): Sequence<IndexedValue<T>>",
      "desc": "Returns a sequence that wraps each element of the original sequence into an IndexedValue containing the index of that element and the element itself."
    },
    {
      "text": "infix fun <T, R> Sequence<T>.zip( other: Sequence<R>): Sequence<Pair<T, R>>",
      "desc": "Returns a sequence of values built from the elements of this sequence and the other sequence with the same index. The resulting sequence ends as soon as the shortest input sequence ends."
    },
    {
      "text": "fun <T, R, V> Sequence<T>.zip( other: Sequence<R>, transform: (a: T, b: R) -> V): Sequence<V>",
      "desc": "Returns a sequence of values built from the elements of this sequence and the other sequence with the same index using the provided transform function applied to each pair of elements. The resulting sequence ends as soon as the shortest input sequence ends."
    },
    {
      "text": "fun <T> Sequence<T>.zipWithNext(): Sequence<Pair<T, T>>",
      "desc": "Returns a sequence of pairs of each two adjacent elements in this sequence."
    },
    {
      "text": "fun <T, R> Sequence<T>.zipWithNext( transform: (a: T, b: T) -> R): Sequence<R>",
      "desc": "Returns a sequence containing the results of applying the given transform function to an each pair of two adjacent elements in this sequence."
    }
  ]
}