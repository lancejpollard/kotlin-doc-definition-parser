{
  "type": "unknown",
  "name": "HTMLInputElement",
  "signature": "abstract class HTMLInputElement : HTMLElement",
  "items": [
    {
      "text": "HTMLInputElement()",
      "desc": "Exposes the JavaScript HTMLInputElement to Kotlin"
    },
    {
      "text": "open var accept: String"
    },
    {
      "text": "open var align: String"
    },
    {
      "text": "open var alt: String"
    },
    {
      "text": "open var autocomplete: String"
    },
    {
      "text": "open var autofocus: Boolean"
    },
    {
      "text": "open var checked: Boolean"
    },
    {
      "text": "open var defaultChecked: Boolean"
    },
    {
      "text": "open var defaultValue: String"
    },
    {
      "text": "open var dirName: String"
    },
    {
      "text": "open var disabled: Boolean"
    },
    {
      "text": "open val files: FileList?"
    },
    {
      "text": "open val form: HTMLFormElement?"
    },
    {
      "text": "open var formAction: String"
    },
    {
      "text": "open var formEnctype: String"
    },
    {
      "text": "open var formMethod: String"
    },
    {
      "text": "open var formNoValidate: Boolean"
    },
    {
      "text": "open var formTarget: String"
    },
    {
      "text": "open var height: Int"
    },
    {
      "text": "open var indeterminate: Boolean"
    },
    {
      "text": "open var inputMode: String"
    },
    {
      "text": "open val labels: NodeList"
    },
    {
      "text": "open val list: HTMLElement?"
    },
    {
      "text": "open var max: String"
    },
    {
      "text": "open var maxLength: Int"
    },
    {
      "text": "open var min: String"
    },
    {
      "text": "open var minLength: Int"
    },
    {
      "text": "open var multiple: Boolean"
    },
    {
      "text": "open var name: String"
    },
    {
      "text": "open var pattern: String"
    },
    {
      "text": "open var placeholder: String"
    },
    {
      "text": "open var readOnly: Boolean"
    },
    {
      "text": "open var required: Boolean"
    },
    {
      "text": "open var selectionDirection: String?"
    },
    {
      "text": "open var selectionEnd: Int?"
    },
    {
      "text": "open var selectionStart: Int?"
    },
    {
      "text": "open var size: Int"
    },
    {
      "text": "open var src: String"
    },
    {
      "text": "open var step: String"
    },
    {
      "text": "open var type: String"
    },
    {
      "text": "open var useMap: String"
    },
    {
      "text": "open val validationMessage: String"
    },
    {
      "text": "open val validity: ValidityState"
    },
    {
      "text": "open var value: String"
    },
    {
      "text": "open var valueAsDate: dynamic"
    },
    {
      "text": "open var valueAsNumber: Double"
    },
    {
      "text": "open var width: Int"
    },
    {
      "text": "open val willValidate: Boolean"
    },
    {
      "text": "fun checkValidity(): Boolean"
    },
    {
      "text": "fun reportValidity(): Boolean"
    },
    {
      "text": "fun select()"
    },
    {
      "text": "fun setCustomValidity(error: String)"
    },
    {
      "text": "fun setRangeText(replacement: String)"
    },
    {
      "text": "fun setSelectionRange( start: Int, end: Int, direction: String = definedExternally)"
    },
    {
      "text": "fun stepDown(n: Int = definedExternally)"
    },
    {
      "text": "fun stepUp(n: Int = definedExternally)"
    },
    {
      "text": "val ATTRIBUTE_NODE: Short"
    },
    {
      "text": "val CDATA_SECTION_NODE: Short"
    },
    {
      "text": "val COMMENT_NODE: Short"
    },
    {
      "text": "val DOCUMENT_FRAGMENT_NODE: Short"
    },
    {
      "text": "val DOCUMENT_NODE: Short"
    },
    {
      "text": "val DOCUMENT_POSITION_CONTAINED_BY: Short"
    },
    {
      "text": "val DOCUMENT_POSITION_CONTAINS: Short"
    },
    {
      "text": "val DOCUMENT_POSITION_DISCONNECTED: Short"
    },
    {
      "text": "val DOCUMENT_POSITION_FOLLOWING: Short"
    },
    {
      "text": "val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short"
    },
    {
      "text": "val DOCUMENT_POSITION_PRECEDING: Short"
    },
    {
      "text": "val DOCUMENT_TYPE_NODE: Short"
    },
    {
      "text": "val ELEMENT_NODE: Short"
    },
    {
      "text": "val ENTITY_NODE: Short"
    },
    {
      "text": "val ENTITY_REFERENCE_NODE: Short"
    },
    {
      "text": "val NOTATION_NODE: Short"
    },
    {
      "text": "val PROCESSING_INSTRUCTION_NODE: Short"
    },
    {
      "text": "val TEXT_NODE: Short"
    }
  ]
}