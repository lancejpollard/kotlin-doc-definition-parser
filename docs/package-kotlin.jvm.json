{
  "type": "package",
  "name": "kotlin.jvm",
  "items": [
    {
      "text": "typealias JvmRepeatable = Repeatable",
      "desc": "Makes the annotation class repeatable in Java and Kotlin. A repeatable annotation can be applied more than once on the same element."
    },
    {
      "text": "annotation class JvmDefault",
      "desc": "Specifies that a JVM default method should be generated for non-abstract Kotlin interface member."
    },
    {
      "text": "annotation class JvmDefaultWithoutCompatibility",
      "desc": "Prevents the compiler from generating compatibility accessors for the annotated class or interface, and suppresses any related compatibility warnings. In other words, this annotation makes the compiler generate the annotated class or interface in the -Xjvm-default=all mode, where only JVM default methods are generated, without DefaultImpls."
    },
    {
      "text": "annotation class JvmField",
      "desc": "Instructs the Kotlin compiler not to generate getters/setters for this property and expose it as a field."
    },
    {
      "text": "annotation class JvmInline",
      "desc": "Specifies that given value class is inline class."
    },
    {
      "text": "annotation class JvmMultifileClass",
      "desc": "Instructs the Kotlin compiler to generate a multifile class with top-level functions and properties declared in this file as one of its parts. Name of the corresponding multifile class is provided by the JvmName annotation."
    },
    {
      "text": "annotation class JvmName",
      "desc": "Specifies the name for the Java class or method which is generated from this element."
    },
    {
      "text": "annotation class JvmOverloads",
      "desc": "Instructs the Kotlin compiler to generate overloads for this function that substitute default parameter values."
    },
    {
      "text": "annotation class JvmRecord",
      "desc": "Instructs compiler to mark the class as a record and generate relevant toString/equals/hashCode methods"
    },
    {
      "text": "annotation class JvmStatic",
      "desc": "Specifies that an additional static method needs to be generated from this element if it's a function. If this element is a property, additional static getter/setter methods should be generated."
    },
    {
      "text": "annotation class JvmSuppressWildcards",
      "desc": "Instructs compiler to generate or omit wildcards for type arguments corresponding to parameters with declaration-site variance, for example such as Collection<out T> has."
    },
    {
      "text": "annotation class JvmSynthetic",
      "desc": "Sets ACC_SYNTHETIC flag on the annotated target in the Java bytecode."
    },
    {
      "text": "annotation class JvmWildcard",
      "desc": "Instructs compiler to generate wildcard for annotated type arguments corresponding to parameters with declaration-site variance."
    },
    {
      "text": "annotation class PurelyImplements",
      "desc": "Instructs the Kotlin compiler to treat annotated Java class as pure implementation of given Kotlin interface. \"Pure\" means here that each type parameter of class becomes non-platform type argument of that interface."
    },
    {
      "text": "annotation class Strictfp",
      "desc": "Marks the JVM method generated from the annotated function as strictfp, meaning that the precision of floating point operations performed inside the method needs to be restricted in order to achieve better portability."
    },
    {
      "text": "annotation class Synchronized",
      "desc": "Marks the JVM method generated from the annotated function as synchronized, meaning that the method will be protected from concurrent execution by multiple threads by the monitor of the instance (or, for static methods, the class) on which the method is defined."
    },
    {
      "text": "annotation class Throws",
      "desc": "This annotation indicates what exceptions should be declared by a function when compiled to a JVM method."
    },
    {
      "text": "annotation class Transient",
      "desc": "Marks the JVM backing field of the annotated property as transient, meaning that it is not part of the default serialized form of the object."
    },
    {
      "text": "annotation class Volatile",
      "desc": "Marks the JVM backing field of the annotated property as volatile, meaning that writes to this field are immediately made visible to other threads."
    },
    {
      "text": "open class KotlinReflectionNotSupportedError : Error"
    },
    {
      "text": "val <T : Annotation> T.annotationClass: KClass<out T>",
      "desc": "Returns a KClass instance corresponding to the annotation type of this annotation."
    },
    {
      "text": "val <T> KClass<T>.java: Class<T>",
      "desc": "Returns a Java Class instance corresponding to the given KClass instance."
    },
    {
      "text": "val <T : Any> T.javaClass: Class<T>",
      "desc": "Returns the runtime Java class of this object."
    },
    {
      "text": "val <T : Any> KClass<T>.javaClass: Class<KClass<T>>"
    },
    {
      "text": "val <T : Any> KClass<T>.javaObjectType: Class<T>",
      "desc": "Returns a Java Class instance corresponding to the given KClass instance. In case of primitive types it returns corresponding wrapper classes."
    },
    {
      "text": "val <T : Any> KClass<T>.javaPrimitiveType: Class<T>?",
      "desc": "Returns a Java Class instance representing the primitive type corresponding to the given KClass if it exists."
    },
    {
      "text": "fun <T : Any> Array<*>.isArrayOf(): Boolean",
      "desc": "Checks if array can contain element of type T."
    }
  ]
}