{
  "type": "unknown",
  "name": "AbstractMutableMap",
  "signature": "abstract class AbstractMutableMap<K, V> : MutableMap<K, V>",
  "items": [
    {
      "text": "<init>()",
      "desc": "Provides a skeletal implementation of the MutableMap interface."
    },
    {
      "text": "abstract val entries: MutableSet<MutableEntry<K, V>>"
    },
    {
      "text": "open val keys: MutableSet<K>",
      "desc": "Returns a MutableSet of all keys in this map."
    },
    {
      "text": "open val size: Int"
    },
    {
      "text": "open val values: MutableCollection<V>",
      "desc": "Returns a MutableCollection of all values in this map. Note that this collection may contain duplicate values."
    },
    {
      "text": "open fun clear()",
      "desc": "Removes all elements from this map."
    },
    {
      "text": "open fun containsKey(key: K): Boolean"
    },
    {
      "text": "open fun containsValue(value: V): Boolean"
    },
    {
      "text": "open fun get(key: K): V?"
    },
    {
      "text": "open fun isEmpty(): Boolean"
    },
    {
      "text": "abstract fun put(key: K, value: V): V?",
      "desc": "Associates the specified value with the specified key in the map."
    },
    {
      "text": "open fun putAll(from: Map<out K, V>)",
      "desc": "Updates this map with key/value pairs from the specified map from."
    },
    {
      "text": "open fun remove(key: K): V?",
      "desc": "Removes the specified key and its corresponding value from this map."
    },
    {
      "text": "fun <K, V> Map<out K, V>.all( predicate: (Entry<K, V>) -> Boolean): Boolean",
      "desc": "Returns true if all entries match the given predicate."
    },
    {
      "text": "fun <K, V> Map<out K, V>.any(): Boolean",
      "desc": "Returns true if map has at least one entry."
    },
    {
      "text": "fun <K, V> Map<out K, V>.any( predicate: (Entry<K, V>) -> Boolean): Boolean",
      "desc": "Returns true if at least one entry matches the given predicate."
    },
    {
      "text": "fun <K, V> Map<out K, V>.asIterable(): Iterable<Entry<K, V>>",
      "desc": "Creates an Iterable instance that wraps the original map returning its entries when being iterated."
    },
    {
      "text": "fun <K, V> Map<out K, V>.asSequence(): Sequence<Entry<K, V>>",
      "desc": "Creates a Sequence instance that wraps the original map returning its entries when being iterated."
    },
    {
      "text": "operator fun <K, V> Map<out K, V>.contains(key: K): Boolean",
      "desc": "Checks if the map contains the given key."
    },
    {
      "text": "fun <K> Map<out K, *>.containsKey(key: K): Boolean",
      "desc": "Returns true if the map contains the specified key."
    },
    {
      "text": "fun <K, V> Map<K, V>.containsValue(value: V): Boolean",
      "desc": "Returns true if the map maps one or more keys to the specified value."
    },
    {
      "text": "fun <K, V> Map<out K, V>.count(): Int",
      "desc": "Returns the number of entries in this map."
    },
    {
      "text": "fun <K, V> Map<out K, V>.count( predicate: (Entry<K, V>) -> Boolean): Int",
      "desc": "Returns the number of entries matching the given predicate."
    },
    {
      "text": "fun <K, V> Map<out K, V>.filter( predicate: (Entry<K, V>) -> Boolean): Map<K, V>",
      "desc": "Returns a new map containing all key-value pairs matching the given predicate."
    },
    {
      "text": "fun <K, V> Map<out K, V>.filterKeys( predicate: (K) -> Boolean): Map<K, V>",
      "desc": "Returns a map containing all key-value pairs with keys matching the given predicate."
    },
    {
      "text": "fun <K, V> Map<out K, V>.filterNot( predicate: (Entry<K, V>) -> Boolean): Map<K, V>",
      "desc": "Returns a new map containing all key-value pairs not matching the given predicate."
    },
    {
      "text": "fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo( destination: M, predicate: (Entry<K, V>) -> Boolean): M",
      "desc": "Appends all entries not matching the given predicate into the given destination."
    },
    {
      "text": "fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo( destination: M, predicate: (Entry<K, V>) -> Boolean): M",
      "desc": "Appends all entries matching the given predicate into the mutable map given as destination parameter."
    },
    {
      "text": "fun <K, V> Map<out K, V>.filterValues( predicate: (V) -> Boolean): Map<K, V>",
      "desc": "Returns a map containing all key-value pairs with values matching the given predicate."
    },
    {
      "text": "fun <K, V, R : Any> Map<out K, V>.firstNotNullOf( transform: (Entry<K, V>) -> R?): R",
      "desc": "Returns the first non-null value produced by transform function being applied to entries of this map in iteration order, or throws NoSuchElementException if no non-null value was produced."
    },
    {
      "text": "fun <K, V, R : Any> Map<out K, V>.firstNotNullOfOrNull( transform: (Entry<K, V>) -> R?): R?",
      "desc": "Returns the first non-null value produced by transform function being applied to entries of this map in iteration order, or null if no non-null value was produced."
    },
    {
      "text": "fun <K, V, R> Map<out K, V>.flatMap( transform: (Entry<K, V>) -> Iterable<R>): List<R>",
      "desc": "Returns a single list of all elements yielded from results of transform function being invoked on each entry of original map."
    },
    {
      "text": "fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.flatMapTo( destination: C, transform: (Entry<K, V>) -> Iterable<R>): C",
      "desc": "Appends all elements yielded from results of transform function being invoked on each entry of original map, to the given destination."
    },
    {
      "text": "fun <K, V> Map<out K, V>.forEach( action: (Entry<K, V>) -> Unit)",
      "desc": "Performs the given action on each entry."
    },
    {
      "text": "operator fun <K, V> Map<out K, V>.get(key: K): V?",
      "desc": "Returns the value corresponding to the given key, or null if such a key is not present in the map."
    },
    {
      "text": "fun <K, V> Map<K, V>.getOrElse( key: K, defaultValue: () -> V): V",
      "desc": "Returns the value for the given key, or the result of the defaultValue function if there was no entry for the given key."
    },
    {
      "text": "fun <K, V> MutableMap<K, V>.getOrPut( key: K, defaultValue: () -> V): V",
      "desc": "Returns the value for the given key. If the key is not found in the map, calls the defaultValue function, puts its result into the map under the given key and returns it."
    },
    {
      "text": "fun <K, V> Map<K, V>.getValue(key: K): V",
      "desc": "Returns the value for the given key or throws an exception if there is no such key in the map."
    },
    {
      "text": "fun <M, R> M.ifEmpty( defaultValue: () -> R): R where M : Map<*, *>, M : R",
      "desc": "Returns this map if it's not empty or the result of calling defaultValue function if the map is empty."
    },
    {
      "text": "fun <K, V> Map<out K, V>.isNotEmpty(): Boolean",
      "desc": "Returns true if this map is not empty."
    },
    {
      "text": "fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean",
      "desc": "Returns true if this nullable map is either null or empty."
    },
    {
      "text": "fun <K, V, R> Map<out K, V>.map( transform: (Entry<K, V>) -> R): List<R>",
      "desc": "Returns a list containing the results of applying the given transform function to each entry in the original map."
    },
    {
      "text": "fun <K, V, R> Map<out K, V>.mapKeys( transform: (Entry<K, V>) -> R): Map<R, V>",
      "desc": "Returns a new Map with entries having the keys obtained by applying the transform function to each entry in this Map and the values of this map."
    },
    {
      "text": "fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo( destination: M, transform: (Entry<K, V>) -> R): M",
      "desc": "Populates the given destination map with entries having the keys obtained by applying the transform function to each entry in this Map and the values of this map."
    },
    {
      "text": "fun <K, V, R : Any> Map<out K, V>.mapNotNull( transform: (Entry<K, V>) -> R?): List<R>",
      "desc": "Returns a list containing only the non-null results of applying the given transform function to each entry in the original map."
    },
    {
      "text": "fun <K, V, R : Any, C : MutableCollection<in R>> Map<out K, V>.mapNotNullTo( destination: C, transform: (Entry<K, V>) -> R?): C",
      "desc": "Applies the given transform function to each entry in the original map and appends only the non-null results to the given destination."
    },
    {
      "text": "fun <K, V, R, C : MutableCollection<in R>> Map<out K, V>.mapTo( destination: C, transform: (Entry<K, V>) -> R): C",
      "desc": "Applies the given transform function to each entry of the original map and appends the results to the given destination."
    },
    {
      "text": "fun <K, V, R> Map<out K, V>.mapValues( transform: (Entry<K, V>) -> R): Map<K, R>",
      "desc": "Returns a new map with entries having the keys of this map and the values obtained by applying the transform function to each entry in this Map."
    },
    {
      "text": "fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo( destination: M, transform: (Entry<K, V>) -> R): M",
      "desc": "Populates the given destination map with entries having the keys of this map and the values obtained by applying the transform function to each entry in this Map."
    },
    {
      "text": "fun <K, V, R : Comparable<R>> Map<out K, V>.maxBy( selector: (Entry<K, V>) -> R): Entry<K, V>?"
    },
    {
      "text": "fun <K, V, R : Comparable<R>> Map<out K, V>.maxByOrNull( selector: (Entry<K, V>) -> R): Entry<K, V>?",
      "desc": "Returns the first entry yielding the largest value of the given function or null if there are no entries."
    },
    {
      "text": "fun <K, V> Map<out K, V>.maxOf( selector: (Entry<K, V>) -> Double): Double",
      "desc": "Returns the largest value among all values produced by selector function applied to each entry in the map."
    },
    {
      "text": "fun <K, V> Map<out K, V>.maxOfOrNull( selector: (Entry<K, V>) -> Double): Double?",
      "desc": "Returns the largest value among all values produced by selector function applied to each entry in the map or null if there are no entries."
    },
    {
      "text": "fun <K, V, R> Map<out K, V>.maxOfWith( comparator: Comparator<in R>, selector: (Entry<K, V>) -> R): R",
      "desc": "Returns the largest value according to the provided comparator among all values produced by selector function applied to each entry in the map."
    },
    {
      "text": "fun <K, V, R> Map<out K, V>.maxOfWithOrNull( comparator: Comparator<in R>, selector: (Entry<K, V>) -> R): R?",
      "desc": "Returns the largest value according to the provided comparator among all values produced by selector function applied to each entry in the map or null if there are no entries."
    },
    {
      "text": "fun <K, V> Map<out K, V>.maxWith( comparator: Comparator<in Entry<K, V>>): Entry<K, V>?"
    },
    {
      "text": "fun <K, V> Map<out K, V>.maxWithOrNull( comparator: Comparator<in Entry<K, V>>): Entry<K, V>?",
      "desc": "Returns the first entry having the largest value according to the provided comparator or null if there are no entries."
    },
    {
      "text": "fun <K, V, R : Comparable<R>> Map<out K, V>.minBy( selector: (Entry<K, V>) -> R): Entry<K, V>?"
    },
    {
      "text": "fun <K, V, R : Comparable<R>> Map<out K, V>.minByOrNull( selector: (Entry<K, V>) -> R): Entry<K, V>?",
      "desc": "Returns the first entry yielding the smallest value of the given function or null if there are no entries."
    },
    {
      "text": "fun <K, V> Map<out K, V>.minOf( selector: (Entry<K, V>) -> Double): Double",
      "desc": "Returns the smallest value among all values produced by selector function applied to each entry in the map."
    },
    {
      "text": "fun <K, V> Map<out K, V>.minOfOrNull( selector: (Entry<K, V>) -> Double): Double?",
      "desc": "Returns the smallest value among all values produced by selector function applied to each entry in the map or null if there are no entries."
    },
    {
      "text": "fun <K, V, R> Map<out K, V>.minOfWith( comparator: Comparator<in R>, selector: (Entry<K, V>) -> R): R",
      "desc": "Returns the smallest value according to the provided comparator among all values produced by selector function applied to each entry in the map."
    },
    {
      "text": "fun <K, V, R> Map<out K, V>.minOfWithOrNull( comparator: Comparator<in R>, selector: (Entry<K, V>) -> R): R?",
      "desc": "Returns the smallest value according to the provided comparator among all values produced by selector function applied to each entry in the map or null if there are no entries."
    },
    {
      "text": "operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V>",
      "desc": "Returns a map containing all entries of the original map except the entry with the given key."
    },
    {
      "text": "operator fun <K, V> Map<out K, V>.minus( keys: Iterable<K>): Map<K, V>",
      "desc": "Returns a map containing all entries of the original map except those entries the keys of which are contained in the given keys collection."
    },
    {
      "text": "operator fun <K, V> Map<out K, V>.minus( keys: Array<out K>): Map<K, V>",
      "desc": "Returns a map containing all entries of the original map except those entries the keys of which are contained in the given keys array."
    },
    {
      "text": "operator fun <K, V> Map<out K, V>.minus( keys: Sequence<K>): Map<K, V>",
      "desc": "Returns a map containing all entries of the original map except those entries the keys of which are contained in the given keys sequence."
    },
    {
      "text": "operator fun <K, V> MutableMap<K, V>.minusAssign(key: K)",
      "desc": "Removes the entry with the given key from this mutable map."
    },
    {
      "text": "operator fun <K, V> MutableMap<K, V>.minusAssign( keys: Iterable<K>)",
      "desc": "Removes all entries the keys of which are contained in the given keys collection from this mutable map."
    },
    {
      "text": "operator fun <K, V> MutableMap<K, V>.minusAssign( keys: Array<out K>)",
      "desc": "Removes all entries the keys of which are contained in the given keys array from this mutable map."
    },
    {
      "text": "operator fun <K, V> MutableMap<K, V>.minusAssign( keys: Sequence<K>)",
      "desc": "Removes all entries from the keys of which are contained in the given keys sequence from this mutable map."
    },
    {
      "text": "fun <K, V> Map<out K, V>.minWith( comparator: Comparator<in Entry<K, V>>): Entry<K, V>?"
    },
    {
      "text": "fun <K, V> Map<out K, V>.minWithOrNull( comparator: Comparator<in Entry<K, V>>): Entry<K, V>?",
      "desc": "Returns the first entry having the smallest value according to the provided comparator or null if there are no entries."
    },
    {
      "text": "fun <K, V> Map<out K, V>.none(): Boolean",
      "desc": "Returns true if the map has no entries."
    },
    {
      "text": "fun <K, V> Map<out K, V>.none( predicate: (Entry<K, V>) -> Boolean): Boolean",
      "desc": "Returns true if no entries match the given predicate."
    },
    {
      "text": "fun <K, V, M : Map<out K, V>> M.onEach( action: (Entry<K, V>) -> Unit): M",
      "desc": "Performs the given action on each entry and returns the map itself afterwards."
    },
    {
      "text": "fun <K, V, M : Map<out K, V>> M.onEachIndexed( action: (index: Int, Entry<K, V>) -> Unit): M",
      "desc": "Performs the given action on each entry, providing sequential index with the entry, and returns the map itself afterwards."
    },
    {
      "text": "fun <K, V> Map<K, V>?.orEmpty(): Map<K, V>",
      "desc": "Returns the Map if its not null, or the empty Map otherwise."
    },
    {
      "text": "operator fun <K, V> Map<out K, V>.plus( pair: Pair<K, V>): Map<K, V>",
      "desc": "Creates a new read-only map by replacing or adding an entry to this map from a given key-value pair."
    },
    {
      "text": "operator fun <K, V> Map<out K, V>.plus( pairs: Iterable<Pair<K, V>>): Map<K, V>",
      "desc": "Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value pairs."
    },
    {
      "text": "operator fun <K, V> Map<out K, V>.plus( pairs: Array<out Pair<K, V>>): Map<K, V>",
      "desc": "Creates a new read-only map by replacing or adding entries to this map from a given array of key-value pairs."
    },
    {
      "text": "operator fun <K, V> Map<out K, V>.plus( pairs: Sequence<Pair<K, V>>): Map<K, V>",
      "desc": "Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value pairs."
    },
    {
      "text": "operator fun <K, V> Map<out K, V>.plus( map: Map<out K, V>): Map<K, V>",
      "desc": "Creates a new read-only map by replacing or adding entries to this map from another map."
    },
    {
      "text": "operator fun <K, V> MutableMap<in K, in V>.plusAssign( pair: Pair<K, V>)",
      "desc": "Appends or replaces the given pair in this mutable map."
    },
    {
      "text": "operator fun <K, V> MutableMap<in K, in V>.plusAssign( pairs: Iterable<Pair<K, V>>)",
      "desc": "Appends or replaces all pairs from the given collection of pairs in this mutable map."
    },
    {
      "text": "operator fun <K, V> MutableMap<in K, in V>.plusAssign( pairs: Array<out Pair<K, V>>)",
      "desc": "Appends or replaces all pairs from the given array of pairs in this mutable map."
    },
    {
      "text": "operator fun <K, V> MutableMap<in K, in V>.plusAssign( pairs: Sequence<Pair<K, V>>)",
      "desc": "Appends or replaces all pairs from the given sequence of pairs in this mutable map."
    },
    {
      "text": "operator fun <K, V> MutableMap<in K, in V>.plusAssign( map: Map<K, V>)",
      "desc": "Appends or replaces all entries from the given map in this mutable map."
    },
    {
      "text": "fun <K, V> MutableMap<in K, in V>.putAll( pairs: Array<out Pair<K, V>>)",
      "desc": "Puts all the given pairs into this MutableMap with the first component in the pair being the key and the second the value."
    },
    {
      "text": "fun <K, V> MutableMap<in K, in V>.putAll( pairs: Iterable<Pair<K, V>>)",
      "desc": "Puts all the elements of the given collection into this MutableMap with the first component in the pair being the key and the second the value."
    },
    {
      "text": "fun <K, V> MutableMap<in K, in V>.putAll( pairs: Sequence<Pair<K, V>>)",
      "desc": "Puts all the elements of the given sequence into this MutableMap with the first component in the pair being the key and the second the value."
    },
    {
      "text": "fun <K, V> MutableMap<out K, V>.remove(key: K): V?",
      "desc": "Removes the specified key and its corresponding value from this map."
    },
    {
      "text": "operator fun <K, V> MutableMap<K, V>.set(key: K, value: V)",
      "desc": "Allows to use the index operator for storing values in a mutable map."
    },
    {
      "text": "operator fun <V> MutableMap<in String, in V>.setValue( thisRef: Any?, property: KProperty<*>, value: V)",
      "desc": "Stores the value of the property for the given object in this mutable map."
    },
    {
      "text": "fun <K, V> Map<out K, V>.toList(): List<Pair<K, V>>",
      "desc": "Returns a List containing all key-value pairs."
    },
    {
      "text": "fun <K, V> Map<out K, V>.toMap(): Map<K, V>",
      "desc": "Returns a new read-only map containing all key-value pairs from the original map."
    },
    {
      "text": "fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap( destination: M): M",
      "desc": "Populates and returns the destination mutable map with key-value pairs from the given map."
    },
    {
      "text": "fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V>",
      "desc": "Returns a new mutable map containing all key-value pairs from the original map."
    },
    {
      "text": "fun Map<String, String>.toProperties(): Properties",
      "desc": "Converts this Map to a Properties object."
    },
    {
      "text": "fun <K, V> Map<out K, V>.toSortedMap( comparator: Comparator<in K>): SortedMap<K, V>",
      "desc": "Converts this Map to a SortedMap. The resulting SortedMap determines the equality and order of keys according to the sorting order provided by the given comparator."
    },
    {
      "text": "fun <K, V> Map<K, V>.withDefault( defaultValue: (key: K) -> V): Map<K, V>",
      "desc": "Returns a wrapper of this read-only map, having the implicit default value provided with the specified function defaultValue."
    },
    {
      "text": "fun <K, V> MutableMap<K, V>.withDefault( defaultValue: (key: K) -> V): MutableMap<K, V>",
      "desc": "Returns a wrapper of this mutable map, having the implicit default value provided with the specified function defaultValue."
    },
    {
      "text": "class HashMap<K, V> : MutableMap<K, V>",
      "desc": "Hash table based implementation of the MutableMap interface."
    }
  ]
}